
(1 (yasnippet-snippets . [(20180122 521) ((yasnippet (0 8 0))) "Collection of yasnippet snippets" tar ((:commit . "b42c2b670bdd761b9c1c232998ebf4bbc5b914e8") (:keywords "snippets"))]) (yasnippet . [(20180121 1213) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." single ((:commit . "16c2b38bce60d455fd93f6187ac020e6236e79e9") (:url . "http://github.com/joaotavora/yasnippet") (:keywords "convenience" "emulation"))]) (with-editor . [(20180111 433) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar ((:commit . "04d59d68dab58a7cf3034c84d8ba0553b78ae30c") (:url . "https://github.com/magit/with-editor") (:keywords "tools"))]) (use-package . [(20180108 1754) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar ((:commit . "05a4033b830bf52c596ceedea10b2cbd91f85fdb") (:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package"))]) (undo-tree . [(20170706 246) nil "Treat undo history as a tree" single ((:commit . "e9a9102f515acd7523158f20e83f300600374989") (:url . "http://www.dr-qubit.org/emacs.php") (:keywords "convenience" "files" "undo" "redo" "history" "tree"))]) (smartparens . [(20180118 735) ((dash (2 13 0)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar ((:commit . "163a593137b8f81c9ca03f4804512198b81be372"))]) (s . [(20171102 227) nil "The long lost Emacs string manipulation library." single ((:commit . "5e9a6857d42015c67681616aa3519f599f97b8d8") (:keywords "strings"))]) (projectile-variable . [(20170208 918) ((emacs (24)) (cl-lib (0 5))) "Store project local variables." single ((:commit . "8d348ac70bdd6dc320c13a12941b32b38140e264") (:url . "https://github.com/zonuexe/projectile-variable") (:keywords "project" "convenience"))]) (projectile-trailblazer . [(20170928 924) ((emacs (24 4)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects using trailblazer" single ((:commit . "a37a4f7b7f727d98e4c74c0256e059e84263553d") (:url . "https://github.com/micdahl/projectile-trailblazer") (:keywords "rails" "projectile" "trailblazer" "languages"))]) (projectile-speedbar . [(20170516 1943) ((projectile (0 11 0)) (sr-speedbar (0))) "projectile integration for speedbar" single ((:commit . "dcab13db72c2084edbebe808e35f1126fe0b3bcd") (:url . "https://github.com/anshulverma/projectile-speedbar") (:keywords "project" "convenience" "speedbar" "projectile"))]) (projectile-sift . [(20160107 215) ((sift (0 2 0)) (projectile (0 13 0))) "Run a sift with Projectile" single ((:commit . "4ce8878a0fc396ded7521ce38852d93e1d863065") (:url . "https://github.com/nlamirault/sift.el") (:keywords "sift" "projectile"))]) (projectile-ripgrep . [(20170211 857) ((ripgrep (0 3 0)) (projectile (0 14 0))) "Run ripgrep with Projectile" single ((:commit . "c47a2da4668ca338e7fadc3d8c095e075caaa17d") (:url . "https://github.com/nlamirault/ripgrep.el") (:keywords "ripgrep" "projectile"))]) (projectile-rails . [(20171117 730) ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects based on projectile-mode" single ((:commit . "348b11b237e87d87e784ab7accaef2bf97664bd6") (:url . "https://github.com/asok/projectile-rails") (:keywords "rails" "projectile"))]) (projectile-hanami . [(20160505 611) ((emacs (24 3)) (projectile (0 12 0)) (rake (0 3 2)) (inf-ruby (2 2 6))) "Minor mode for Hanami projects based on projectile" single ((:commit . "c4b8e7d4dfec789ef8493a7c5d4ce0cf7937e579") (:url . "https://github.com/avdgaag/projectile-hanami") (:keywords "hanami" "ruby" "projectile"))]) (projectile-git-autofetch . [(20171129 1447) ((projectile (0 14 0)) (alert (1 2))) "automatically fetch git repositories" single ((:commit . "da02069d906e6e7f28ea1dd6a9196529315a5cba") (:url . "https://github.com/andrmuel/projectile-git-autofetch") (:keywords "tools" "vc"))]) (projectile-direnv . [(20160305 1738) ((emacs (24)) (s (1 11 0)) (dash (2 12 0)) (projectile (0 13 0))) "Set environment variables from .envrc" single ((:commit . "d5d29e5228f840b7a25358a2fd50353ef2dc9b16") (:url . "https://github.com/christianromney/projectile-direnv") (:keywords "convenience"))]) (projectile-codesearch . [(20171129 600) ((codesearch (20171122 431)) (projectile (20150405 126))) "Integration of codesearch into projectile" single ((:commit . "4e6a2382c26d1218a4a007d31de2bab8ef9d2e7c") (:url . "https://github.com/abingham/emacs-codesearch") (:keywords "tools" "development" "search"))]) (projectile . [(20180118 745) ((emacs (24 3)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single ((:commit . "38824040fa08a02536fbc5253144d482434e4746") (:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience"))]) (popup . [(20160709 729) ((cl-lib (0 5))) "Visual Popup User Interface" single ((:commit . "80829dd46381754639fb764da11c67235fe63282") (:keywords "lisp"))]) (multitran . [(20161122 1323) ((emacs (24)) (cl-lib (0 5))) "Interface to multitran" single ((:commit . "c0ce2e1b3706263946f9240a47c3f65ed4fc0afa") (:keywords "dictionary" "hypermedia"))]) (multiple-cursors . [(20170908 1452) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar ((:commit . "10752700084595bb24712c27ba70a2326302e45b"))]) (multifiles . [(20130615 1433) nil "View and edit parts of multiple files in one buffer" single ((:commit . "dddfe64b8e1c1cd1f9ccc1f03405477fc0d53897") (:keywords "multiple" "files"))]) (multicolumn . [(20150202 1451) nil "Creating and managing multiple side-by-side windows." single ((:commit . "c7a3afecd470859b2e60aa7c554d6e4d436df7fa") (:url . "https://github.com/Lindydancer/multicolumn"))]) (multi-term . [(20160619 233) nil "Managing multiple terminal buffers in Emacs." single ((:commit . "f954e4e18b0a035151d34852387e724d87a3316f") (:url . "http://www.emacswiki.org/emacs/download/multi-term.el") (:keywords "term" "terminal" "multiple buffer"))]) (multi-project . [(20171217 1211) ((emacs (25))) "Find files, compile, search, and switch between" single ((:url . "https://bitbucket.org/ellisvelo/multi-project/overview") (:keywords "convenience" "project" "management"))]) (multi-line . [(20170821 1926) ((emacs (24 3)) (s (1 9 0)) (cl-lib (0 5)) (dash (2 12 0)) (shut-up (0 3 2))) "multi-line statements" tar ((:commit . "d3ce76b6aec62f96ef2c0409d8262fd39e67dccc") (:url . "https://github.com/IvanMalison/multi-line") (:keywords "multi" "line" "length" "whitespace" "programming" "tools" "convenience" "files"))]) (multi-compile . [(20160306 1423) ((emacs (24)) (dash (2 12 1))) "Multi target interface to compile." single ((:commit . "bd0331854774e7a269ce8a7dd49580cd397c0ec2") (:url . "https://github.com/ReanGD/emacs-multi-compile") (:keywords "tools" "compile" "build"))]) (multi . [(20131013 844) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single ((:commit . "0987ab71692717ed457cb3984de184db9185806d") (:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch"))]) (mu4e-query-fragments . [(20170923 622) ((emacs (24 4))) "mu4e query fragments extension" single ((:commit . "34ddad4e6785f575333efcc66153d892daa1c884") (:url . "https://github.com/wavexx/mu4e-query-fragments.el") (:keywords "mu4e" "mail" "convenience"))]) (mu4e-maildirs-extension . [(20171119 1125) ((dash (0 0 0))) "Show mu4e maildirs summary in mu4e-main-view" single ((:commit . "c3ebeedd5c12e190949aed53c3040d51d21de58f") (:url . "http://github.com/agpchil/mu4e-maildirs-extension"))]) (mu4e-jump-to-list . [(20171104 1248) ((emacs (24 4)) (cl-lib (0 5))) "mu4e jump-to-list extension" single ((:commit . "2aa995ddedc7634292b459a3ea2718eea39695cf") (:url . "https://github.com/wavexx/mu4e-jump-to-list.el") (:keywords "mu4e" "mail" "convenience"))]) (mu4e-alert . [(20171222 2315) ((alert (1 2)) (s (1 10 0)) (ht (2 0)) (emacs (24 1))) "Desktop notification for mu4e" single ((:commit . "3095de457ec88e752f83ce086eff4aeb22399980") (:url . "https://github.com/iqbalansari/mu4e-alert") (:keywords "mail" "convenience"))]) (mu-cite . [(20160130 300) ((flim (1 14 9))) "A library to provide MIME features." tar ((:commit . "aea3c2d01eb3284d5e0124059d368e8c6b6ffddc"))]) (mtg-deck-mode . [(20170925 1338) ((emacs (25 1))) "Major mode to edit MTG decks" tar ((:commit . "546a62ada70aa89d325cc3941c8c9379a4c21553") (:url . "https://github.com/mattiasb/mtg-deck-mode") (:keywords "data" "mtg" "magic"))]) (msvc . [(20171225 738) ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (2 0 0))) "Microsoft Visual C/C++ mode" tar ((:commit . "dfc529aa6da8b46b0a0c7db9a0e5e9bc33ab1fb3") (:url . "https://github.com/yaruopooner/msvc") (:keywords "languages" "completion" "syntax check" "mode" "intellisense"))]) (mpv . [(20150218 118) ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) "control mpv for easy note-taking" single ((:commit . "3021c55fa5723a806dde5fb2a630b115e2c53d06") (:url . "https://github.com/kljohann/mpv.el") (:keywords "tools" "multimedia"))]) (mpages . [(20150710 704) nil "An Emacs buffer for quickly writing your Morning Pages" single ((:commit . "39a72a0931ab1cdbfdf0ab9f412dc12d43a3829f") (:url . "https://github.com/slevin/mpages"))]) (mozc-temp . [(20160228 40) ((emacs (24)) (dash (2 10 0)) (mozc (0))) "Use mozc temporarily" single ((:commit . "9d6b645eff901ea79dbc43a55d5a97ead3f4bad7") (:url . "https://github.com/HKey/mozc-temp"))]) (markdownfmt . [(20160609 541) ((emacs (24))) "Format markdown using markdownfmt" single ((:commit . "187a74eb4fd9e8520ce08da42d1d292b9af7f2b7") (:url . "https://github.com/nlamirault/emacs-markdownfmt") (:keywords "markdown"))]) (markdown-toc . [(20170711 1249) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 1))) "A simple TOC generator for markdown file" tar ((:commit . "7038f4f6d5c2bc7e4aea89699a607ac2b7dd16a8"))]) (markdown-preview-mode . [(20171121 2323) ((emacs (24 3)) (websocket (1 6)) (markdown-mode (2 0)) (cl-lib (0 5)) (web-server (0 1 1)) (uuidgen (0 3))) "markdown realtime preview minor mode." tar ((:commit . "4ec15183fc9fadb9368902c9b77a2d0e1196d1c6") (:url . "https://github.com/ancane/markdown-preview-mode") (:keywords "markdown" "gfm" "convenience"))]) (markdown-preview-eww . [(20160111 702) ((emacs (24 4))) "Realtime preview by eww" single ((:commit . "5853f836425c877c8a956501f0adda137ef1d3b7") (:url . "https://github.com/niku/markdown-preview-eww"))]) (markdown-mode . [(20180115 1905) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" single ((:commit . "1c343f5ce4213e6a6e9562c4ab621a1f8e6c31c5") (:url . "https://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex"))]) (markdown-mode+ . [(20170320 1404) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar ((:commit . "411d079f4430a33c34ec0bbcb1535fe1145a2509") (:url . "http://github.com/milkypostman/markdown-mode-plus") (:keywords "markdown" "latex" "osx" "rtf"))]) (magithub . [(20180121 1457) ((emacs (25)) (magit (2 8)) (s (1 12 0)) (ghub+ (0 2 1)) (git-commit (2 8)) (markdown-mode (2 3))) "Magit interfaces for GitHub" tar ((:commit . "8b3a8f5c682f87e620b109130c53ad8ea58280c3") (:url . "https://github.com/vermiculus/magithub") (:keywords "git" "tools" "vc"))]) (magit-topgit . [(20160313 1254) ((emacs (24 4)) (magit (2 1 0))) "TopGit extension for Magit" single ((:commit . "11489ea798bc88d0ea5244bbf725285eedfefbef") (:keywords "vc" "tools"))]) (magit-tbdiff . [(20180120 1553) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-tbdiff" single ((:commit . "aaa040037c38f13c0e6bbce83e38959ef30c1925") (:url . "https://github.com/magit/magit-tbdiff") (:keywords "vc" "tools"))]) (magit-svn . [(20170213 433) ((emacs (24 4)) (magit (2 1 0))) "Git-Svn extension for Magit" single ((:commit . "c833903732a14478f5c4cfc561bae7c50671b36c") (:keywords "vc" "tools"))]) (magit-stgit . [(20171115 754) ((emacs (24 4)) (magit (2 1 0))) "StGit extension for Magit" single ((:commit . "0e44df69d7c0c793808a5278bed35b2c6ec39f7f") (:keywords "vc" "tools"))]) (magit-rockstar . [(20171215 1135) ((dash (2 13 0)) (magit (2 12 0))) "commit like a rockstar" single ((:commit . "c8320472e8a50c8299140ba0943bb1fe485d294a") (:url . "https://github.com/tarsius/magit-rockstar") (:keywords "convenience"))]) (magit-popup . [(20180119 111) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefix-infix-suffix command combos" tar ((:commit . "ab75385a1fb8c0fba0769d448b13ba8324835261") (:url . "https://github.com/magit/magit-popup") (:keywords "bindings"))]) (magit-p4 . [(20170414 546) ((magit (2 1)) (magit-popup (2 1)) (p4 (12 0)) (cl-lib (0 5))) "git-p4 plug-in for Magit" single ((:commit . "c87de6d3f10fd35415a0c56e63747eb14ed5a113") (:url . "https://github.com/qoocku/magit-p4") (:keywords "vc" "tools"))]) (magit-lfs . [(20170312 1524) ((emacs (24 4)) (magit (2 10 3)) (dash (2 13 0))) "Magit plugin for Git LFS" single ((:commit . "799282fce73b668d2cf6e4fa87f889fec8e25333") (:url . "https://github.com/ailrun/magit-lfs") (:keywords "magit" "git" "lfs" "tools" "vc"))]) (magit-imerge . [(20180120 1554) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-imerge" single ((:commit . "1969c445d16e5c59db9548a61a5fe5f0b7448cd3") (:url . "https://github.com/magit/magit-imerge") (:keywords "vc" "tools"))]) (magit-gitflow . [(20170929 124) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single ((:commit . "cc41b561ec6eea947fe9a176349fb4f771ed865b") (:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools"))]) (magit-gh-pulls . [(20171117 226) ((emacs (24 4)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single ((:commit . "d526f4c9ee1709c79f8a4630699ce1f25ae054e7") (:url . "https://github.com/sigma/magit-gh-pulls") (:keywords "git" "tools"))]) (magit-gerrit . [(20160226 130) ((magit (2 3 1))) "Magit plugin for Gerrit Code Review" single ((:commit . "ece6f369694aca17f3ac166ed2801b432acfe20d") (:url . "https://github.com/terranpro/magit-gerrit"))]) (magit-find-file . [(20150702 130) ((magit (2 1 0)) (dash (2 8 0))) "completing-read over all files in Git" single ((:commit . "c3ea91bab37d10a814a829728ec972811f728d60") (:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git"))]) (magit-filenotify . [(20151116 1540) ((magit (1 3 0)) (emacs (24 4))) "Refresh status buffer when git tree changes" single ((:commit . "c0865b3c41af20b6cd89de23d3b0beb54c8401a4") (:keywords "tools"))]) (magit-annex . [(20180120 1534) ((cl-lib (0 3)) (magit (2 11 0))) "Control git-annex from Magit" single ((:commit . "44eaef7d55647d5d4bd466742b738d7a9563d07f") (:url . "https://github.com/magit/magit-annex") (:keywords "vc" "tools"))]) (magit . [(20180123 257) ((emacs (24 4)) (async (20170823)) (dash (20170810)) (ghub (20171207)) (git-commit (20170823)) (let-alist (1 0 5)) (magit-popup (20171121)) (with-editor (20170817))) "A Git porcelain inside Emacs." tar ((:commit . "451daf0b94cde9e0986ec48c3e92ab25f817b77f"))]) (ivy-youtube . [(20171112 732) ((request (0 2 0)) (ivy (0 8 0)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single ((:commit . "8168dc1f26521830dfd99466d35ab93159afd004") (:url . "https://github.com/squiter/ivy-youtube") (:keywords "youtube" "multimedia" "mpv" "vlc"))]) (ivy-xref . [(20171229 252) ((emacs (25 1)) (ivy (0 10 0))) "Ivy interface for xref results" single ((:commit . "aa97103ea8ce6ab8891e34deff7d43aa83fe36dd") (:url . "https://github.com/alexmurray/ivy-xref"))]) (ivy-xcdoc . [(20160917 355) ((ivy (0 8 0)) (emacs (24 4))) "Search Xcode documents with ivy interface." single ((:commit . "5ea22af36c4c2737fb0bec53432c233482d8b314") (:url . "https://github.com/hex2010/emacs-ivy-xcdoc") (:keywords "ivy" "xcode" "xcdoc"))]) (ivy-todo . [(20171208 809) ((ivy (0 8 0)) (emacs (24 3))) "Manage org-mode TODOs with ivy" single ((:commit . "964e347cea1a6097854d7113f5b07f6c5ef81df0") (:url . "http://github.com/Kungsgeten/ivy-todo") (:keywords "convenience"))]) (ivy-rtags . [(20170522 2154) ((ivy (0 7 0)) (rtags (2 10))) "RTags completion back-end for ivy" single ((:commit . "53e74892e8bd15baa4d1bd1d640dcabcba9667ee") (:url . "http://rtags.net"))]) (ivy-rich . [(20180109 1933) ((emacs (24 4)) (ivy (0 8 0))) "More friendly display transformer for ivy." single ((:commit . "efe35d2f579202ca14a90cfd46ecac624109558c") (:keywords "ivy"))]) (ivy-purpose . [(20160724 303) ((emacs (24)) (ivy (0 8)) (window-purpose (1 5))) "Ivy Interface for Purpose" single ((:commit . "0495f2f3aed64d7e0028125e76a9a68f8fc4107e") (:url . "https://github.com/bmag/ivy-purpose"))]) (ivy-pass . [(20170812 1255) ((emacs (24)) (ivy (0 8 0)) (password-store (1 6 5))) "ivy interface for pass" single ((:commit . "5b523de1151f2109fdd6a8114d0af12eef83d3c5") (:url . "https://github.com/ecraven/ivy-pass/") (:keywords "pass" "password" "convenience" "data"))]) (ivy-pages . [(20160728 1220) ((emacs (24 1)) (ivy (0 8 0))) "Complete current buffer's pages with Ivy" single ((:commit . "47b03a1f9384502cf22369ff31a2898c863d3aff") (:url . "https://github.com/igorepst/ivy-pages") (:keywords "convenience" "matching"))]) (ivy-lobsters . [(20171202 1241) ((ivy (0 8 0)) (cl-lib (0 5))) "Browse lobste.rs stories with ivy." single ((:commit . "4364df4b3685fd1b50865ac9360fb948c0288dd1") (:url . "https://github.com/julienXX/ivy-lobsters"))]) (ivy-hydra . [(20171130 1143) ((emacs (24 1)) (ivy (0 9 0)) (hydra (0 13 4))) "Additional key bindings for Ivy" single ((:commit . "92fd1aaae0597cd9c8a8ab382b187491b3f01d3d") (:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching" "bindings"))]) (ivy-historian . [(20170715 2120) ((emacs (24 4)) (historian (20170111)) (ivy (0 8 0)) (flx (0 6 1))) "Persistently store selected minibuffer candidates" single ((:commit . "ba560443a216befd4460fcf16dc6c7f23cb73d8d") (:url . "https://github.com/PythonNut/historian.el") (:keywords "convenience" "ivy"))]) (ivy-gitlab . [(20160519 312) ((s (1 9 0)) (dash (2 9 0)) (ivy (0 8 0)) (gitlab (0 8))) "Ivy interface to Gitlab" single ((:commit . "67567a354a1888419331b79862f151817d9747c5") (:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "ivy"))]) (ivy-feedwrangler . [(20171121 1306) ((ivy (9 0))) "An Ivy interface to the Feedwrangler RSS service" single ((:commit . "ad4f94f8cc4557876ea0b0fb9b519f16ce23e96a") (:url . "https://github.com/asimpson/ivy-feedwrangler") (:keywords "rss" "url" "ivy"))]) (ivy-erlang-complete . [(20170709 2151) ((async (1 9)) (counsel (0 8 0)) (ivy (0 8 0)) (erlang (19 2)) (emacs (24 4))) "Erlang context sensitive completion at point using ivy. It also support xref and eldoc." tar ((:commit . "acd6322571cb0820868a6febdc5326782a29b729"))]) (ivy-dired-history . [(20170625 2256) ((ivy (0 9 0)) (counsel (0 9 0)) (cl-lib (0 5))) "use ivy to open recent directories" single ((:commit . "c9c67ea1ee5e68443f0e6006ba162d6c8d868b69") (:url . "https://github.com/jixiuf/ivy-dired-history"))]) (ivy-bibtex . [(20180110 1209) ((swiper (0 7 0)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A bibliography manager based on Ivy" tar ((:commit . "adf0e363ef1a1feaa1c83ef7f16a7d6c408b62ce"))]) (ivy . [(20180115 1555) ((emacs (24 1))) "Incremental Vertical completYon" tar ((:commit . "92fd1aaae0597cd9c8a8ab382b187491b3f01d3d") (:url . "https://github.com/abo-abo/swiper") (:keywords "matching"))]) (hydra . [(20171120 1042) ((cl-lib (0 5))) "Make bindings that stick around." tar ((:commit . "1deed8a00e6936903cace1dac123364b6c0cde90") (:url . "https://github.com/abo-abo/hydra") (:keywords "bindings"))]) (highlight2clipboard . [(20151020 1140) ((htmlize (1 47))) "Copy text to clipboard with highlighting." tar ((:commit . "6ce58a060d9c5843ccb8c79ec2bba7858c68ac15") (:keywords "tools"))]) (highlight-unique-symbol . [(20130611 2242) ((deferred (0 3 2))) "highlight symbols which not appear in the repository" single ((:commit . "4141bf86a94e30d94d9af9c29d40b16886226e1c") (:url . "https://github.com/hitode909/emacs-highlight-unique-symbol"))]) (highlight-thing . [(20170919 704) nil "Minimalistic minor mode to highlight current thing under point." single ((:commit . "4eadd178175772fb04ae50e1199d797a6375ad4d") (:url . "https://github.com/fgeller/highlight-thing.el") (:keywords "highlight" "thing" "symbol"))]) (highlight-symbol . [(20160102 1209) nil "automatic and manual symbol highlighting" single ((:commit . "7a789c779648c55b16e43278e51be5898c121b3a") (:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching"))]) (highlight-stages . [(20161212 657) nil "highlight staged (quasi-quoted) expressions" single ((:commit . "29cbc5b78261916da042ddb107420083da49b271") (:url . "http://hins11.yu-yake.com/"))]) (highlight-refontification . [(20170211 1224) nil "Visualize font-lock refontification." single ((:commit . "32632897d88c4611fadb08517ca00ef5cbc989b6") (:url . "https://github.com/Lindydancer/highlight-refontification") (:keywords "faces" "tools"))]) (highlight-quoted . [(20140916 1122) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single ((:commit . "24103478158cd19fbcfb4339a3f1fa1f054f1469") (:url . "https://github.com/Fanael/highlight-quoted"))]) (highlight-parentheses . [(20170809 1151) nil "highlight surrounding parentheses" single ((:commit . "c38885bba4f174c0a2cad3a60fe12b7cf8699aa1") (:url . "https://github.com/tsdh/highlight-parentheses.el") (:keywords "faces" "matching"))]) (highlight-operators . [(20170213 1420) nil "a face for operators in programming modes" single nil]) (highlight-numbers . [(20170905 342) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single ((:commit . "f952ecb7448c125d4ef82ee6ad136b25e640d74a") (:url . "https://github.com/Fanael/highlight-numbers"))]) (highlight-leading-spaces . [(20151216 422) ((emacs (24 4))) "Highlight leading spaces" single ((:commit . "840db19d863dd97993fd9f893f5be501627b6354") (:url . "https://github.com/mrBliss/highlight-leading-spaces"))]) (highlight-indentation . [(20171218 137) nil "Minor modes for highlighting indentation" single ((:commit . "35e2c1d4f8f368685893128f77f90454cb9c2708") (:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs"))]) (highlight-indent-guides . [(20170516 1355) ((emacs (24))) "Minor mode to highlight indentation" single ((:commit . "b51744bde1287979f2d948f46501bd6ed0897f69") (:url . "https://github.com/DarthFennec/highlight-indent-guides"))]) (highlight-function-calls . [(20170907 2200) ((emacs (24 4))) "Highlight function/macro calls" single ((:commit . "f7a1eaf95fc64cc0db4d0567f9ff79ec4ae04787") (:url . "http://github.com/alphapapa/highlight-function-calls") (:keywords "faces" "highlighting"))]) (highlight-escape-sequences . [(20171117 437) nil "Highlight escape sequences" single ((:commit . "08d846a7aa748209d65fecead2b6a766c3e5cb41") (:url . "https://github.com/dgutov/highlight-escape-sequences") (:keywords "convenience"))]) (highlight-defined . [(20141225 730) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single ((:commit . "243478cc204ab42d29805ed610961cbb260c1dfd") (:url . "https://github.com/Fanael/highlight-defined"))]) (highlight-context-line . [(20170319 1442) nil "Improve orientation when scrolling" single ((:commit . "716e10a0c7b703b5f1d9c6ca1481524a4d06b7b8") (:url . "https://github.com/ska2342/highlight-context-line/") (:keywords "faces" "services" "user"))]) (highlight-blocks . [(20151201 815) ((emacs (24))) "Highlight the blocks point is in" single ((:commit . "9c4240a5d16008db430d1a81c76dad474d3deb0c") (:url . "https://github.com/Fanael/highlight-blocks"))]) (hierarchy . [(20171221 351) ((emacs (25 1))) "Library to create and display hierarchy structures" single ((:commit . "06f21d3fc16c44c1fa45dc9c91d10100b4db9355") (:url . "https://github.com/DamienCassou/hierarchy"))]) (hideshow-org . [(20120223 1450) nil "Provides org-mode like hide and show for hideshow.el" single ((:commit . "16419e52e6cdd2f46f755144c0ab11ce00d1a626") (:keywords "c" "c++" "java" "lisp" "tools" "editing" "comments" "blocks" "hiding" "outlines" "org-mode"))]) (hide-lines . [(20151127 1040) nil "Commands for hiding lines based on a regexp" single ((:commit . "331122bf19361130351cfe55968c2a7820329eb3") (:url . "https://github.com/vapniks/hide-lines") (:keywords "convenience"))]) (hi2 . [(20141005 1231) nil "indentation module for Haskell Mode" single ((:commit . "c9d199727b5cdcb9e36a972b38131ce4611fd6c8") (:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell"))]) (hgrc-mode . [(20150409 1343) nil "major mode for editing hgrc files" single ((:commit . "314e8320b82cc1ce74b1bd372f296252e7a23090") (:url . "http://github.com/omajid/hgrc-mode") (:keywords "convenience" "vc" "hg"))]) (hgignore-mode . [(20160430 1707) nil "a major mode for editing hgignore files" single ((:commit . "7aa9f3b8a9c610dbd80b952061b40194e1d9c5bd") (:url . "http://github.com/omajid/hgignore-mode") (:keywords "convenience" "vc" "hg"))]) (hfst-mode . [(20160708 502) nil "major mode for editing HFST files" single ((:commit . "ac1bb9dd92545d3e7fdc05c83996c227cc15c6b8") (:url . "http://wiki.apertium.org/wiki/Emacs") (:keywords "languages"))]) (hexo . [(20171226 2035) ((emacs (24 3))) "Major mode & tools for Hexo" single ((:commit . "07c2366d1bdc25e09bebf429050bc0e8a7bb7aa8") (:url . "https://github.com/kuanyui/hexo.el") (:keywords "tools" "hexo"))]) (heroku-theme . [(20150522 1919) nil "Heroku color theme" single ((:commit . "8083643fe92ec3a1c3eb82f1b8dc2236c9c9691d") (:url . "https://github.com/jonathanchu/color-theme-heroku"))]) (heroku . [(20120629 1113) nil "Interface to Heroku apps." single ((:commit . "92af1c073b593c4def99c8777c869992aa4d0b3a") (:url . "https://github.com/technomancy/heroku.el") (:keywords "convenience" "api" "database"))]) (hemisu-theme . [(20130508 1144) nil "Hemisu for Emacs." tar ((:commit . "5c206561aa2c844ecdf3e3b672c3235e559ddd7f") (:url . "http://github/anrzejsliwa/django-theme"))]) (hemera-theme . [(20170910 603) ((emacs (24))) "Light theme" single ((:commit . "354ae3b788c11ac08e6e2fe7c86adc621e2b16fd") (:url . "https://github.com/GuidoSchmidt/emacs-hemera-theme") (:keywords "themes" "light-theme"))]) (helpful . [(20180120 355) ((emacs (25 1)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 11 0)) (elisp-refs (1 2)) (shut-up (0 3))) "a better *help* buffer" single ((:commit . "6530314def5685772387f67d118ff31cbb2fad7a") (:url . "https://github.com/Wilfred/helpful") (:keywords "help" "lisp"))]) (helm-zhihu-daily . [(20160625 445) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" single ((:commit . "be27dcc6be1eb97663b65581a9a5c0fc81cfaba7") (:url . "https://github.com/xuchunyang/helm-zhihu-daily"))]) (helm-z . [(20171203 1925) ((helm (1 0))) "Show z directory list with helm.el support." single ((:commit . "37212220bebea8b9c238cb1bbacd8332b7f26c03") (:url . "https://github.com/yynozk/helm-z"))]) (helm-youtube . [(20161113 1848) ((request (0 2 0)) (helm (2 3 1)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single ((:commit . "202c27fc3b54927611e9d9c764465e1b42ef7e41") (:url . "https://github.com/maximus12793/helm-youtube") (:keywords "youtube" "multimedia"))]) (helm-xref . [(20171209 346) ((emacs (25 1)) (helm (1 9 4))) "Helm interface for xref results" single ((:commit . "ad98c3f6e5404e44e7e87210b5827bef75e16a25") (:url . "https://github.com/brotzeitmacher/helm-xref"))]) (helm-xcdoc . [(20160116 218) ((helm (1 5)) (emacs (24 4))) "Search Xcode Document by docsetutil and eww with helm interface" single ((:commit . "a85612149a6d8e18ab309b3db2d222ce39c42049") (:url . "https://github.com/fujimisakari/emacs-helm-xcdoc"))]) (helm-wordnet . [(20160128 707) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to local wordnet dictionary" single ((:commit . "a36dbc6fcb570b812870bc1e190f203e0a0042fc") (:url . "https://github.com/raghavgautam/helm-wordnet") (:keywords "dictionary" "wordnet" "emacs" "elisp" "helm"))]) (helm-w3m . [(20171102 216) ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) "W3m bookmark - helm interface." single ((:commit . "8345b7e60702911f54eb6571e429c0d31878957d"))]) (helm-w32-launcher . [(20141223 1214) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) "Start Menu entry launcher using Helm" tar ((:commit . "3e59ad62b89dd21d334af0203d445a83eb25dc5b") (:url . "https://github.com/Fanael/helm-w32-launcher"))]) (helm-unicode . [(20160715 533) ((helm (1 9 8)) (emacs (24 4))) "Helm command for unicode characters." single ((:commit . "1ad1fcca7a83c163ae74eb72a443cfc102128e33"))]) (helm-tramp . [(20171224 702) ((emacs (24 3)) (helm (2 0))) "Tramp helm interface for ssh, docker, vagrant" single ((:commit . "94e05b0bf6f2604a2786ef6ff358363b9d4790ec") (:url . "https://github.com/masasam/emacs-helm-tramp"))]) (helm-themes . [(20160917 2245) ((helm-core (2 0)) (emacs (24 4))) "Color theme selection with helm interface" single ((:commit . "1160af42590b0d845a55e65e1e782d9e4027fd6e") (:url . "https://github.com/syohex/emacs-helm-themes"))]) (helm-systemd . [(20160517 2333) ((emacs (24 4)) (helm (1 9 2)) (with-editor (2 5 0))) "helm's systemd interface" single ((:commit . "0892535baa405a2778be2f0f013bac768e72b1f9") (:keywords "convenience"))]) (helm-system-packages . [(20180123 916) ((emacs (24 4)) (helm (2 8 6)) (seq (1 8))) "Helm UI wrapper for system package managers." tar ((:commit . "7563308e906c4c3198c186518ccd8c818dcdec29") (:url . "https://github.com/emacs-helm/helm-system-packages") (:keywords "helm" "packages"))]) (helm-swoop . [(20170923 2127) ((helm (1 0)) (emacs (24 3))) "Efficiently hopping squeezed lines powered by helm interface" single ((:commit . "66a951700e0ef0621cc705791bdd6699488ab121") (:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search"))]) (helm-sql-connect . [(20170319 551) ((helm (0 0 0))) "Choose a database to connect to via Helm." single ((:commit . "5aead55b6f8636140945714d8c332b287ab9ef10") (:url . "https://github.com/eric-hansen/helm-sql-connect") (:keywords "tools" "convenience" "comm"))]) (helm-spotify-plus . [(20180107 338) ((emacs (24 4)) (helm (2 0 0)) (multi (2 0 1))) "Control Spotify search and select music with Helm." single ((:commit . "895f241f1259891d5c89cd42023f119f9fa121d6"))]) (helm-spotify . [(20160905 1447) ((helm (0 0 0)) (multi (2 0 0))) "Control Spotify with Helm." single ((:commit . "f7a62d1ff88e3127de9be7cd3e818b0a92268ab3") (:url . "https://github.com/krisajenkins/helm-spotify") (:keywords "helm" "spotify"))]) (helm-spaces . [(20161001 709) ((helm-core (2 2)) (spaces (0 1 0))) "helm sources for spaces" single ((:commit . "877e2b5178926308d6a7c2a37477bb12c33a96d4") (:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience"))]) (helm-smex . [(20171004 1308) ((emacs (24)) (smex (3 0)) (helm (1 7 7))) "Helm interface for smex" single ((:commit . "2269375dfa452b88b5170d1a5d5849ebb2c1e413") (:keywords "convenience"))]) (helm-sheet . [(20130630 539) ((helm (1 0))) "helm sources for sheet" single ((:commit . "d360b68d0ddb09aa1854e7b2f3cb39caeee26463") (:url . "https://github.com/yasuyk/helm-sheet") (:keywords "helm" "sheet"))]) (helm-selected . [(20171222 1810) ((emacs (24 4)) (helm (2 8 6)) (selected (1 1))) "helm extension for selected.el" single ((:commit . "d2609cdfce14052ab2d9c23761d4fe56966a8ed1") (:url . "https://github.com/takaxp/helm-selected") (:keywords "extensions" "convenience"))]) (helm-sage . [(20160514 45) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 1 0))) "A helm extension for sage-shell-mode." single ((:commit . "f14e9281d8f2162df7d8f9c2ad9ad1248a24803b") (:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm"))]) (helm-safari . [(20160403 2024) ((helm (1 9 1)) (emacs (24))) "Browse your Safari bookmarks and history" single ((:commit . "664c7f4488829228eed7e90cd53002e14bec555b") (:url . "https://github.com/xuchunyang/helm-safari") (:keywords "tools"))]) (helm-rubygems-org . [(20140826 456) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single ((:commit . "6aaed984f698cbdf9f9aceb0221404563e28764d") (:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm"))]) (helm-rubygems-local . [(20130711 1811) ((helm (1 5 3))) "Installed local rubygems find-file for helm" single ((:commit . "289cb33d41c703af9791d6da46b55f070013c2e3") (:url . "https://github.com/f-kubotar/helm-rubygems-local"))]) (helm-rtags . [(20170812 2111) ((helm (2 0)) (rtags (2 10))) "A front-end for rtags" single ((:commit . "53e74892e8bd15baa4d1bd1d640dcabcba9667ee") (:url . "http://rtags.net"))]) (helm-ros . [(20160812 1052) ((helm (1 9 9)) (xterm-color (1 0)) (cl-lib (0 5))) "Interfaces ROS with helm" single ((:commit . "92b0b215f6a017f0f57f1af15466cc0b2a5a0135") (:url . "https://www.github.com/davidlandry93/helm-ros") (:keywords "helm" "ros"))]) (helm-robe . [(20151208 1955) ((helm (1 7 7))) "completing read function for robe" single ((:commit . "6e69543b4ee76c5f8f3f2510c76e6d9aed17a370") (:url . "https://github.com/syohex/emacs-helm-robe"))]) (helm-rhythmbox . [(20160524 458) ((helm (1 5 0)) (cl-lib (0 5))) "control Rhythmbox's play queue via Helm" single ((:commit . "c92e1ded34ddd4e62e7e9a558259c232e05193fa") (:url . "https://github.com/mrBliss/helm-rhythmbox"))]) (helm-recoll . [(20160731 221) ((helm (1 9 9))) "helm interface for the recoll desktop search tool." single ((:commit . "cc4c4fa9c8f4f99383647baa8512b60523dc8b36") (:url . "https://github.com/emacs-helm/helm-recoll") (:keywords "convenience"))]) (helm-rdefs . [(20161129 2136) ((emacs (24)) (helm (1 6 4))) "rdefs with helm interface" single ((:commit . "cd3a6b3af3015ee58ef30cb7c81c79ebe5fc867b") (:url . "https://github.com/saidie/helm-rdefs") (:keywords "matching" "tools"))]) (helm-rb . [(20131123 839) ((helm (1 0)) (helm-ag-r (20131123))) "Search Ruby's method by ag and display helm" tar ((:commit . "4949d646420a9849af234dacdd8eb34a77c662fd") (:url . "https://github.com/yuutayamada/helm-rb") (:keywords "searching" "ruby"))]) (helm-rails . [(20130424 819) ((helm (1 5 1)) (inflections (1 1))) "Helm extension for Rails projects." single ((:commit . "506d9948d45dfbc575c9c4c0d102c1ad2f511e82") (:url . "https://github.com/asok/helm-rails") (:keywords "helm" "rails" "git"))]) (helm-rage . [(20180118 732) ((helm (1 9 8)) (emacs (24 4)) (dash (2 13 0)) (s (1 11 0))) "Helm command for rage characters." tar ((:commit . "5d0aefb53d859186181d4bdcfeff7d315339c7b8") (:url . "https://github.com/bomgar/helm-rage") (:keywords "helm" "rage" "meme"))]) (helm-qiita . [(20170821 609) ((helm (2 8 2))) "Qiita with helm interface" single ((:commit . "f00a61fc802d0f6442f07e7bd1c55fedf60f3895") (:url . "https://github.com/masutaka/emacs-helm-qiita"))]) (helm-pydoc . [(20160917 2242) ((helm-core (2 0)) (emacs (24 4))) "pydoc with helm interface" tar ((:commit . "85480a29b56dacde425655bc8f5a597c785afdf5") (:url . "https://github.com/syohex/emacs-helm-pydoc"))]) (helm-purpose . [(20170114 836) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4))) "Helm Interface for Purpose" single ((:commit . "9ff4c21c1e9ebc7afb851b738f815df7343bb287") (:url . "https://github.com/bmag/helm-purpose"))]) (helm-pt . [(20160214 1542) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar ((:commit . "8acc52911dad1ed0c3975f134a468762afe0b76b") (:keywords "helm" "platinum searcher"))]) (helm-prosjekt . [(20140128 2317) ((prosjekt (0 3)) (helm (1 5 9))) "Helm integration for prosjekt." single ((:commit . "a864a8be5842223043702395f311e3350c28e9db") (:url . "https://github.com/abingham/prosjekt"))]) (helm-projectile . [(20170926 1123) ((helm (1 7 7)) (projectile (0 14 0)) (cl-lib (0 3))) "Helm integration for Projectile" single ((:commit . "4466adbcada8be19ec97b9dba52e12b8da3da849") (:url . "https://github.com/bbatsov/helm-projectile") (:keywords "project" "convenience"))]) (helm-project-persist . [(20151210 743) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single ((:commit . "357950fbac18090985a750e40d5d8b10ee9dcd53") (:keywords "project-persist" "project" "helm"))]) (helm-proc . [(20161005 2005) ((helm (1 6 0))) "Helm interface for managing system processes" tar ((:commit . "576d31c2d74ba3897d56e2acd2b0993f52c2547c"))]) (helm-phpunit . [(20160513 153) ((helm (1 9 5)) (phpunit (0 7 0))) "Helm integration for phpunit.el" single ((:commit . "739f26204ad2ba76c25f45e8eab1e5216f7c3518") (:url . "https://github.com/eric-hansen/phpunit-helm") (:keywords "phpunit" "helm" "php"))]) (helm-perspeen . [(20170228 545) ((perspeen (0 1 0)) (helm (2 5 0))) "Helm interface for perspeen." single ((:commit . "7fe2922d85608bfa9e18269fc44181428b8849ff") (:url . "https://github.com/jimo1001/helm-perspeen") (:keywords "projects" "lisp"))]) (helm-perldoc . [(20160917 2256) ((helm-core (2 0)) (deferred (0 3 1)) (emacs (24 4))) "perldoc with helm interface" tar ((:commit . "1979f9f67814c11ec9498502237c89a5e1153100") (:url . "https://github.com/syohex/emacs-helm-perldoc"))]) (helm-pass . [(20180103 1838) ((helm (0)) (password-store (0)) (auth-password-store (0))) "helm interface of pass, the standard Unix password manager" single ((:commit . "986af08301476bc6a1c8645dc5d2302a31d5044d") (:url . "https://github.com/jabranham/helm-pass"))]) (helm-pages . [(20161120 1826) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single ((:commit . "51dcb9374d1df9feaae85e60cfb39b970554ecba") (:keywords "convenience" "helm" "outlines"))]) (helm-orgcard . [(20151001 824) ((helm-core (1 7 7))) "browse the orgcard by helm" single ((:commit . "9655ac340d1ccc5f3d1c0f7c49be8dd3556d4d0d") (:url . "https://github.com/emacs-jp/helm-orgcard") (:keywords "convenience" "helm" "org"))]) (helm-org-rifle . [(20180115 137) ((emacs (24 4)) (dash (2 12)) (f (0 18 1)) (helm (1 9 4)) (s (1 10 0))) "Rifle through your Org files" single ((:commit . "cd875b796e1a5d36ca99dede653a8e315a00029a") (:url . "http://github.com/alphapapa/helm-org-rifle") (:keywords "hypermedia" "outlines"))]) (helm-open-github . [(20170219 1759) ((emacs (24 4)) (helm-core (1 7 7)) (gh (0 8 2))) "Utilities of Opening Github Page" single ((:commit . "2f03d97552a1233db7694116d5f80ecde7612756") (:url . "https://github.com/syohex/emacs-helm-open-github"))]) (helm-notmuch . [(20170903 2159) ((helm (1 9 3)) (notmuch (0 21))) "Search emails with Notmuch and Helm" single ((:commit . "782c221bf293eee55990de5b54171f08d881dcee") (:url . "https://github.com/xuchunyang/helm-notmuch") (:keywords "mail"))]) (helm-nixos-options . [(20151013 1609) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single ((:commit . "7007363e773a419203a69798fb0e0731b2eb0f73") (:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (helm-navi . [(20170402 752) ((emacs (24 4)) (helm (1 9 4)) (navi-mode (2 0)) (s (1 10 0))) "Helm for navi-mode" single ((:commit . "2256591174ff79f889450fdc10822316819d6476") (:url . "http://github.com/emacs-helm/helm-navi") (:keywords "navigation" "outlines"))]) (helm-mu . [(20171027 933) ((helm (1 5 5))) "Helm sources for searching emails and contacts" single ((:commit . "cda769ef48e1e11e3b21cdafa85adb8e36384d78") (:url . "https://github.com/emacs-helm/helm-mu"))]) (helm-mt . [(20160917 2152) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management" single ((:commit . "d2bff4100118483bc398c56d0ff095294209265b") (:url . "https://github.com/dfdeshom/helm-mt") (:keywords "helm" "multi-term"))]) (helm-mode-manager . [(20151124 138) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single ((:commit . "5d9c3ca4f8205d07ff4e03c4c3e88f596751c1fc") (:url . "https://github.com/istib/helm-mode-manager"))]) (helm-migemo . [(20151009 2056) ((emacs (24 4)) (helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single ((:commit . "66c6a19d07c6a385daefd2090d0709d26b608b4e") (:url . "https://github.com/emacs-jp/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n"))]) (helm-make . [(20171103 1155) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single ((:commit . "feae8df22bc4b20705ea08ac9adfc2b43bb348d0") (:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile"))]) (helm-ls-svn . [(20150717 39) ((emacs (24 1)) (helm (1 7 0)) (cl-lib (0 5))) "helm extension to list svn files" single ((:commit . "4d4dc1a272f27fba5fdd7cc47e5d309b53c63ae3") (:url . "https://svn.macports.org/repository/macports/users/chunyang/helm-ls-svn.el/helm-ls-svn.el") (:keywords "helm" "svn"))]) (helm-ls-hg . [(20150908 2243) ((helm (1 7 8))) "List hg files in hg project." single ((:commit . "61b91a22fcfb62d0fc56e361ec01ce96973c7165"))]) (helm-ls-git . [(20170727 1238) ((helm (1 7 8))) "list git files." single ((:commit . "d116bb96b6ea946f633ed7735fbf38a63e611a3a"))]) (helm-lobsters . [(20150213 746) ((helm (1 0)) (cl-lib (0 5))) "helm front-end for lobste.rs" single ((:commit . "53c5b42baf72776dcba891fc3d7cd7d47721e9b0") (:url . "https://github.com/julienXX/helm-lobste.rs"))]) (helm-lean . [(20171102 754) ((emacs (24 3)) (dash (2 12 0)) (helm (2 8 0)) (lean-mode (3 3 0))) "Helm interfaces for lean-mode" single ((:commit . "ae90bd280588c96d540892d0f42247db5a126f51") (:url . "https://github.com/leanprover/lean-mode") (:keywords "languages"))]) (helm-lastpass . [(20180114 937) ((emacs (25 1)) (helm (2 0)) (csv (2 1))) "Helm interface of LastPass" single ((:commit . "65ac0a80b5908b43ecd6a89c17f22f5c9c6734b0") (:url . "https://github.com/xuchunyang/helm-lastpass"))]) (helm-kythe . [(20170709 26) ((emacs (25)) (dash (2 12 0)) (helm (2 0))) "Google Kythe helm interface" single ((:commit . "eabbef4948f8ec7c7b2fac498e9145dfdb10ca82") (:url . "https://github.com/MaskRay/emacs-helm-kythe"))]) (helm-jstack . [(20150602 2122) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to Jps & Jstack for Java/JVM processes" single ((:commit . "2064f7215dcf4ccbd6a7b8784223251507746da4") (:keywords "java" "jps" "jstack" "jvm" "emacs" "elisp" "helm"))]) (helm-js-codemod . [(20171106 244) ((emacs (24 4)) (helm-core (1 9 8)) (js-codemod (1 0 0))) "A helm interface for running js-codemods" single ((:commit . "18503d94e64418e8ea5c5854f197ae9f3009cdbf") (:keywords "helm" "js" "codemod" "region"))]) (helm-j-cheatsheet . [(20170217 29) ((helm (1 5 3))) "Quick J reference for Emacs" single ((:commit . "6c47e7162b9ba2de4b41221d01180146973d860b") (:url . "https://github.com/abo-abo/helm-j-cheatsheet"))]) (helm-itunes . [(20151012 2348) ((helm (1 6 1))) "Play local iTunes and Spotify tracks" single ((:commit . "966de755a5aadbe02311a6cef77bd4790e84c263") (:url . "https://github.com/daschwa/helm-itunes"))]) (helm-ispell . [(20151231 53) ((helm-core (1 7 7))) "ispell-complete-word with helm interface" single ((:commit . "cb735695ab3a0e66c123c2f3f3e8911fb1c2d5fc") (:url . "https://github.com/syohex/emacs-helm-ispell"))]) (helm-img-tiqav . [(20151224 1522) ((helm-img (0 0 1))) "An helm-source for joking." single ((:commit . "33a7e9508bc8f37d53320b56c92b53d321a57bb0") (:url . "https://github.com/l3msh0/helm-img") (:keywords "convenience"))]) (helm-img . [(20151224 1521) ((helm (1 7 7)) (cl-lib (0 5))) "Utilities for making image sources for helm." tar ((:commit . "aa3f8a5dce8d0413bf07584f07153a39015c2bfc") (:url . "https://github.com/l3msh0/helm-img") (:keywords "convenience"))]) (helm-idris . [(20141202 957) ((helm (0 0 0)) (idris-mode (0 9 14))) "A Helm datasource for Idris documentation, queried from the compiler" single ((:commit . "a2f45d6817974f318b55ad9b7fd19d5df132d47e") (:keywords "languages" "helm"))]) (helm-hunks . [(20171217 1133) ((emacs (24 4)) (helm (1 9 8))) "A helm interface for git hunks - browsing, staging, unstaging and killing" single ((:commit . "6392bf716f618eac23ce81140aceb0dfacb9c6d0") (:keywords "helm" "git" "hunks" "vc"))]) (helm-hoogle . [(20161026 2234) ((helm (1 6 2)) (emacs (24 4))) "Use helm to navigate query results from Hoogle" single ((:commit . "73969a9d46d2121a849a01a9f7ed3636d01f7bbc") (:url . "https://github.com/jwiegley/haskell-config") (:keywords "haskell" "programming" "hoogle"))]) (helm-helm-commands . [(20130902 1048) ((helm (1 5 4))) "List all helm commands with helm" single ((:commit . "3a05aa19c976501343ad9ae630a36810921a85f6") (:url . "https://github.com/vapniks/helm-helm-commands") (:keywords "convenience"))]) (helm-hayoo . [(20151013 2351) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single ((:commit . "dd4c0c8c87521026edf1b808c4de01fa19b7c693") (:keywords "helm"))]) (helm-hatena-bookmark . [(20170821 646) ((helm (2 8 2))) "Hatena::Bookmark with helm interface" single ((:commit . "ee0d2554f573779210b0e2595e539b3e28461f1d") (:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark"))]) (helm-gtags . [(20170115 2129) ((emacs (24 4)) (helm (2 0))) "GNU GLOBAL helm interface" single ((:commit . "108e93d0d099ebb7b98847388f368311cf177033") (:url . "https://github.com/syohex/emacs-helm-gtags"))]) (helm-growthforecast . [(20140119 1944) ((helm (1 5 9))) "helm extensions for growthforecast." single ((:commit . "0f94ac090d6c354058ad89a86e5c18385c136d9b") (:url . "https://github.com/daic-h/helm-growthforecast"))]) (helm-grepint . [(20161001 713) ((helm (1 0)) (emacs (24))) "Generic helm interface to grep" single ((:commit . "a62ca27515ff6a366b89b420500eb16d380cc653") (:url . "https://github.com/kopoli/helm-grepint") (:keywords "grep" "grepping" "searching" "helm"))]) (helm-google . [(20171215 1159) ((helm (0))) "Emacs Helm Interface for quick Google searches" single ((:commit . "bf3b04e04db5bc99b621b90b7d58a5438db14c66") (:url . "https://github.com/steckerhalter/helm-google") (:keywords "helm" "google" "search" "browse"))]) (helm-go-package . [(20161102 1853) ((emacs (24 4)) (helm-core (2 2 1)) (go-mode (1 4 0)) (deferred (0 4 0))) "helm sources for Go programming language's package" single ((:commit . "e42c563936c205ceedb930a687c11b4bb56447bc") (:url . "https://github.com/yasuyk/helm-go-package"))]) (helm-gitlab . [(20160519 303) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0 8 0))) "Helm interface to Gitlab" single ((:commit . "67567a354a1888419331b79862f151817d9747c5") (:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm"))]) (helm-gitignore . [(20170210 1608) ((gitignore-mode (1 1 0)) (helm (1 7 0)) (request (0 1 0)) (cl-lib (0 5))) "Generate .gitignore files with gitignore.io." single ((:commit . "2a2e7da7855a6db0ab3bb6a6a087863d7abd4391") (:url . "https://github.com/jupl/helm-gitignore") (:keywords "helm" "gitignore" "gitignore.io"))]) (helm-github-stars . [(20150625 1523) ((helm (1 6 8)) (emacs (24 4))) "Helm integration for your starred repositories on github" single ((:commit . "9211be3fbb65ca8819e0d1a54524ed8abbfaa4fa") (:url . "https://github.com/Sliim/helm-github-stars") (:keywords "helm" "github" "stars"))]) (helm-git-grep . [(20170614 711) ((helm-core (2 2 0))) "helm for git grep, an incremental git-grep(1)" single ((:commit . "744cea07dba6e6a5effbdba83f1b786c78fd86d3") (:url . "https://github.com/yasuyk/helm-git-grep"))]) (helm-git-files . [(20141212 517) ((helm (1 5 9))) "helm for git files" single ((:commit . "43193960774069369ac6964bbf7c026900206fa8") (:keywords "helm" "git"))]) (helm-git . [(20120630 1403) nil "Helm extension for Git." single ((:commit . "cb96a52b5aecadd3c27aba7749d14e43ab128d55") (:url . "https://github.com/maio/helm-git") (:keywords "helm" "git"))]) (helm-ghs . [(20170714 2241) ((emacs (24)) (helm (2 2 0))) "ghs with helm interface" single ((:commit . "17a70bf16255d90d67c8350e88200ec8bfd47563") (:url . "https://github.com/iory/emacs-helm-ghs"))]) (helm-ghq . [(20161015 117) ((helm (2 2 0))) "ghq with helm interface" single ((:commit . "49481685adbb25b3f766aabfdb7472becc673a94") (:url . "https://github.com/masutaka/emacs-helm-ghq"))]) (helm-ghc . [(20141105 659) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single ((:commit . "e5ee7b8d3b745d162553aecfbd41381c4de85f35") (:keywords "languages" "helm"))]) (helm-fuzzy-find . [(20171105 2000) ((emacs (24 1)) (helm (1 7 0))) "Find file using Fuzzy Search" single ((:commit . "de2abbf7ca13609587325bacd4a1ed4376b5c927") (:url . "https://github.com/xuchunyang/helm-fuzzy-find") (:keywords "helm" "fuzzy" "find" "file"))]) (helm-fuzzier . [(20160605 1445) ((emacs (24 3)) (helm (1 7 0))) "Better fuzzy matching for Helm" single ((:commit . "8798dcf3583b863df5b9dea7fe3b0179ba1c35bc") (:url . "http://github.com/EphramPerdition/helm-fuzzier") (:keywords "convenience" "helm" "fuzzy"))]) (helm-frame . [(20170515 1250) ((emacs (24 4))) "open helm buffers in a dedicated frame" single ((:commit . "389e6461a423d649b7062ba99a2234bef7770059") (:keywords "lisp" "helm" "popup" "frame"))]) (helm-flyspell . [(20170210 1101) ((helm (1 6 5))) "Helm extension for correcting words with flyspell" single ((:commit . "8d4d947c687cb650cb149aa2271ad5201ea92594") (:url . "https://github.com/pronobis/helm-flyspell") (:keywords "convenience"))]) (helm-flymake . [(20160609 1702) ((helm (1 0))) "helm interface for flymake" single ((:commit . "72cf18a1a1f843db9bb5d58301739ea9ccb1655b") (:url . "https://github.com/tam17aki"))]) (helm-flycheck . [(20160710 129) ((dash (2 12 1)) (flycheck (28)) (helm-core (1 9 8))) "Show flycheck errors with helm" single ((:commit . "3cf7d3bb194acacc6395f88360588013d92675d6") (:url . "https://github.com/yasuyk/helm-flycheck") (:keywords "helm" "flycheck"))]) (helm-flx . [(20180102 2116) ((emacs (24 4)) (helm (1 7 9)) (flx (0 5))) "Sort helm candidates by flx score" single ((:commit . "6640fac5cb16bee73c95b8ed1248a4e5e113690e") (:url . "https://github.com/PythonNut/helm-flx") (:keywords "convenience" "helm" "fuzzy" "flx"))]) (helm-firefox . [(20161202 517) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single ((:commit . "0ad34b7b5abc485a86cae6920c14de861cbeb085") (:url . "https://github.com/emacs-helm/helm-firefox"))]) (helm-filesets . [(20140929 1135) ((helm (1 6 3)) (filesets+ (0))) "A helm source for emacs filesets" single ((:commit . "b352910af4c3099267a8aa0169c7f743b35bb1fa") (:url . "https://github.com/gcla/helm-filesets") (:keywords "filesets"))]) (helm-exwm . [(20180115 311) ((emacs (25 2)) (helm (2 8 5)) (exwm (0 15))) "Helm for EXWM buffers" single ((:commit . "0b557cbf0f1c84b80a83ffafb17c5aadf753859b") (:url . "https://github.com/emacs-helm/helm-exwm") (:keywords "helm" "exwm"))]) (helm-ext . [(20171218 1543) ((emacs (24 4)) (helm (2 5 3))) "A few extensions to Helm" tar ((:commit . "bdc0d86d43d965dda5ac94ec9c3fdcaa1e71aab1") (:keywords "extensions"))]) (helm-etags-plus . [(20170113 614) ((helm (1 7 8))) "Another Etags helm.el interface" single ((:commit . "704f0991ee4a2298b01c33aafc224eef322e15e3") (:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "helm" "etags"))]) (helm-emms . [(20180104 2127) ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) "Emms for Helm." single ((:commit . "8133c1a854c8f9e32b3b4c74638fe197535c08f1") (:url . "https://github.com/emacs-helm/helm-emms"))]) (helm-emmet . [(20160713 531) ((helm (1 0)) (emmet-mode (1 0 2))) "helm sources for emmet-mode's snippets" single ((:commit . "f0364e736b10cf44232053a78de04133a88185ae") (:url . "https://github.com/yasuyk/helm-emmet") (:keywords "convenience" "helm" "emmet"))]) (helm-elscreen . [(20170709 214) ((helm (2 8 0)) (elscreen (0)) (cl-lib (0 5)) (emacs (24 1))) "Elscreen with helm interface" single ((:commit . "b8212866939dc4a1e1dc23ad572407b688e130e3") (:url . "https://github.com/emacs-helm/helm-elscreen") (:keywords "files" "convenience"))]) (helm-dirset . [(20151208 1612) ((f (0 16 2)) (helm (1 6 1)) (s (1 9 0)) (cl-lib (0 5))) "helm sources for multi directories" single ((:commit . "eb30810cd26e1ee73d84a863e6b2667700e9aead") (:url . "http://101000lab.org") (:keywords "files" "directories"))]) (helm-dired-recent-dirs . [(20131228 614) ((helm (1 0))) "Show recent dirs with helm.el support." single ((:commit . "3bcd125b44f5a707588ae3868777d91192351523") (:keywords "helm" "dired" "zsh"))]) (helm-dired-history . [(20170524 346) ((helm (1 9 8)) (cl-lib (0 5))) "Show dired history with helm.el support." single ((:commit . "281523f9fc46cf00fafd670ba5cd16552a607212") (:url . "https://github.com/jixiuf/helm-dired-history") (:keywords "helm" "dired history"))]) (helm-directory . [(20170705 2102) ((emacs (24 4)) (helm (2 0))) "selecting directory before select the file" single ((:commit . "29f05c87046f9a04329f817e9d7489a290a2592a") (:url . "https://github.com/masasam/emacs-helm-directory"))]) (helm-dictionary . [(20160817 1333) ((helm (1 5 5))) "Helm source for looking up dictionaries" single ((:commit . "805ce850d4cbe811227d9c9b16cc51f652198f3f") (:url . "https://github.com/emacs-helm/helm-dictionary"))]) (helm-describe-modes . [(20160211 2118) ((helm (1 9)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface to major and minor modes." single ((:commit . "11fb36af119b784539d31c6160002de1957408aa") (:url . "https://github.com/emacs-helm/helm-describe-modes") (:keywords "docs" "convenience"))]) (helm-descbinds . [(20160916 713) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" single ((:commit . "6d5ddc11e6cef86548bd6b3e0d840112d602659c") (:url . "https://github.com/emacs-helm/helm-descbinds") (:keywords "helm" "help"))]) (helm-dash . [(20171120 446) ((helm (1 9 2)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single ((:commit . "13dcc176556a7dd0970790e96dbbf9105dc395de") (:url . "http://github.com/areina/helm-dash") (:keywords "docs"))]) (helm-ctest . [(20171101 934) ((s (1 9 0)) (dash (2 11 0)) (helm-core (1 7 4))) "Run ctest from within emacs" single ((:commit . "6de962e355e12a69e4aeaf6484f497e28b2e8a68") (:keywords "helm" "ctest"))]) (helm-css-scss . [(20140626 1725) ((helm (1 0)) (emacs (24))) "CSS/SCSS/LESS Selectors with helm interface" single ((:commit . "ab8348aa98e0daa2f1b771e35bdb06bfacbe5016") (:url . "https://github.com/ShingoFukuyama/helm-css-scss") (:keywords "scss" "css" "less" "selector" "helm"))]) (helm-cscope . [(20170326 22) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single ((:commit . "3cc7259ab4989f9f7ca039e703cdac14b907530a") (:url . "https://github.com/alpha22jp/helm-cscope.el") (:keywords "cscope" "helm"))]) (helm-core . [(20180122 706) ((emacs (24 4)) (async (1 9 2))) "Development files for Helm" tar ((:commit . "bbaf2166353504531551cdce18dbe9d7ce5f7005") (:url . "https://emacs-helm.github.io/helm/"))]) (helm-company . [(20170608 1029) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single ((:commit . "ae4e1a05455f5eaf07e61b8627934ea1df4eb048") (:url . "https://github.com/Sodel-the-Vociferous/helm-company"))]) (helm-commandlinefu . [(20150610 2245) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single ((:commit . "9ee7e018c5db23ae9c8d1c8fa969876f15b7280d") (:url . "https://github.com/xuchunyang/helm-commandlinefu") (:keywords "commandlinefu.com"))]) (helm-codesearch . [(20171215 26) ((s (1 10 0)) (dash (2 12 0)) (helm (1 7 7)) (cl-lib (0 5))) "helm interface for codesearch" single ((:commit . "ccb99aee4851bc156a67835299b24099aa8ff5c1") (:keywords "tools"))]) (helm-cmd-t . [(20170125 659) nil "cmd-t style completion" tar ((:commit . "7fa3d4a9f7271512e54c5de999079b27c9eec6bf") (:url . "https://github.com/lewang/helm-cmd-t") (:keywords "helm" "project-management" "completion" "convenience" "cmd-t" "textmate"))]) (helm-clojuredocs . [(20160405 23) ((edn (1 1 2)) (helm (1 5 7))) "search for help in clojuredocs.org" single ((:commit . "5a7f0f2cb401be0b09e73262a1c18265ab9a3cea") (:url . "https://github.com/mbuczko/helm-clojuredocs") (:keywords "helm" "clojure"))]) (helm-circe . [(20160206 2252) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single ((:commit . "9091651d9fdd8d49d8ff6f9dcf3a2ae416c9f15a") (:url . "https://github.com/lesharris/helm-circe") (:keywords "helm" "circe"))]) (helm-cider-history . [(20150719 1420) ((helm (1 4 0)) (cider (0 9 0))) "Helm interface for cider history" single ((:commit . "c391fcb2e162a02001605a0b9449783575a831fd") (:url . "https://github.com/Kungi/helm-cider-history") (:keywords "convenience"))]) (helm-cider . [(20180120 1212) ((emacs (24 4)) (cider (0 12)) (helm-core (2 4))) "Helm interface to CIDER" tar ((:commit . "9a948b834dd31b3f60d4701d6dd0ecfab0adbb72") (:url . "https://github.com/clojure-emacs/helm-cider") (:keywords "tools" "convenience"))]) (helm-chronos . [(20150528 1336) ((chronos (1 2)) (helm (1 7 1))) "helm interface for chronos timers" tar ((:commit . "a14fc3d65dd96ce6616234b3f7b8b08b4c1817ef") (:url . "http://github.com/dxknight/helm-chronos") (:keywords "calendar"))]) (helm-chrome . [(20160718 2220) ((helm (1 5)) (cl-lib (0 3)) (emacs (24))) "Helm interface for Chrome bookmarks" single ((:commit . "fd630ace4b4b4f33355a973743bbfe0c90ce4830") (:url . "https://github.com/kawabata/helm-chrome") (:keywords "tools"))]) (helm-charinfo . [(20170810 531) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "A helm source for character information" single ((:commit . "91798a49dc115342a7e01e48b264e9a0bf5ea414") (:url . "https://github.com/cwittern/helm-charinfo") (:keywords "convenience"))]) (helm-c-yasnippet . [(20170128 742) ((helm (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single ((:commit . "65ca732b510bfc31636708aebcfe4d2d845b59b0") (:keywords "convenience" "emulation"))]) (helm-c-moccur . [(20151230 124) ((helm (20120811)) (color-moccur (2 71))) "helm source for color-moccur.el" single ((:commit . "b0a906f85fa352db091f88b91a9c510de607dfe9") (:keywords "convenience" "emulation"))]) (helm-bundle-show . [(20151221 430) ((helm (1 8 0))) "bundle show with helm interface" single ((:commit . "850fecb36f609f1dfd5d20ca0170c9a6b7f90ab9") (:url . "https://github.com/masutaka/emacs-helm-bundle-show"))]) (helm-books . [(20170324 2331) ((helm (1 7 7))) "Helm interface for searching books" single ((:commit . "625aadec1541a5ca36951e4ce1301f4b6fe2bf3f") (:url . "https://github.com/grugrut/helm-books"))]) (helm-bm . [(20160321 631) ((bm (1 0)) (cl-lib (0 5)) (helm (1 9 3)) (s (1 11 0))) "helm sources for bm.el" single ((:commit . "d66341f5646c23178d4d8bffb6cfebe3fb73f1d7") (:url . "https://github.com/yasuyk/helm-bm") (:keywords "helm" "bookmark"))]) (helm-bind-key . [(20141108 2115) ((bind-key (1 0)) (helm (1 6 4))) "helm-source for for bind-key." single ((:commit . "9da6ad8b7530e72fb4ac67be8c6a482898dddc25") (:keywords "convenience" "emulation"))]) (helm-bibtexkey . [(20140214 704) ((helm (1 5 8))) "Bibtexkey source for helm" tar ((:commit . "aa1637ea5c8c5f1817e480fc2a3750cafab3d99f") (:url . "https://github.com/kenbeese/helm-bibtexkey") (:keywords "bib" "tex"))]) (helm-bibtex . [(20180110 1209) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A bibliography manager based on Helm" tar ((:commit . "adf0e363ef1a1feaa1c83ef7f16a7d6c408b62ce"))]) (helm-bbdb . [(20170505 2338) ((helm (1 5)) (bbdb (3 1 2))) "Helm interface for bbdb" single ((:commit . "c0e6b83911598fe334c51b12f51ff1a8252ed11d") (:url . "https://github.com/emacs-helm/helm-bbdb"))]) (helm-backup . [(20171204 2357) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" single ((:commit . "a2c0fa16113e628500d6822c6605280b94e24038") (:url . "http://github.com/antham/helm-backup") (:keywords "backup" "convenience" "files" "tools" "vc"))]) (helm-aws . [(20171227 132) ((helm (1 5 3)) (cl-lib (0 5)) (s (1 9 0))) "Manage AWS EC2 server instances directly from Emacs" single ((:commit . "d69a0241601d170c034e3b69e8df0b1fec72bff7") (:url . "https://github.com/istib/helm-aws"))]) (helm-anything . [(20141126 231) ((helm (20130406)) (anything (20120101))) "Bridge between anything and helm" single ((:commit . "0ec578922928b7c75cf034d1b7a956b5f36107ea") (:url . "http://www.emacswiki.org/emacs/download/helm-anything.el") (:keywords "helm" "anything" "convenience" "search" "tools"))]) (helm-ag-r . [(20131123 731) ((helm (1 0))) "Search something by ag and display by helm" single ((:commit . "67de4ebafe9b088db950eefa5ef590a6d78b4ac8") (:url . "https://github.com/yuutayamada/helm-ag-r") (:keywords "searching"))]) (helm-ag . [(20170209 745) ((emacs (24 4)) (helm (2 0))) "the silver searcher with helm interface" single ((:commit . "2fc02c4ead29bf0db06fd70740cc7c364cb650ac") (:url . "https://github.com/syohex/emacs-helm-ag"))]) (helm-addressbook . [(20170903 28) ((helm (2 8 2)) (addressbook-bookmark (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm for addressbook bookmarks." single ((:commit . "62497f72d46afd3a9f9f94b27d062a82fb232de4") (:url . "https://github.com/emacs-helm/helm-addressbook"))]) (helm-ad . [(20151209 215) ((dash (2 8 0)) (helm (1 6 2))) "helm source for Active Directory" single ((:commit . "8ac044705d8620ee354a9cfa8cc1b865e83c0d55") (:keywords "comm"))]) (helm-ack . [(20141030 526) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:commit . "889bc225318d14c6e3be80e73b1d9d6fb30e48c3") (:url . "https://github.com/syohex/emacs-helm-ack"))]) (helm-R . [(20120819 1714) ((helm (20120517)) (ess (20120509))) "helm-sources and some utilities for GNU R." single ((:commit . "b0eb9d5f6a483a9dbe6eb6cf1f2024d4f5938bc2") (:url . "https://github.com/myuhe/helm-R.el") (:keywords "convenience"))]) (helm . [(20180119 1053) ((emacs (24 4)) (async (1 9 2)) (popup (0 5 3)) (helm-core (2 8 7))) "Helm is an Emacs incremental and narrowing framework" tar ((:commit . "bbaf2166353504531551cdce18dbe9d7ce5f7005") (:url . "https://emacs-helm.github.io/helm/"))]) (headlong . [(20150417 826) nil "reckless completion" single ((:commit . "f6830f87f236eee88263cb6976125f72422abe72") (:url . "https://github.com/abo-abo/headlong") (:keywords "completion"))]) (hcl-mode . [(20170107 27) ((emacs (24 3))) "Major mode for Hashicorp" single ((:commit . "0f2c5ec7e7bcf77c8548e8cac8721ea935ca1b5e") (:url . "https://github.com/syohex/emacs-hcl-mode"))]) (hc-zenburn-theme . [(20150928 933) nil "An higher contrast version of the Zenburn theme." single ((:commit . "fd0024a5191cdce204d91c8f1db99ba31640f6e9") (:url . "https:github.com/edran/hc-zenburn-emacs"))]) (hayoo . [(20140831 521) ((emacs (24)) (json (1 3))) "Query hayoo and show results in a tabulated buffer." single ((:commit . "3ca2fb0c4d5f337d0410c21b2702dd147014e984") (:url . "https://github.com/benma/hayoo.el/") (:keywords "hayoo" "haskell"))]) (haxor-mode . [(20160618 429) ((emacs (24 0))) "Major mode for editing Haxor Assembly Files" single ((:commit . "6fa25a8e6b6a59481bc0354c2fe1e0ed53cbdc91") (:url . "https://github.com/krzysztof-magosa/haxor-mode") (:keywords "haxor"))]) (haxe-mode . [(20131004 142) nil "An Emacs major mode for Haxe" single ((:url . "http://people.debian.org/~jps/misc/haxe-mode.el"))]) (haxe-imports . [(20170330 1604) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 1))) "Code for dealing with Haxe imports" single ((:commit . "f104a641f3dfe698359d9aca1f28d9383cf43e04") (:url . "http://www.github.com/accidentalrebel/emacs-haxe-imports") (:keywords "haxe"))]) (haste . [(20141030 1334) ((json (1 2))) "Emacs client for hastebin (http://hastebin.com/about.md)" single ((:commit . "22d05aacc3296ab50a7361222ab139fb4d447c25") (:url . "http://github.com/rlister/emacs-haste-client"))]) (hasky-stack . [(20171231 942) ((emacs (24 4)) (f (0 18 0)) (magit-popup (2 10))) "Interface to the Stack Haskell development tool" single ((:commit . "7a97d039489ff23b3362b543dea1007357e2ada9") (:url . "https://github.com/hasky-mode/hasky-stack") (:keywords "tools" "haskell"))]) (hasky-extensions . [(20180107 2112) ((emacs (24 4)) (avy-menu (0 2))) "Toggle Haskell language extensions" single ((:commit . "d75dc57f4eaeb92785bde6c26c1031710be1cf00") (:url . "https://github.com/hasky-mode/hasky-extensions") (:keywords "programming"))]) (haskell-tab-indent . [(20170701 258) nil "tab-based indentation for haskell-mode" single ((:commit . "b4cb851aef96c42ec7b3cc37b6fdd867fe5a0853") (:url . "https://spwhitton.name/tech/code/haskell-tab-indent/") (:keywords "indentation" "haskell"))]) (haskell-snippets . [(20160918 1722) ((cl-lib (0 5)) (yasnippet (0 8 0))) "Yasnippets for Haskell" tar ((:commit . "07b0f460b946fd1be26c29652cb0468b47782f3a") (:url . "https://github.com/haskell/haskell-snippets") (:keywords "snippets" "haskell"))]) (haskell-mode . [(20171022 26) ((emacs (24 3))) "A Haskell editing mode" tar ((:commit . "9018ad5cac0b1b1b5e0a51586027fb0ca4076b1a") (:keywords "haskell" "cabal" "ghc" "repl") (:url . "https://github.com/haskell/haskell-mode"))]) (haskell-emacs-text . [(20150713 716) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:url . "https://github.com/knupfer/haskell-emacs/modules/text") (:keywords "haskell" "emacs" "ffi"))]) (haskell-emacs-base . [(20150714 859) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:url . "https://github.com/knupfer/haskell-emacs/modules/base") (:keywords "haskell" "emacs" "ffi"))]) (haskell-emacs . [(20160904 1326) nil "Write emacs extensions in haskell" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:url . "https://github.com/knupfer/haskell-emacs") (:keywords "haskell" "emacs" "ffi"))]) (harvest . [(20170822 1046) ((swiper (0 7 0)) (hydra (0 13 0)) (s (1 11 0))) "Harvest integration" single ((:commit . "7acbc0564b250521b67131ee2a0a92720239454f") (:url . "https://github.com/kostajh/harvest.el") (:keywords "harvest"))]) (hardhat . [(20160414 713) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single ((:commit . "9038a49ab55cd4c502cf7f07ed0d1b9b6bc3626e") (:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience"))]) (hardcore-mode . [(20151113 2301) nil "Disable arrow keys + optionally backspace and return" single ((:commit . "b1dda19692b4a7a58a689e81784a9b35be39e70d"))]) (handoff . [(20150916 2300) nil "Get your hand off that mouse, damn it!" single ((:commit . "75dc7a7e352f38679f65d0ca80ad158798e168bd") (:url . "http://github.com/rejeep/handoff.el"))]) (handlebars-sgml-mode . [(20130623 1633) nil "Add Handlebars contextual indenting support to sgml-mode" single ((:commit . "c76df93a9a8c1b1b3efdcc4add32bf93304192a4") (:url . "http://github.com/jacott/handlebars-sgml-mode"))]) (handlebars-mode . [(20150211 949) nil "A major mode for editing Handlebars files." single ((:commit . "81f6b73fea8f397807781a1b51568397af21a6ef"))]) (hamlet-mode . [(20131207 2324) ((cl-lib (0 3)) (dash (2 3 0)) (s (1 7 0))) "Hamlet editing mode" single ((:commit . "7362b955e556a3d007fa06945a27e5b99349527d") (:url . "https://github.com/lightquake/hamlet-mode") (:keywords "wp" "languages" "comm"))]) (haml-mode . [(20170923 2153) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing Haml files" single ((:commit . "1cbb2de8f0fc25f35448c5cad04642f28078f3bb") (:url . "https://github.com/nex3/haml-mode") (:keywords "markup" "languages" "html"))]) (hamburger-menu . [(20160825 1331) ((emacs (24 5))) "Mode line hamburger menu" single ((:commit . "3568159c693c30bed7f61580e4f3b6241253ad4e") (:url . "https://gitlab.com/iain/hamburger-menu-mode") (:keywords "hamburger" "menu"))]) (hamburg-theme . [(20160122 2340) ((emacs (24))) "Color Theme with a dark blue background." single ((:commit . "aacefdf1501d97a5afc0e63c8ead4b2463323028"))]) (ham-mode . [(20150811 606) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single ((:commit . "3a141986a21c2aa6eefb428983352abb8b7907d2") (:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp"))]) (hal-mode . [(20160704 1046) nil "Major mode for editing HAL files" single ((:commit . "cd2f66f219ee520198d4586fb6b169cef7ad3f21") (:url . "https://github.com/strahlex/hal-mode/") (:keywords "language"))]) (hackernews . [(20180117 1302) ((json (1 2))) "Access the Hacker News aggregator from Emacs" tar ((:commit . "fe0c7284f17f00cc6f1971a9bd565467faa0574e"))]) (hacker-typer . [(20170206 720) ((emacs (24))) "Pretend to write code like a pro" tar ((:commit . "d5a23714a4ccc5071580622f278597d5973f40bd") (:url . "http://github.com/therockmandolinist/emacs-hacker-typer") (:keywords "hacker" "typer" "multimedia" "games"))]) (hack-time-mode . [(20170527 910) ((emacs (24 4))) "Forge time" single ((:commit . "73d6fcf8b39283526e5d4e3919193611e25a0898") (:url . "https://gitlab.com/marcowahl/hack-time-mode") (:keywords "time" "convenience"))]) (habitica . [(20171022 1922) ((org (8 3 5)) (emacs (24 3))) "Interface for habitica.com" single ((:commit . "e51ff7436fe1da10404e2c0872b15d6a7a926717") (:url . "https://github.com/abrochard/emacs-habitica") (:keywords "habitica" "todo"))]) (gxref . [(20170411 1053) ((emacs (25))) "xref backend using GNU Global." single ((:commit . "380b02c3c3c2586c828456716eef6a6392bb043b") (:url . "https://github.com/dedi/gxref") (:keywords "xref" "global" "tools"))]) (gvpr-mode . [(20131208 918) nil "A major mode offering basic syntax coloring for gvpr scripts." single ((:commit . "3d6cc6f4416faf2a1913821d12ba6eb624362af0") (:url . "https://raw.github.com/rodw/gvpr-lib/master/extra/gvpr-mode.el") (:keywords "graphviz" "gv" "dot" "gvpr" "graph"))]) (guru-mode . [(20170730 31) nil "Become an Emacs guru" single ((:commit . "c180e05ebc1484764aad245c85b69de779826e4e") (:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience"))]) (gulp-task-runner . [(20170718 1341) nil "Gulp task runner" single ((:commit . "877990e956b1d71e2d9c7c3e5a129ad199b9debb") (:keywords "convenience" "javascript"))]) (guix . [(20180107 1303) ((emacs (24 3)) (dash (2 11 0)) (geiser (0 8)) (bui (1 1 0)) (magit-popup (2 1 0))) "Interface for GNU Guix" tar ((:commit . "b4d897f7daafb5794809760340548b96b0a89ac3") (:url . "https://alezost.github.io/guix.el/") (:keywords "tools"))]) (guide-key-tip . [(20161011 123) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single ((:commit . "02c5d4b0b65f3e91be5a47f0ff1ae5e86e00c64e") (:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip"))]) (guide-key . [(20150107 2235) ((dash (2 10 0)) (popwin (0 3 0)) (s (1 9 0))) "Guide the following key bindings automatically and dynamically" single ((:commit . "9236d287a7272e307fb941237390a96037c8c0a2") (:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience"))]) (guess-language . [(20170620 308) ((cl-lib (0 5)) (emacs (24))) "Robust automatic language detection" tar ((:commit . "1f1602f74d7159e7fb8c90f92ec5a3d1df5429da") (:url . "https://github.com/tmalsburg/guess-language.el"))]) (gtk-pomodoro-indicator . [(20171230 840) nil "A pomodoro indicator for the GTK tray" tar ((:commit . "eb59b229de0dde307b20654075a9bbac69899a66") (:url . "https://github.com/abo-abo/gtk-pomodoro-indicator") (:keywords "convenience" "pomodoro"))]) (gscholar-bibtex . [(20170913 1457) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single ((:commit . "ba4ce159e385d695d8560e8b06b3cbe48424861c") (:keywords "extensions"))]) (gs-mode . [(20151202 206) nil "Major mode for editing GrADS script files" single ((:commit . "1a13051db21b999c7682a015b33a03096ff9d891") (:keywords "grads" "script" "major-mode"))]) (gruvbox-theme . [(20171118 1312) ((autothemer (0 2))) "A retro-groove colour theme for Emacs" tar ((:commit . "fb4f0a2dd3d146678fee3bf4d7bfce1c8e7cbd00") (:url . "http://github.com/Greduan/emacs-theme-gruvbox"))]) (grunt . [(20160316 828) ((dash (2 9 0)) (ansi-color (3 4 2)) (emacs (24 3))) "Some glue to stick Emacs and Gruntfiles together" single ((:commit . "4c269e2738658643ec2ed9ef61a2a3d71b08d304") (:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt"))]) (gruber-darker-theme . [(20170719 2229) nil "Gruber Darker color theme for Emacs 24." single ((:commit . "8e6bb26ce0abe20e6129ae8c8ad5c41e0832334e") (:url . "http://github.com/rexim/gruber-darker-theme"))]) (groovy-mode . [(20180109 718) ((s (1 12 0)) (emacs (24 3))) "Major mode for Groovy source files" tar ((:commit . "186aae7d8b69f2679876c4606c1df3dd0e07403c") (:keywords "languages"))]) (groovy-imports . [(20161003 151) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Groovy imports" single ((:commit . "e56d7dda617555ec6205644d32ffddf2e1fa43d9") (:url . "http://www.github.com/mbezjak/emacs-groovy-imports") (:keywords "groovy"))]) (grizzl . [(20160818 37) ((cl-lib (0 5)) (emacs (24 3))) "Fast fuzzy search index for Emacs." single ((:commit . "d554d93afa8519ee3a41340ec8aa6b4555065446") (:url . "https://github.com/grizzl/grizzl") (:keywords "convenience" "usability"))]) (grin . [(20110805 2358) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find"))]) (greymatters-theme . [(20150621 423) ((emacs (24))) "Emacs 24 theme with a light background." single ((:commit . "a7220a8c6cf18ccae2b76946b6f01188a7c9d5d1"))]) (grep-a-lot . [(20131006 647) nil "manages multiple search results buffers for grep.el" single ((:commit . "9f9f645b9e308a0d887b66864ff97d0fca1ba4ad") (:url . "https://github.com/ZungBang/emacs-grep-a-lot") (:keywords "tools" "convenience" "search"))]) (green-screen-theme . [(20171130 234) nil "A nice color theme for those who miss green CRTs" single ((:commit . "c348ea0adf0e6ae99294a05be183a7b425a4bab0") (:url . "https://github.com/rbanffy/green-screen-emacs") (:keywords "faces" "theme"))]) (green-phosphor-theme . [(20150515 747) nil "A light color theme with muted, autumnal colors." single ((:commit . "fa42f598626adfdc5450e5c380fa2d5df6110f28") (:url . "http://github.com/aalpern/emacs-color-theme-green-phosphor") (:keywords "color" "theme"))]) (green-is-the-new-black-theme . [(20171005 1641) nil "A cool and minimalist green blackened theme" single ((:commit . "b9cdecd04691311c30c94ad4ec81124e63b9b122") (:url . "https://github.com/fredcamps/green-is-the-new-black-emacs") (:keywords "faces" "themes"))]) (grayscale-theme . [(20171005 102) nil "A simple grayscale theme" single ((:commit . "53ad50e10e68f2f076ebfc96e10ecef7a932d38d") (:url . "https://github.com/belak/emacs-grayscale-theme") (:keywords "lisp"))]) (grass-mode . [(20170503 800) ((cl-lib (0 2)) (dash (2 8 0))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(20131001 834) nil "HTTP request lib with flexible callback dispatch" single ((:commit . "fbd0f9a51139973d35e4014855964fa435e8ecaf") (:url . "http://www.github.com/leathekd/grapnel"))]) (graphviz-dot-mode . [(20171103 127) nil "Mode for the dot-language used by graphviz (att)." single ((:commit . "c456a2b65c734089e6c44e87209a5a432a741b1a") (:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att"))]) (graphql-mode . [(20171102 1606) ((emacs (24 3)) (request (20170131 1747))) "Major mode for editing GraphQL schemas" single ((:commit . "1f3bd34b18a41dbda75a0baee38aa0f0f1fffb7a") (:keywords "languages"))]) (graphene-meta-theme . [(20161204 807) nil "Integrated theming for common packages" single ((:commit . "62cc73fee31f1bd9474027b83a249feee050271e") (:url . "https://github.com/rdallasgray/graphene") (:keywords "defaults"))]) (graphene . [(20171125 854) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-completing-read+ (4 3)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 8 0)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar ((:commit . "9dbd50e532ca45076e03db0f96a57d21528fc460"))]) (grandshell-theme . [(20171230 440) nil "Dark color theme for Emacs > 24 with intensive colors." tar ((:commit . "c8f1dd4ceb3b752bcb4a0122af45e3a197c4fa99"))]) (grails-projectile-mode . [(20160327 624) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar ((:commit . "8efca50ce92b556fe9d467b157d7aec635bcc017") (:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile"))]) (grails-mode . [(20160504 211) nil "minor-mode that adds some Grails project management to a grails project" single ((:commit . "186aae7d8b69f2679876c4606c1df3dd0e07403c") (:url . "http://blog.wolfman.com") (:keywords "languages"))]) (grails . [(20160416 2336) ((emacs (24))) "Minor mode for Grails projects" single ((:commit . "fa638abe5c37f3f8af4fcd32f212453185ce50b1") (:url . "https://github.com/lifeisfoo/emacs-grails"))]) (gradle-mode . [(20150313 1205) ((s (1 8 0))) "Gradle integration with Emacs' compile" single ((:commit . "e4d665d5784ecda7ddfba015f07c69be3cfc45f2") (:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle"))]) (grab-x-link . [(20161130 2147) ((emacs (24)) (cl-lib (0 5))) "Grab links from X11 apps and insert into Emacs" single ((:commit . "d2ef886097f59e1facc5cb5d8cd1c77bf340be76") (:url . "https://github.com/xuchunyang/grab-x-link") (:keywords "hyperlink"))]) (grab-mac-link . [(20180116 251) ((emacs (24))) "Grab link from Mac Apps and insert it into Emacs" single ((:commit . "19369badf8b0621eb03ea9e3adeecb22b9710c23") (:url . "https://github.com/xuchunyang/grab-mac-link.el") (:keywords "mac" "hyperlink"))]) (govet . [(20170808 1024) nil "linter/problem finder for the Go source code" single ((:commit . "1c05817cf8b96589076c7ac4e52ee58a860a0cbf") (:url . "https://godoc.org/golang.org/x/tools/cmd/vet"))]) (govc . [(20171108 1429) ((emacs (24 3)) (dash (1 5 0)) (s (1 9 0)) (magit-popup (2 0 50)) (json-mode (1 6 0))) "Interface to govc for managing VMware ESXi and vCenter" single ((:commit . "fabb1211ec7c7fdcf70d74f26b58abd3c2c3faea") (:url . "https://github.com/vmware/govmomi/tree/master/govc/emacs") (:keywords "convenience"))]) (goto-last-change . [(20150109 1023) nil "Move point through buffer-undo-list positions" single ((:commit . "58b0928bc255b47aad318cd183a5dce8f62199cc") (:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience"))]) (goto-gem . [(20140729 1145) ((s (1 9 0))) "Open dired in gem directory" single ((:commit . "e3206f11f48bb7e798514a4ca2c2f60649613e5e") (:keywords "gemfile" "convenience"))]) (goto-chg . [(20180105 1033) nil "goto last change" single ((:commit . "e5b38e4e1378f6ea48fa9e8439f49c2998654aa4") (:url . "https://github.com/emacs-evil/goto-chg") (:keywords "convenience" "matching"))]) (gotham-theme . [(20171013 1216) nil "A very dark Emacs color theme." single ((:commit . "5e97554d1f9639698faedb0660e63694be33bd84") (:url . "https://github.com/wasamasa/gotham-theme"))]) (gotest . [(20170823 141) ((emacs (24 3)) (s (1 11 0)) (f (0 19 0)) (go-mode (1 5 0))) "Launch GO unit tests" single ((:commit . "8a5ef7363f83edb3b77c5e23876f13dd8c23b2b9") (:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests"))]) (gorepl-mode . [(20170905 245) ((emacs (24)) (s (1 11 0)) (f (0 19 0)) (hydra (0 13 0))) "Go REPL Interactive Development in top of Gore" single ((:commit . "bbd27f6a0a77f484e2a3f082d70dc69da63ae52a") (:url . "http://www.github.com/manute/gorepl-mode") (:keywords "languages" "go" "golang" "gorepl"))]) (gore-mode . [(20151123 1127) ((go-mode (1 0 0))) "Simple mode for gore, a command-line evaluator for golang." single ((:commit . "94d7f3e99104e06167967c98fdc201049c433c2d") (:keywords "go" "repl"))]) (goose-theme . [(20160828 545) ((emacs (24 1))) "A gray color theme" single ((:commit . "acd017b50ab25a75fd1331eb3de66467e2042e9c") (:url . "https://github.com/thwg/goose-theme"))]) (google-translate . [(20170713 119) nil "Emacs interface to Google Translate." tar ((:commit . "d8b84a8359fcc697114d1298840e9a45b111c974"))]) (google-this . [(20170810 515) ((emacs (24 1))) "A set of functions and bindings to google under point." single ((:commit . "8a2e3ca5da6a8c89bfe99a21486c6c7db125dc84") (:url . "http://github.com/Malabarba/emacs-google-this") (:keywords "convenience" "hypermedia"))]) (google-maps . [(20171002 734) ((emacs (24 3))) "Access Google Maps from Emacs" tar ((:commit . "c0e5dccfdc9f7f77ff8f29177547be47833d7156") (:url . "https://julien.danjou.info/projects/emacs-packages#google-maps") (:keywords "comm"))]) (google-contacts . [(20171027 1033) ((oauth2 (0 10)) (cl-lib (0 5))) "Support for Google Contacts in Emacs" tar ((:commit . "a40389bae006ae094aeb1a39fae9891ca687c0fa") (:url . "http://julien.danjou.info/projects/emacs-packages#google-contacts") (:keywords "comm"))]) (google-c-style . [(20140929 1118) nil "Google's C/C++ style for c-mode" single ((:commit . "9663cabfeeea8f1307b1acde59471f74953b8fa9") (:keywords "c" "tools"))]) (google . [(20140416 1048) nil "Emacs interface to the Google API" single ((:commit . "3b3189a8b201c8d36fed6e61496274e530dd40bd") (:keywords "comm" "processes" "tools"))]) (gom-mode . [(20131007 1953) nil "Major mode for Gomfile" single ((:commit . "972e33df1d38ff323bc97de87477305826013701") (:url . "https://github.com/syohex/emacs-gom-mode"))]) (golint . [(20150414 1730) nil "lint for the Go source code" single ((:commit . "e14d9b0f1d332b1420c1ffa32562ad2dc84d645d") (:url . "https://github.com/golang/lint"))]) (goldendict . [(20180121 120) ((emacs (24 4)) (cl-lib (0 5))) "query word smartly with goldendict.el" single ((:commit . "1aac19daaec811deb9afe45eea4929309c09ac8b") (:url . "https://github.com/stardiviner/goldendict.el") (:keywords "dict" "goldendict"))]) (golden-ratio-scroll-screen . [(20170223 1829) nil "Scroll half screen down or up, and highlight current line" single ((:commit . "44e947194d3e5cbe0fd2f3c4886a4e6e1a0c0791") (:url . "https://github.com/jixiuf/golden-ratio-scroll-screen") (:keywords "scroll" "screen" "highlight"))]) (golden-ratio . [(20150819 420) nil "Automatic resizing of Emacs windows to the golden ratio" single ((:commit . "72b028808b41d23fa3f7e8c0d23d2c475e7b46ae") (:keywords "window" "resizing"))]) (gold-mode . [(20140606 1906) ((sws-mode (0))) "Major mode for editing .gold files" single ((:commit . "6d3aa59602b1b835495271c8c9741ac344c2eab1") (:url . "https://github.com/yuutayamada/gold-mode-el") (:keywords "golang" "template" "gold"))]) (godoctor . [(20161205 143) nil "Frontend for godoctor" single ((:commit . "f892a4dbabe61186540d6035c5185fd929a6a543") (:url . "https://github.com/microamp/godoctor.el") (:keywords "go" "golang" "refactoring"))]) (god-mode . [(20180117 334) nil "God-like command entering minor mode" tar ((:commit . "344167ed9b4c212273dd056e7481cf1373b461d0") (:url . "https://github.com/chrisdone/god-mode"))]) (gobgen . [(20161020 823) ((emacs (24 4))) "Generate GObject descendants using a detailed form" single ((:commit . "ed2c2b0d217deae293096f3cf14aa492791ddd4f") (:keywords "gobject" "glib" "gtk" "helper" "utilities"))]) (go-tag . [(20180116 2332) ((emacs (24 0)) (go-mode (1 5 0))) "Edit Golang struct field tag" single ((:commit . "3e334d9ef3c85fd09b05973734584f401ea18c21") (:url . "https://github.com/brantou/emacs-go-tag") (:keywords "tools"))]) (go-stacktracer . [(20150430 1442) nil "parse Go stack traces" single ((:commit . "a2ac6d801b389f80ca4e2fcc1ab44513a9e55976") (:url . "https://github.com/samertm/go-stacktracer.el") (:keywords "tools"))]) (go-snippets . [(20180112 2211) ((yasnippet (0 8 0))) "Yasnippets for go" tar ((:commit . "d437df148879566ffe7f2e503a3cf2602aa9fb28"))]) (go-scratch . [(20150809 2140) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single ((:commit . "3f68cbcce04f59eb8e83af109164731ec0454be0") (:keywords "languages" "go"))]) (go-rename . [(20161117 331) ((go-mode (1 3 1))) "Integration of the 'gorename' tool into Emacs." single ((:commit . "7eb5b3dd0ac31d176e9d56da4172f66aef8fae47") (:keywords "tools"))]) (go-projectile . [(20170302 1705) ((projectile (0 10 0)) (go-mode (0)) (go-eldoc (0 16)) (go-rename (0)) (go-guru (0))) "Go add-ons for Projectile" single ((:commit . "4c449eae696d4e3a15078c336c98ea779da227ab") (:url . "https://github.com/dougm/go-projectile") (:keywords "project" "convenience"))]) (go-playground-cli . [(20160503 214) ((emacs (24)) (request (0 2 0)) (deferred (0 3 2)) (names (20151201 404)) (s (1 10 0)) (f (0 17 2)) (let-alist (1 0 4)) (cl-lib (0 5))) "Go Playground client tool" single ((:commit . "60beebd98e3930641d41cee0189c579626f223bc") (:url . "https://github.com/kosh04/go-playground-cli"))]) (go-playground . [(20170226 43) ((emacs (24)) (go-mode (1 4 0)) (gotest (0 13 0))) "Local Golang playground for short snippets." single ((:commit . "559d53bbc507394aaca3683325d17286637bf4f0") (:url . "https://github.com/grafov/go-playground") (:keywords "tools" "golang"))]) (go-mode . [(20170726 555) nil "Major mode for the Go programming language" single ((:commit . "7eb5b3dd0ac31d176e9d56da4172f66aef8fae47") (:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go"))]) (go-imports . [(20180107 1423) nil "Insert go import statement given package name" tar ((:commit . "5b3a1d520c599553f621efaf9aec71609d2b9bb6") (:url . "https://github.com/yasushi-saito/go-imports") (:keywords "tools" "go" "import"))]) (go-impl . [(20170125 752) ((emacs (24 3)) (go-mode (1 3 0))) "impl integration for go-mode" single ((:commit . "69f0d0ef05771487e15abec500cd06befd171abf") (:url . "https://github.com/syohex/emacs-go-impl"))]) (go-guru . [(20170718 1046) ((go-mode (1 3 1)) (cl-lib (0 5))) "Integration of the Go 'guru' analysis tool into Emacs." single ((:commit . "7eb5b3dd0ac31d176e9d56da4172f66aef8fae47") (:keywords "tools"))]) (go-gopath . [(20160705 334) ((cl-lib (0 5))) "Will guess GOPATH using gb and projectile." single ((:commit . "5172fc53f21edbf9347d5ee7d1d745da1ec88a15") (:url . "http://github.com/iced/go-gopath/"))]) (go-gen-test . [(20171022 2058) ((emacs (24 3)) (s (1 12))) "Generate tests for go code with gotests" single ((:commit . "44c202ac97e728e93a35cee028a0ea8dd6e4292c") (:url . "https://github.com/s-kostyaev/go-gen-test") (:keywords "languages"))]) (go-fill-struct . [(20171224 1931) ((emacs (24))) "Fill struct for golang." single ((:commit . "a613d0b378473eef39e8fd5724abe790aea84321") (:url . "https://github.com/s-kostyaev/go-fill-struct") (:keywords "tools"))]) (go-errcheck . [(20160722 1743) nil "errcheck integration for go-mode" single ((:commit . "9db21eccecedc2490793f176246094167164af31"))]) (go-eldoc . [(20170305 627) ((emacs (24 3)) (go-mode (1 0 0))) "eldoc for go-mode" single ((:commit . "cbbd2ea1e94a36004432a9ac61414cb5a95a39bd") (:url . "https://github.com/syohex/emacs-go-eldoc"))]) (go-dlv . [(20160517 1346) ((go-mode (1 3 1))) "Go Delve - Debug Go programs interactively with the GUD." single ((:commit . "45a9e8a047c9995eb7c802268d96b3e527569f41") (:url . "https://github.com/benma/go-dlv.el/") (:keywords "go" "debug" "debugger" "delve" "interactive" "gud"))]) (go-direx . [(20150315 1843) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single ((:commit . "8f2206469328ee932c7f1892f5e1fb02dec98432") (:url . "https://github.com/syohex/emacs-go-direx"))]) (go-complete . [(20151015 228) ((go-mode (0)) (cl-lib (0 5))) "Native code completion for Go" single ((:commit . "e39efc356f6e19f17db3f3d2c81f28d38b31a55e") (:url . "https://github.com/vibhavp/go-complete") (:keywords "go" "golang" "completion"))]) (go-autocomplete . [(20170626 323) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single ((:commit . "416643789f088aa5077f667cecde7f966131f6be") (:keywords "languages"))]) (go-add-tags . [(20161123 427) ((emacs (24 3)) (s (1 11 0))) "Add field tags for struct fields" single ((:commit . "54879945e46a0884c5f93d7fd6c866a9cdf401ac") (:url . "https://github.com/syohex/emacs-go-add-tags"))]) (go . [(20161110 1849) ((emacs (24))) "Play GO, translate and transfer between GO back ends" tar ((:commit . "ff45fb44d9cb6579d8511d8b6156ed0b34d5ac97") (:url . "http://eschulte.github.io/el-go/") (:keywords "game" "go" "sgf"))]) (gnus-x-gm-raw . [(20140610 31) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single ((:commit . "978bdfcecc8844465b71641c2e909fcdc66b22be") (:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus"))]) (gnus-summary-ext . [(20180113 516) nil "Extra limit and process mark commands for the gnus summary buffer" single ((:commit . "025fd853fe9280ae696a89ec2c2cac9befd010aa") (:url . "https://github.com/vapniks/gnus-summary-ext") (:keywords "comm"))]) (gnus-select-account . [(20170721 2211) nil "Select an account before writing a mail in gnus" single ((:commit . "ddc8c135eeaf90f5b6692a033af2badae36e68ce") (:url . "https://github.com/tumashu/gnus-select-account") (:keywords "convenience"))]) (gnus-desktop-notify . [(20171007 1235) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single ((:commit . "52e5de0961ce0f6890d5e7f26bc05152b99d9979") (:url . "http://www.thregr.org/~wavexx/software/gnus-desktop-notify.el/"))]) (gnus-alias . [(20150315 1742) nil "an alternative to gnus-posting-styles" single ((:commit . "9447d3ccb4c0e75d0468899cccff7aa249657bac") (:keywords "personality" "identity" "news" "mail" "gnus"))]) (gnuplot-mode . [(20171013 916) nil "Major mode for editing gnuplot scripts" single ((:commit . "601f6392986f0cba332c87678d31ae0d0a496ce7") (:url . "https://github.com/mkmcc/gnuplot-mode") (:keywords "gnuplot" "plotting"))]) (gnuplot . [(20141231 1337) nil "drive gnuplot from within emacs" tar ((:commit . "21f9046e3f5caad41b750b5c9cee02fa4fd20fb9") (:keywords "gnuplot" "plotting"))]) (gnu-apl-mode . [(20180118 838) ((emacs (24))) "Integrate GNU APL with Emacs" tar ((:commit . "68fac681312faad1258798c7c9c306b44f084094") (:keywords "languages" "apl") (:url . "https://github.com/lokedhs/gnu-apl-mode"))]) (gntp . [(20141024 1950) nil "Growl Notification Protocol for Emacs" single ((:commit . "767571135e2c0985944017dc59b0be79af222ef5"))]) (gnomenm . [(20150316 1218) ((s (1 9 0)) (dash (2 3 0)) (kv (0 0 19))) "Emacs interface to Gnome nmcli command" single ((:commit . "9065cda44ffc9e06239b8189a0154d31314c3b4d") (:url . "http://github.com/nicferrier/emacs-nm") (:keywords "processes" "hardware"))]) (gnome-calendar . [(20161110 456) nil "Integration with the GNOME Shell calendar" single ((:commit . "489f9f15f7bb35696b1cc19db75b554ae8328df2") (:keywords "gnome" "calendar"))]) (gmpl-mode . [(20171031 1354) ((emacs (24))) "Major mode for editing GMPL(MathProg) files" single ((:commit . "c5d362169819ee8b8e8954145daee7e260c54921") (:keywords "extensions"))]) (gmail2bbdb . [(20170423 444) nil "import email and name into bbdb from vcard." single ((:commit . "a84fa385cfaec7fc5f1518c368e52722da139f99") (:url . "http://github.com/redguardtoo/gmail2bbdb") (:keywords "vcard" "bbdb" "email" "contact" "gmail"))]) (gmail-message-mode . [(20160627 1147) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ((:commit . "ec36672a9dc93c09ebe2f77597b498d11883d008") (:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation"))]) (glsl-mode . [(20170927 736) nil "major mode for Open GLSL shader files" single ((:commit . "384968506cf25c5c2df61b32fdfdbd041e3bf651") (:url . "http://artis.inrialpes.fr/~Xavier.Decoret/resources/glsl-mode/") (:keywords "languages"))]) (glab . [(20170924 359) ((emacs (25))) "minuscule client for the Gitlab API" single ((:commit . "9848182275e0448390ccdd8dcd8e1e3a1853950c") (:url . "https://gitlab.com/tarsius/glab") (:keywords "tools"))]) (gl-conf-mode . [(20170714 610) ((emacs (24 3))) "Mode for editing gitolite config files" single ((:commit . "9136a9b737e0a5b6471a91571d104c487c43f35b") (:url . "https://github.com/llloret/gitolite-emacs") (:keywords "git" "gitolite" "languages"))]) (gitter . [(20180122 56) ((emacs (24 4)) (let-alist (1 0 4))) "An Emacs Gitter client" single ((:commit . "11cb9b4b45f67bdc24f055a9bfac21d2bd19ea1a") (:url . "https://github.com/xuchunyang/gitter.el") (:keywords "gitter" "chat" "client" "internet"))]) (gitpatch . [(20170721 2110) ((emacs (24 3))) "Git-format patch toolkit" single ((:commit . "577d5adf65c8133caa325c10e89e1e2fc323c907") (:url . "https://github.com/tumashu/gitpatch") (:keywords "convenience"))]) (gitolite-clone . [(20160609 1655) ((dash (2 10 0)) (s (1 9 0)) (pcache (0 3 1)) (emacs (24))) "Clone gitolite repositories from a completing list" single ((:commit . "d8a4c2875c984e51137c980b5773f42703602721") (:url . "https://github.com/IvanMalison/gitolite-clone") (:keywords "gitolite" "clone" "git"))]) (gitlab . [(20170710 724) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar ((:commit . "67567a354a1888419331b79862f151817d9747c5") (:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab"))]) (gitignore-mode . [(20160319 302) nil "Major mode for editing .gitignore files" single ((:commit . "9f18eca514d242816a4969e86c4cfd2cf4dfe401") (:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (github-theme . [(20170630 1501) nil "The GitHub color theme for Emacs." single ((:commit . "29f00a51d949a248a5f6355a97131e216747c797") (:url . "https://github.com/philiparvidsson/GitHub-Theme-for-Emacs"))]) (github-search . [(20170823 2023) ((magit (0 8 1)) (gh (1 0 0))) "Clone repositories by searching github" single ((:commit . "c5fa1d9f8f9bcf201fa31478a6f5e02ed5ac086b") (:url . "https://github.com/IvanMalison/github-search") (:keywords "github" "search" "clone" "api" "gh" "magit" "vc" "tools"))]) (github-pullrequest . [(20170115 2216) ((emacs (24 4)) (request (0 2 0)) (dash (2 11 0)) (magit (2 10 0))) "Create and fetch Github Pull requests with ease" single ((:commit . "6ae5c38b0fc15b638b5ba4490112d9822ce5e267") (:url . "https://github.com/jakoblind/github-pullrequest") (:keywords "tools"))]) (github-notifier . [(20170604 2119) ((emacs (24))) "Displays your GitHub notifications unread count in mode-line" single ((:commit . "f8d011ebef9f626a94a27b5576c8ed06e6ff8987") (:url . "https://github.com/xuchunyang/github-notifier.el") (:keywords "github" "mode-line"))]) (github-modern-theme . [(20171109 451) nil "The GitHub color theme for Emacs." single ((:commit . "a7e7b8e5e9c122138e79e837caf9b7299e748d44") (:url . "https://github.com/philiparvidsson/GitHub-Theme-for-Emacs"))]) (github-issues . [(20160616 1141) ((emacs (24))) "Functions and modes for managing GitHub projects' issues" single ((:commit . "816f7712b0eb05bffec0add3507302862d2629c4") (:url . "http://inkel.github.com/github-issues.el/") (:keywords "github" "issues"))]) (github-elpa . [(20160922 907) ((package-build (1 0)) (commander (0 7 0)) (git (0 1 1))) "Build and publish ELPA repositories with GitHub Pages" tar ((:commit . "7619a564edb1985b0487786a3b4ec6d12f897b5b") (:url . "https://github.com/10sr/github-elpa"))]) (github-clone . [(20160622 2010) ((gh (0 7 2)) (magit (2 1 0)) (emacs (24 4))) "Fork and clone github repos" single ((:commit . "467b40ca60a6c26257466ebc43c74414df7f19cc") (:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools"))]) (github-browse-file . [(20160205 627) ((cl-lib (0 5))) "View the file you're editing on GitHub" single ((:commit . "9742a5183af853788c6ecb83fb7ee0b00d1675ac") (:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github"))]) (gitconfig-mode . [(20170627 854) nil "Major mode for editing .gitconfig files" single ((:commit . "9f18eca514d242816a4969e86c4cfd2cf4dfe401") (:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (gitconfig . [(20130718 235) nil "Emacs lisp interface to work with git-config variables" single ((:commit . "7612a37ca14009cac8fb8d6b6f54adad739a5741") (:keywords "git" "gitconfig" "git-config"))]) (gitattributes-mode . [(20170118 1613) nil "Major mode for editing .gitattributes files" single ((:commit . "9f18eca514d242816a4969e86c4cfd2cf4dfe401") (:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (git-wip-timemachine . [(20150408 306) ((s (1 9 0))) "Walk through git-wip revisions of a file" single ((:commit . "ed4c7931a5f5233bf3e358b1e81647d063526460") (:url . "https://github.com/itsjeyd/git-wip-timemachine") (:keywords "git"))]) (git-timemachine . [(20170325 220) ((emacs (24 3))) "Walk through git revisions of a file" single ((:commit . "92f8ad4afc802d01c24426ff52ad6fefb3bb91be") (:url . "https://github.com/pidu/git-timemachine") (:keywords "git"))]) (git-ps1-mode . [(20170102 1944) nil "Global minor-mode to print __git_ps1" single ((:commit . "e41c630f5d04cb1a4d38a4b500d7a154a96a4655") (:url . "https://github.com/10sr/git-ps1-mode-el") (:keywords "utility" "mode-line" "git"))]) (git-msg-prefix . [(20180118 646) ((emacs (24)) (s (1 10 0)) (dash (2 9 0))) "Insert commit message prefix (issue number)" single ((:commit . "c6acf10b014607f1541a398206208e568a4714e4") (:url . "http://github.com/kidd/git-msg-prefix.el") (:keywords "vc" "tools"))]) (git-messenger . [(20170101 2040) ((emacs (24 3)) (popup (0 5 0))) "Pop up last commit information of current line" single ((:commit . "83815915eb8c1cb47443ff34bca3fecf7d2edf3a") (:url . "https://github.com/syohex/emacs-git-messenger"))]) (git-link . [(20170603 1026) ((cl-lib (0 6 1))) "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single ((:commit . "472af75eca7aba42a1934f408c4bda55e34c9dcf") (:url . "http://github.com/sshaw/git-link") (:keywords "git" "vc" "github" "bitbucket" "gitlab" "convenience"))]) (git-lens . [(20170517 144) ((emacs (24 4))) "Show new, deleted or modified files in branch" single ((:commit . "91bf19d6dd7368de5cad373a8155c48c4e254723") (:keywords "vc" "convenience"))]) (git-gutter-fringe . [(20170112 2133) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single ((:commit . "16226caab44174301f1659f7bf8cc67a76153445") (:url . "https://github.com/syohex/emacs-git-gutter-fringe"))]) (git-gutter-fringe+ . [(20140729 403) ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) "Fringe version of git-gutter+.el" single ((:commit . "7a2f49d2455a3a872e90e5f7dd4e6b27f1d96cfc") (:url . "https://github.com/nonsequitur/git-gutter-fringe-plus"))]) (git-gutter . [(20161105 656) ((emacs (24 3))) "Port of Sublime Text plugin GitGutter" single ((:commit . "00c05264af046b5ce248e5b0bc42f117d9c27a09") (:url . "https://github.com/syohex/emacs-git-gutter"))]) (git-gutter+ . [(20151204 923) ((git-commit (0)) (dash (0))) "Manage Git hunks straight from the buffer" single ((:commit . "b7726997806d9a2da9fe84ff00ecf21d62b6f975") (:url . "https://github.com/nonsequitur/git-gutter-plus") (:keywords "git" "vc"))]) (git-dwim . [(20170126 414) nil "Context-aware git commands such as branch handling" single ((:commit . "485c732130686c2f28a026e385366006435394b9") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/git-dwim.el") (:keywords "git" "tools" "convenience"))]) (git-commit-insert-issue . [(20171102 1141) ((projectile (0)) (s (0)) (github-issues (0)) (gitlab (0)) (bitbucket (0))) "Get issues list when typing \"Fixes #\"" single ((:commit . "f986923b04b587206ce7ee8e0c456768600e8be7") (:url . "https://gitlab.com/emacs-stuff/git-commit-insert-issue/") (:keywords "git" "github" "gitlab" "bitbucket" "commit" "issues"))]) (git-commit . [(20180118 507) ((emacs (24 4)) (dash (20170810)) (with-editor (20170817))) "Edit Git commit messages" single ((:commit . "451daf0b94cde9e0986ec48c3e92ab25f817b77f") (:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc"))]) (git-command . [(20160111 503) ((term-run (0 1 4)) (with-editor (2 3 1))) "Yet another Git interface" single ((:commit . "dce465ca1cd80e16df0f8dce8e427a76e9edc3b7") (:url . "https://github.com/10sr/git-command-el") (:keywords "utility" "git"))]) (git-blamed . [(20161028 1226) nil "Minor mode for incremental blame for Git" single ((:commit . "cef196abf398e2dd11f775d1e6cd8690567408aa") (:keywords "git" "version control" "release management"))]) (git-auto-commit-mode . [(20161229 817) nil "Emacs Minor mode to automatically commit and push" single ((:commit . "2c8197e5d7813734d6a49f9b9c0b227b7ae022a8") (:url . "http://projects.ryuslash.org/git-auto-commit-mode/") (:keywords "vc"))]) (git-annex . [(20170417 1653) nil "Mode for easy editing of git-annex'd files" single ((:commit . "22b7161adcd144f88681b9b904972cea42b27fca") (:url . "https://github.com/jwiegley/git-annex-el") (:keywords "files" "data" "git" "annex"))]) (git . [(20140128 241) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single ((:commit . "a3396a7027a7d986598c6a2d6d5599bac918f3da") (:url . "http://github.com/rejeep/git.el") (:keywords "git"))]) (gist . [(20171127 2006) ((emacs (24 1)) (gh (0 10 0))) "Emacs integration for gist.github.com" single ((:commit . "b2712a61d04af98a05cc2556d85479803b6626be") (:url . "https://github.com/defunkt/gist.el") (:keywords "tools"))]) (gildas-mode . [(20150919 1501) ((polymode (0)) (emacs (24 3))) "Major mode for Gildas" single ((:commit . "23e8a2e6066ff74af592de6d5d0d858442e2bf8a") (:url . "https://github.com/smaret/gildas-mode") (:keywords "languages" "gildas"))]) (gift-mode . [(20171121 653) nil "major mode for editing GIFT format quizzes" single ((:commit . "f8c9a495e3c6a47dbfdcb719bcbd0f8522297340") (:url . "https://github.com/csrhodes/gift-mode"))]) (ghub . [(20180117 1249) ((emacs (24 4)) (let-alist (1 0 5))) "minuscule client library for the Github API" tar ((:commit . "f1b647faf5ce5f033728236b9263e7ecee8f536f") (:url . "https://github.com/magit/ghub") (:keywords "tools"))]) (ghub+ . [(20180121 1435) ((emacs (25)) (ghub (1 2)) (apiwrap (0 4))) "a thick GitHub API client built on ghub" single ((:commit . "8dfd995ca4b3b0f94dbf4cc09ec50b8ebedf5c0f") (:url . "https://github.com/vermiculus/ghub-plus") (:keywords "extensions" "multimedia" "tools"))]) (ghq . [(20160803 857) nil "Ghq interface for emacs" single ((:commit . "aae4b8cb22fd6c24d2c9e3962c7e8e9dac6d9825") (:keywords "ghq"))]) (ghost-blog . [(20171023 42) ((markdown-mode (1 0))) "A package to manage Ghost blog" single ((:commit . "71b358643cc9a2db1bf752281ff94aba9b59e4cc") (:url . "https://github.com/javaguirre/ghost-blog") (:keywords "ghost" "blog"))]) (gherkin-mode . [(20171224 553) nil "An emacs major mode for editing gherkin files." single ((:commit . "0313492e7da152f0aa73ddf96c0287ded8f51253") (:keywords "languages"))]) (ghci-completion . [(20151125 457) ((emacs (24 1)) (cl-lib (0 5))) "Completion for GHCi commands in inferior-haskell buffers" single ((:commit . "c47e23d585d2a3c7b13aac163693fdc4f2bb90e5") (:keywords "convenience"))]) (ghc-imported-from . [(20141124 1132) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single ((:commit . "fcff08628a19f5d26151564659218cc677779b79") (:keywords "languages"))]) (ghc . [(20180121 418) ((haskell-mode (13 0))) "Sub mode for Haskell mode" tar ((:commit . "39b96c475090f91e4f717197c96e083fdb2ccaf7"))]) (gh-md . [(20151207 940) ((emacs (24))) "Render markdown using the Github api" single ((:commit . "693cb0dcadff70e813e1a9d303d227aff7898557") (:url . "https://github.com/emacs-pe/gh-md.el") (:keywords "convenience"))]) (gh . [(20180112 1110) ((emacs (24 3)) (s (1 9 0)) (dash (2 9 0)) (pcache (0 4 1)) (logito (0 1)) (marshal (0 6 3))) "A GitHub library for Emacs" tar ((:commit . "519e8397fb223bb1071b726ed65c59a9ebd9fa48"))]) (ggtags . [(20171203 1553) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:commit . "eec392d2d639030c5a51bce8431f2815ad8e7bc5") (:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience"))]) (ggo-mode . [(20130524 443) nil "Gengetopt major mode" single ((:commit . "e326899d9ed8217c7a4ea6cfdc4dd7aea61d6c1b") (:keywords "extensions" "convenience" "local"))]) (gerrit-download . [(20150714 708) ((emacs (24 0)) (magit (2 1 0))) "Show gerrit reviews in a diff buffer." single ((:commit . "d568acc7c5935188c9bc19ba72719a6092d9f6fd") (:url . "https://github.com/chmouel/gerrit-download.el") (:keywords "tools" "gerrit" "git"))]) (german-holidays . [(20161011 13) nil "German holidays for Emacs calendar" single ((:commit . "d7d540c229c1a8be68ee09fbda08fe3ea31b7d29") (:url . "https://github.com/rudolfochrist/german-holidays"))]) (genrnc . [(20140612 537) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((:commit . "da75b1966a73ad215ec2ced4522c25f4d0bf1f9a") (:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml"))]) (general . [(20180121 1539) ((emacs (24 4)) (cl-lib (0 5))) "Convenience wrappers for keybindings." single ((:commit . "cc9983470cc5152c9de584e971ffc8bd38413616") (:url . "https://github.com/noctuid/general.el") (:keywords "vim" "evil" "leader" "keybindings" "keys"))]) (geiser . [(20171217 1353) nil "GNU Emacs and Scheme talk to each other" tar ((:commit . "0bfc6be0d25ff311d739d2f65fd343135142f6f3") (:url . "http://www.nongnu.org/geiser/"))]) (geeknote . [(20160717 549) ((emacs (24))) "Use Evernote in Emacs through geeknote" single ((:commit . "8ed607c76864afcc9c338972ab093caf4501cbf8") (:url . "http://github.com/avendael/emacs-geeknote") (:keywords "evernote" "geeknote" "note" "emacs-evernote" "evernote-mode"))]) (geben-helm-projectile . [(20160610 1759) ((emacs (24)) (geben (0 26)) (helm-projectile (0 13 0))) "Integrate helm-projectile with geben" single ((:commit . "31ce0faca5dcc71924884f03fd5a7a25d00ccd9b") (:url . "https://github.com/ahungry/geben-helm-projectile") (:keywords "ahungry" "emacs" "geben" "helm" "projectile" "debug"))]) (geben . [(20170801 551) ((emacs (24 3)) (cl-lib (0 5))) "DBGp protocol frontend, a script debugger" tar ((:commit . "ec3f5e9376cf1ea5615990bd8c212543d57f033b") (:url . "https://github.com/ahungry/geben") (:keywords "c" "comm" "tools"))]) (gdscript-mode . [(20180117 2056) ((emacs (24 3))) "Major mode for editing Godot GDScript files" single ((:commit . "31af5283eaec207bc864022a28e2824132471eaf") (:url . "https://github.com/AdamBark/gdscript-mode") (:keywords "languages"))]) (gather . [(20141230 538) nil "Gather string in buffer." single ((:commit . "50809fbc22d70a1c724c2dd99ac5a1f818ffeb6b") (:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools"))]) (gap-mode . [(20160204 736) nil "Major mode for editing files in the GAP programing language." tar ((:url . "https://bitbucket.org/gvol/gap-mode") (:keywords "gap"))]) (gandalf-theme . [(20130809 247) nil "Gandalf color theme" single ((:commit . "4e472fc851431458537d458d09c1f5895e338536") (:keywords "color" "theme"))]) (gams-mode . [(20171117 1815) nil "Major mode for editing GAMS (General Algebraic Modeling System) files." single ((:commit . "900e1788695d91dde2a3d7fee97681a3380285de") (:url . "http://shirotakeda.org/en/gams/gams-mode/") (:keywords "gams"))]) (fzf . [(20180102 1712) ((emacs (24 4))) "A front-end for fzf." single ((:commit . "b750cccae7c37a9ee4d40d928bb508cc3234bfbf") (:url . "https://github.com/bling/fzf.el") (:keywords "fzf" "fuzzy" "search"))]) (fyure . [(20130216 514) nil "An interface to fix Japanese hyoki-yure" tar ((:commit . "b6977f1eb148e8b63259f7233b55bb050e44d9b8") (:keywords "languages"))]) (fxrd-mode . [(20170728 1101) ((s (1 2))) "Major mode for editing fixed field width files" tar ((:commit . "18a603474abb5a786a8d9f20c283d5f7beed3540") (:url . "https://github.com/msherry/fxrd-mode") (:keywords "convenience"))]) (fwb-cmds . [(20160523 535) nil "misc frame, window and buffer commands" single ((:commit . "57973f99cf4a185b5cccbf941478fad25e8428c3") (:url . "https://github.com/tarsius/fwb-cmds") (:keywords "convenience"))]) (fvwm-mode . [(20160411 438) nil "A major mode for editing Fvwm configuration files" single ((:commit . "6832a1c1f68bf6249c3fd6672ea8e27dc7a5c79e") (:url . "https://github.com/theBlackDragon/fvwm-mode") (:keywords "files"))]) (fuzzy . [(20150729 2037) nil "Fuzzy Matching" single ((:commit . "534d723ad2e06322ff8d9bd0ba4863d243f698e7") (:keywords "convenience"))]) (futhark-mode . [(20171026 722) ((cl-lib (0 5))) "major mode for editing Futhark source files" single ((:commit . "b4e09242cbf998d113471c7a09e75f8c3fd55681") (:url . "https://github.com/HIPERFIT/futhark") (:keywords "languages"))]) (furl . [(20150508 2016) nil "Friendly URL retrieval" single ((:commit . "014438271e0ef27333dfcd599cb247f12a20d870"))]) (function-args . [(20171031 1004) ((ivy (0 9 1))) "C++ completion for GNU Emacs" tar ((:commit . "609b25305670fff08d5e357298e7128e4f4e3497") (:url . "https://github.com/abo-abo/function-args"))]) (fullframe . [(20170816 303) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single ((:commit . "d6a5217f7f2a5a5edcb75140f3fa69b3a50f1cdd") (:keywords "fullscreen"))]) (full-ack . [(20140223 932) nil "a front-end for ack" single ((:commit . "761d846e105b150f8e6d13d7a8983f0248313a45") (:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching"))]) (fuff . [(20170202 703) ((seq (2 3))) "Find files with findutils, recursively" single ((:commit . "278e849913df87bd8756c59382282d87474802c3") (:url . "https://github.com/joelmo/fuff") (:keywords "files" "project" "convenience"))]) (fuel . [(20170805 2030) ((cl-lib (0 2)) (emacs (24 2))) "Major mode for the Factor programming language." tar ((:commit . "cc389c4bed0f2e6db07b456ec85b6d4df0aab4ce"))]) (fstar-mode . [(20171105 1108) ((emacs (24 3)) (dash (2 11)) (company (0 8 12)) (quick-peek (1 0)) (yasnippet (0 11 0)) (flycheck (30 0)) (company-quickhelp (2 2 0))) "Support for F* programming" tar ((:commit . "742e427068b5a8568f257585db3fc89c2c6c620e") (:url . "https://github.com/FStarLang/fstar-mode.el") (:keywords "convenience" "languages"))]) (fsharp-mode . [(20171021 431) ((company (0 8 0)) (company-quickhelp (1 2 0)) (popup (0 5 3)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0)) (flycheck (0 25))) "F# mode for Emacs" tar ((:commit . "5504550605354146842c8f5c34482ece778b7b31"))]) (fsbot-data-browser . [(20160921 833) nil "browse the fsbot database using tabulated-list-mode" single ((:commit . "6bca4f7de63e31839d2542f6c678b79931dec344") (:url . "http://github.com/benaiah/fsbot-data-browser") (:keywords "fsbot" "irc" "tabulated-list-mode"))]) (fringe-helper . [(20140620 1409) nil "helper functions for fringe bitmaps" single ((:commit . "ef4a9c023bae18ec1ddd7265f1f2d6d2e775efdd") (:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp"))]) (fringe-current-line . [(20140110 2011) nil "show current line on the fringe." single ((:commit . "0ef000bac76abae30601222e6f06c7d133ab4942") (:url . "http://github.com/kyanagi/fringe-current-line/raw/master/fringe-current-line.el"))]) (free-keys . [(20160726 1350) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single ((:commit . "edfd69dc369b2647447b7c28c7c1163b1ddf45b4") (:url . "https://github.com/Fuco1/free-keys") (:keywords "convenience"))]) (frecency . [(20170908 2331) ((emacs (25 1)) (a (0 1)) (dash (2 13 0))) "Library for sorting items by frequency and recency of access" single ((:commit . "132130088ef5695cffed6fcacfa219cb0c389026") (:url . "http://github.com/alphapapa/frecency.el") (:keywords "libraries" "recency" "recent" "frequency" "frequent"))]) (framesize . [(20131017 1432) ((key-chord (0 5 20080915))) "change the size of frames in Emacs" single ((:commit . "f2dbf5d2513b2bc45f2085370a55c1754b6025da") (:url . "http://github.com/nicferrier/emacs-framesize") (:keywords "frames"))]) (frames-only-mode . [(20180114 1048) ((emacs (24 4)) (dash (2 13 0)) (s (1 11 0))) "Use frames instead of Emacs windows" single ((:commit . "4dbc6871d8220cb95d287dd35475725a1b7662ab") (:url . "https://github.com/davidshepherd7/frames-only-mode") (:keywords "frames" "windows"))]) (frame-tag . [(20170110 1606) ((cl-lib (0 5))) "Minor mode that assigns a unique number to each frame for easy switching" single ((:commit . "73d6163568c7d32952175e663318b872f995a4e5") (:url . "http://github.com/liangzan/frame-tag.el") (:keywords "frame" "movement"))]) (frame-mode . [(20170419 1427) ((s (1 9 0)) (emacs (24 4))) "Use frames instead of windows" single ((:commit . "fcdbafbda45758cd60ab3acb492fbbd692987a58") (:url . "https://github.com/IvanMalison/frame-mode") (:keywords "frames"))]) (fraktur-mode . [(20160814 1927) ((cl-lib (0 5))) "Easily insert Unicode mathematical Fraktur characters" single ((:commit . "514baf5546aed12a0d9fa0fe66e87cdcc7843b08") (:url . "https://github.com/grettke/fraktur-mode") (:keywords "unicode" "fraktur" "math" "mathematical"))]) (fountain-mode . [(20180107 2123) ((emacs (24 5))) "Major mode for screenwriting in Fountain markup" single ((:commit . "361f2a58151c9e6ab52b59cdd230a3add461a2bb") (:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp"))]) (fortune-cookie . [(20170407 1517) nil "Print a fortune in your scratch buffer." single ((:commit . "bad99a2cd090f6646c7ee1125b95dd98744939c6") (:url . "https://github.com/andschwa/fortune-cookie") (:keywords "fortune" "cowsay" "scratch" "startup"))]) (fortpy . [(20150715 1332) ((epc (0 1 0)) (auto-complete (1 4)) (python-environment (0 0 2)) (pos-tip (0 4 5))) "a Fortran auto-completion for Emacs" tar ((:commit . "c614517e9396ef7a78be3b8786fbf303879cf43b"))]) (forth-mode . [(20170527 1230) nil "Programming language mode for Forth" tar ((:commit . "522256d98d1a909983bcfd3ae20c65226d5929b6") (:url . "http://github.com/larsbrinkhoff/forth-mode") (:keywords "languages" "forth"))]) (format-sql . [(20150422 633) nil "Use format-sql to make your SQL readable in directly Emacs." single ((:commit . "97f475c245cd6c81a72a265678e2087cee66ac7b") (:url . "https://github.com/paetzke/format-sql.el"))]) (form-feed . [(20160102 1453) nil "Display ^L glyphs as horizontal lines" single ((:commit . "799ca3e72b20a59a755a094b8cead57f654f3170") (:url . "https://github.com/wasamasa/form-feed") (:keywords "faces"))]) (forest-blue-theme . [(20160627 142) ((emacs (24))) "Emacs theme with a dark background." single ((:commit . "58096ce1a25615d2bae806c3775bae3e2775019d"))]) (foreman-mode . [(20170725 722) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "View and manage Procfile-based applications" single ((:commit . "22b3bb13134b617870ed1e888af739f4818be929") (:url . "http://github.com/zweifisch/foreman-mode") (:keywords "foreman"))]) (foreign-regexp . [(20160318 907) nil "search and replace by foreign regexp." tar ((:commit . "e368c4dbd3b7a95a14cbc3c25617b5f1bc5a7fb4") (:keywords "convenience" "emulations" "matching" "tools" "unix" "wp"))]) (forecast . [(20180106 920) ((emacs (24 4))) "Weather forecasts" single ((:commit . "74bc667721d9e325989c9faadae0dce8ed22222b") (:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast"))]) (fontawesome . [(20170305 556) ((emacs (24 4))) "fontawesome utility" tar ((:commit . "a743f80bfd53767ca9ee32da34c5ca032172a480") (:url . "https://github.com/syohex/emacs-fontawesome"))]) (font-utils . [(20150806 1051) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single ((:commit . "9192d3f8ee6a4e75f34c3fed10378674cc2b11d3") (:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions"))]) (font-lock-studio . [(20170127 1251) ((emacs (24 3))) "interactive debugger for Font Lock keywords." single ((:commit . "12c35967b31233e06946c70627aa3152dacfe261") (:url . "https://github.com/Lindydancer/font-lock-studio") (:keywords "faces" "tools"))]) (font-lock-profiler . [(20170208 1208) ((emacs (24 3))) "Coverage and timing tool for font-lock keywords." single ((:commit . "6e096458416888a4f63cca0d6bc5965a052753c8") (:url . "https://github.com/Lindydancer/font-lock-profiler") (:keywords "faces" "tools"))]) (folding . [(20170925 838) nil "A folding-editor-like minor mode." single ((:commit . "3bf134fd1ecfa8767ab7020c25281ea5ce9968a2") (:keywords "tools"))]) (fold-this . [(20150601 342) nil "Just fold this region please" single ((:commit . "90b41d7b588ab1c3295bf69f7dd87bf31b543a6a") (:keywords "convenience"))]) (fold-dwim-org . [(20131203 551) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ((:commit . "c09bb2b46d65afbd1d0febc6fded7495be7a3037") (:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode"))]) (fold-dwim . [(20140208 837) nil "Unified user interface for Emacs folding modes" single ((:commit . "c46f4bb2ce91b4e307136320e72c28dd50b6cd8b") (:url . "http://www.dur.ac.uk/p.j.heslin/Software/Emacs"))]) (foggy-night-theme . [(20160209 708) ((emacs (24))) "Dark low contrast theme with soft and muted colors." single ((:commit . "60a12abdac29c2d913e1cf24485d0cc083e26093"))]) (focus-autosave-mode . [(20160519 1416) ((emacs (24 4))) "Automatically save files in focus-out-hook." single ((:commit . "e89ed22aa4dfc76e1b844b202aedd468ad58814a") (:keywords "convenience" "files" "frames" "mouse"))]) (focus . [(20171203 2103) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single ((:commit . "045ee6175e9340f873db03445c74ff9eefa35a27") (:url . "http://github.com/larstvei/Focus"))]) (fn . [(20170209 1804) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (dash-functional (1 2 0))) "Concise anonymous functions for Emacs Lisp" single ((:commit . "f685fd0c08ec3b1d1b9974b37e62edd78a000cb8") (:keywords "functional"))]) (fm-bookmarks . [(20170104 916) ((emacs (24 3)) (cl-lib (0 5))) "Use file manager bookmarks (eg Dolphin, Nautilus, PCManFM) in Dired" single ((:commit . "11dacfd16a926bfecba96a94c6b13e162c7717f7") (:url . "http://github.com/kuanyui/fm-bookmarks.el") (:keywords "files" "convenience"))]) (fm . [(20130126 1618) nil "follow mode for compilation/output buffers" single ((:commit . "555bcebdf47ea3b1d9d1e152af7237b9daa62d59") (:keywords "outlines"))]) (flyspell-popup . [(20170529 115) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single ((:commit . "29311849bfd253b9b689bf331860b4c4d3bd4dde") (:url . "https://github.com/xuchunyang/flyspell-popup") (:keywords "convenience"))]) (flyspell-lazy . [(20141222 652) nil "Improve flyspell responsiveness using idle timers" single ((:commit . "31786fe04a4732d2f845e1c7e96fcb030182ef10") (:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling"))]) (flyspell-correct-popup . [(20161031 1134) ((flyspell-correct (0 4 0)) (popup (0 5 3))) "correcting words with flyspell via popup interface" single ((:commit . "a8ac817f7b646d8ba761b64e1b2f65d0a9ebd277") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct-ivy . [(20161031 1134) ((flyspell-correct (0 4 0)) (ivy (0 8 0))) "correcting words with flyspell via ivy interface" single ((:commit . "a8ac817f7b646d8ba761b64e1b2f65d0a9ebd277") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct-helm . [(20161031 1134) ((flyspell-correct (0 4 0)) (helm (1 9 0))) "correcting words with flyspell via helm interface" single ((:commit . "a8ac817f7b646d8ba761b64e1b2f65d0a9ebd277") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct . [(20171205 940) nil "correcting words with flyspell via custom interface" tar ((:commit . "a8ac817f7b646d8ba761b64e1b2f65d0a9ebd277") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyparens . [(20140723 1146) nil "Check for unbalanced parens on the fly" tar ((:commit . "af9b8cfd647d0e5f97684d613dc2eea7cfc19398") (:keywords "faces" "convenience" "lisp" "matching" "parentheses" "parens"))]) (flymd . [(20160617 514) ((cl-lib (0 5))) "On the fly markdown preview" tar ((:commit . "84d5a68bcfed4a295952c33ffcd11e880978d9d7") (:url . "https://github.com/mola-T/flymd") (:keywords "markdown" "convenience"))]) (flymake-yaml . [(20130423 848) ((flymake-easy (0 1))) "A flymake handler for YAML" single ((:commit . "24cb5b744a1796e554e6dbfc6eeb237d06a00b10") (:url . "https://github.com/yasuyk/flymake-yaml") (:keywords "yaml"))]) (flymake-vala . [(20150325 2231) ((flymake-easy (0 1))) "A flymake handler for vala-mode files" single ((:commit . "c3674f461fc84fb0300cd3a562fb903a59782745") (:url . "https://github.com/daniellawrence/flymake-vala") (:keywords "convenience" "vala"))]) (flymake-solidity . [(20170804 2344) ((flymake-easy (0 10))) "A flymake handler for solidity using solc" single ((:commit . "48bfe9525f764d8a68cc0270905dbf45bfd00bb8") (:url . "https://github.com/kootenvp/flymake-solidity"))]) (flymake-shell . [(20170722 1846) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single ((:commit . "a16cf453056b9849cc7c912bb127fb0b08fc6dab") (:url . "https://github.com/purcell/flymake-shell"))]) (flymake-sass . [(20170722 1846) ((flymake-easy (0 1))) "Flymake handler for sass and scss files" single ((:commit . "2de28148e92deb93bff3d55fe14e7c67ac476056") (:url . "https://github.com/purcell/flymake-sass"))]) (flymake-rust . [(20170729 1439) ((flymake-easy (0 1))) "A flymake handler for rust-mode files" single ((:commit . "2f42d1f2dad73ec9de460eda6176e3ab25c446f0") (:url . "https://github.com/joaoxsouls/flymake-rust"))]) (flymake-ruby . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single ((:commit . "6c320c6fb686c5223bf975cc35178ad6b195e073") (:url . "https://github.com/purcell/flymake-ruby"))]) (flymake-python-pyflakes . [(20170722 1846) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single ((:commit . "1d65c26bf65a5dcbd29fcd967e2feb90e1e7a33d") (:url . "https://github.com/purcell/flymake-python-pyflakes"))]) (flymake-puppet . [(20170731 2254) ((flymake-easy (0 9))) "Flymake handler using puppet-lint" single ((:commit . "9579e5c736cb890195464fabf51df113313de88d") (:url . "https://github.com/benprew/flymake-puppet"))]) (flymake-phpcs . [(20140712 2331) ((flymake-easy (0 9))) "making flymake work with PHP CodeSniffer" single ((:commit . "a4d383474e055e554aaf1cd617055d5d7181aa50") (:url . "https://github.com/senda-akiha/flymake-phpcs/") (:keywords "flymake" "phpcs" "php"))]) (flymake-php . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ((:commit . "c045d01e002ba5e09b05f40e25bf5068d02126bc") (:url . "https://github.com/purcell/flymake-php"))]) (flymake-perlcritic . [(20120328 114) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ((:commit . "edfaa86500ddfa8a6a6f51f5581a81a821277df6") (:url . "https://github.com/illusori/emacs-flymake-perlcritic"))]) (flymake-lua . [(20170128 1754) nil "Flymake for Lua" single ((:commit . "84589f20066921a5b79cf3a1f914a223a2552d2a") (:keywords "lua"))]) (flymake-less . [(20151110 2338) ((less-css-mode (0 15)) (flymake-easy (0 1))) "Flymake handler for LESS stylesheets (lesscss.org)" single ((:commit . "32d3c28a9a5c52b82d1741ff9d715013b6498421") (:keywords "languages"))]) (flymake-json . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single ((:commit . "d43e62fab69c4c39f54f1057c9801a3e645de619") (:url . "https://github.com/purcell/flymake-json"))]) (flymake-jslint . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for javascript using jslint" single ((:commit . "8edb82be605542b0ef62d38d818adcdde335eecb") (:url . "https://github.com/purcell/flymake-jslint"))]) (flymake-jshint . [(20140319 1500) ((flymake-easy (0 8))) "making flymake work with JSHint" single ((:commit . "79dd554c227883c487db38ac111306c8d5382c95") (:keywords "flymake" "jshint" "javascript"))]) (flymake-hlint . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single ((:commit . "f910736b26784efc9a2fa29503f45c1f1dd0aa38") (:url . "https://github.com/purcell/flymake-hlint"))]) (flymake-haskell-multi . [(20170722 1846) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar ((:commit . "b564a94312259885b1380272eb867bf52a164020"))]) (flymake-haml . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for haml files" single ((:commit . "22a81e8484734552d461e7ae7305664dc244447e") (:url . "https://github.com/purcell/flymake-haml"))]) (flymake-google-cpplint . [(20140205 525) ((flymake-easy (0 9))) "Help to comply with the Google C++ Style Guide" single ((:commit . "905d32e84a27f18a78bec455ca930ab1ff9ae31e") (:url . "https://github.com/senda-akiha/flymake-google-cpplint/") (:keywords "flymake" "c" "c++"))]) (flymake-go . [(20150714 33) nil "A flymake handler for go-mode files" single ((:commit . "ae83761aa908c1a50ff34af04f00dcc46bca2ce9") (:url . "https://github.com/robert-zaremba/flymake-go") (:keywords "go" "flymake"))]) (flymake-gjshint . [(20130327 532) nil "A flymake handler for javascript using both jshint and gjslint" single ((:commit . "dc957c14cb060819585de8aedb330e24efa4b784") (:keywords "flymake" "javascript" "jshint" "gjslint"))]) (flymake-elixir . [(20130810 717) nil "A flymake handler for elixir-mode .ex files." single ((:commit . "3810566cffe35d04cc3f01e27fe397d68d52f802"))]) (flymake-easy . [(20140818 55) nil "Helpers for easily building flymake checkers" single ((:commit . "de41ea49503f71f997e5c359a2ad08df696c0147") (:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal"))]) (flymake-cursor . [(20120322 1057) ((flymake (0 3))) "Show flymake messages in the minibuffer after delay" single ((:commit . "ecc539082c3fc9e91bba33d72c26989217411593") (:url . "https://github.com/illusori/emacs-flymake-cursor") (:keywords "languages" "mode" "flymake"))]) (flymake-css . [(20170722 1846) ((flymake-easy (0 1))) "Flymake support for css using csslint" single ((:commit . "de090163ba289910ceeb61b13368ce42d0f2dfd8") (:url . "https://github.com/purcell/flymake-css"))]) (flymake-cppcheck . [(20140415 557) ((flymake-easy (0 9))) "Flymake work with Cppcheck for C/C++" single ((:commit . "9554f504d425a04fa6a875f7e3179bc7cf07dd03") (:url . "https://github.com/senda-akiha/flymake-cppcheck/") (:keywords "flymake" "cppcheck" "c" "c++"))]) (flymake-coffee . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for coffee script" single ((:commit . "dee295acf30820ed15fe0de17137d50bc27fc80c") (:url . "https://github.com/purcell/flymake-coffee"))]) (flycheck-ycmd . [(20170614 1434) ((emacs (24)) (dash (2 13 0)) (flycheck (0 22)) (ycmd (1 2)) (let-alist (1 0 5))) "flycheck integration for ycmd" single ((:commit . "7f394d02f6f3149b215adcc96043c78d5f32d612") (:url . "https://github.com/abingham/emacs-ycmd"))]) (flycheck-yang . [(20170915 1308) ((yang-mode (0 9 4)) (flycheck (0 18))) "YANG flycheck checker" single ((:commit . "c5f65fe3f710f73d56e04d077868719afc1ebfaf"))]) (flycheck-yamllint . [(20170325 1035) ((flycheck (30))) "Flycheck integration for YAMLLint" single ((:commit . "c2b273d84f15bd03464d6722391e595d7c179a5c") (:url . "https://github.com/krzysztof-magosa/flycheck-yamllint") (:keywords "convenience" "languages" "tools"))]) (flycheck-xcode . [(20180121 2251) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Apple's Xcode." single ((:commit . "6147ab777e2c08e4f5ffdbd85d3013ca700fa835") (:url . "https://github.com/jojojames/flycheck-xcode") (:keywords "languages" "xcode"))]) (flycheck-vale . [(20170619 2322) ((emacs (24 4)) (flycheck (0 22)) (let-alist (1 0 4))) "flycheck integration for vale" single ((:commit . "97df981468120aaedeaa4cf8ecfd68b07046d998") (:url . "https://github.com/abingham/flycheck-vale"))]) (flycheck-title . [(20170216 1546) ((flycheck (30)) (emacs (24))) "show flycheck errors in the frame title" single ((:commit . "6faea67be8661faf8152217869d16e993cc2bc49"))]) (flycheck-tip . [(20171020 348) ((flycheck (29)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar ((:commit . "9b0072d92e6b4a52834bf5a34120a0f5e1c8c2fd") (:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck"))]) (flycheck-swiftlint . [(20180121 2251) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Swiftlint." single ((:commit . "fef7fd20cc167790cb29f16de16a8045717e0a18") (:url . "https://github.com/jojojames/flycheck-swiftlint") (:keywords "languages" "swiftlint" "swift" "emacs"))]) (flycheck-swift3 . [(20171231 452) ((emacs (24 4)) (flycheck (26))) "Flycheck: Swift support for Apple swift-mode" single ((:commit . "34973cd28ca5e63f8f6328a17fd7b78cc913b93d") (:url . "https://github.com/GyazSquare/flycheck-swift3") (:keywords "convenience" "languages" "tools"))]) (flycheck-swift . [(20170128 2149) ((emacs (24 4)) (flycheck (0 25))) "Flycheck extension for Apple's Swift." single ((:commit . "4c5ad401252400a78da395fd56a71e67ff8c2761") (:keywords "languages" "swift"))]) (flycheck-status-emoji . [(20170923 1439) ((cl-lib (0 1)) (emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single ((:commit . "840e6469c5a83a2438c7e8c5833e3d22b8480f8a") (:url . "https://github.com/liblit/flycheck-status-emoji") (:keywords "convenience" "languages" "tools"))]) (flycheck-stack . [(20160520 244) ((flycheck (26)) (haskell-mode (13))) "Flychecker using stack ghci" single ((:commit . "f04235e00998000ee2c305f5a3ee72bb5dbbc926"))]) (flycheck-rust . [(20170404 842) ((emacs (24 1)) (flycheck (0 20)) (dash (2 13 0)) (seq (2 15)) (let-alist (1 0 4))) "Flycheck: Rust additions and Cargo support" single ((:commit . "a89c0298f5e8fdcb0c33833ca1eca64632cec053") (:url . "https://github.com/flycheck/flycheck-rust") (:keywords "tools" "convenience"))]) (flycheck-rtags . [(20170522 2154) ((emacs (24)) (flycheck (0 23)) (rtags (2 10))) "RTags Flycheck integration." single ((:commit . "53e74892e8bd15baa4d1bd1d640dcabcba9667ee") (:url . "http://rtags.net"))]) (flycheck-rebar3 . [(20161030 615) ((flycheck (27))) "Rebar3 flycheck integration for Erlang projects" single ((:commit . "56a7c94857f0a0ea6a2a73c476a1a2faadc0f7c6") (:url . "https://github/joedevivo/flycheck-rebar3") (:keywords "erlang" "flycheck" "rebar3"))]) (flycheck-pyflakes . [(20170330 1611) ((flycheck (0 18))) "Support pyflakes in flycheck" single ((:commit . "61b045939e3743b2162b7e4e73249c66fc2b8f65"))]) (flycheck-pycheckers . [(20171207 1754) ((flycheck (0 18))) "multiple syntax checker for Python, using Flycheck" tar ((:commit . "41e676931f37ba32652edde727e443e304e7e6ee") (:url . "https://github.com/msherry/flycheck-pycheckers") (:keywords "convenience" "tools" "languages"))]) (flycheck-purescript . [(20161121 907) ((emacs (24 3)) (flycheck (0 22)) (dash (2 12 0)) (let-alist (1 0 4)) (seq (1 11))) "Flycheck: PureScript support" single ((:commit . "30f0435d5e2715053c8c6170b2bce2ae462ac819") (:url . "https://github.com/emacs-pe/flycheck-purescript") (:keywords "convenience" "tools" "languages"))]) (flycheck-pos-tip . [(20170504 1504) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single ((:commit . "7b94c0c1e3185a4350dc39885add3927037ebad8") (:url . "https://github.com/flycheck/flycheck-pos-tip") (:keywords "tools" "convenience"))]) (flycheck-popup-tip . [(20170812 1651) ((flycheck (0 22)) (popup (0 5)) (emacs (24))) "Display Flycheck error messages using popup.el" single ((:commit . "ef86aad907f27ca076859d8d9416f4f7727619c6") (:url . "https://github.com/flycheck/flycheck-popup-tip/") (:keywords "convenience" "tools" "flycheck" "tooltip"))]) (flycheck-pony . [(20160501 1417) ((flycheck (0 25 1))) "Pony support in Flycheck" single ((:commit . "ef27475a14090396a01924d131bfee9e163cf6e9") (:url . "https://github.com/seantallen/flycheck-pony") (:keywords "tools" "convenience"))]) (flycheck-plantuml . [(20171017 1811) ((flycheck (0 24)) (emacs (24 4)) (plantuml-mode (1 2 2))) "Integrate plantuml with flycheck" single ((:commit . "183be89e1dbba0b38237dd198dff600e0790309d") (:url . "https://github.com/alexmurray/flycheck-plantuml"))]) (flycheck-pkg-config . [(20170214 1114) ((dash (2 8 0)) (s (1 9 0)) (flycheck (29))) "configure flycheck using pkg-config" single ((:commit . "fda3f828082bd957c838126577a6b7e4d747dd54") (:keywords "flycheck"))]) (flycheck-perl6 . [(20171231 445) ((emacs (24 3)) (flycheck (0 22))) "Perl 6 support in Flycheck" single ((:commit . "7a69ddbb54dc0748734ace95f598c69e9882aa94") (:url . "https://github.com/hinrik/flycheck-perl6") (:keywords "tools" "convenience"))]) (flycheck-package . [(20161111 1451) ((flycheck (0 22)) (package-lint (0 2))) "A Flycheck checker for elisp package authors" single ((:commit . "6d99248b45eea1e5236062f38e524230efdb1a84") (:keywords "lisp"))]) (flycheck-ocaml . [(20170730 1453) ((emacs (24 1)) (flycheck (0 22)) (merlin (3 0 1)) (let-alist (1 0 3))) "Flycheck: OCaml support" single ((:commit . "8707a7bf545a8639a6a5c600a98d9a2ea1487dc9") (:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages"))]) (flycheck-objc-clang . [(20171231 453) ((emacs (24 4)) (flycheck (26))) "Flycheck: Objective-C support using Clang" single ((:commit . "07f17d1dbe878fdcabac791a8916ddf643571a68") (:url . "https://github.com/GyazSquare/flycheck-objc-clang") (:keywords "convenience" "languages" "tools"))]) (flycheck-nimsuggest . [(20171027 1508) ((flycheck (0 23)) (emacs (24 3))) "flycheck backend for Nim using nimsuggest" single ((:commit . "dc9a5de1cb3ee05db5794d824610959a1f603bc9") (:url . "https://github.com/yuutayamada/flycheck-nimsuggest"))]) (flycheck-nim . [(20160714 2128) ((dash (2 4 0)) (flycheck (0 20))) "Defines a flycheck syntax checker for nim" single ((:commit . "6d27349b66e44578851e6148299709d64d2bde41") (:url . "https://github.com/ALSchwalm/flycheck-nim"))]) (flycheck-mypy . [(20160220 1432) ((flycheck (0 18))) "Support mypy in flycheck" single ((:commit . "2675dc0e31f8c08eb69f77b8d99e3f7d985c62ee"))]) (flycheck-mmark . [(20180118 328) ((emacs (24 4)) (flycheck (0 29))) "Flycheck checker for MMark markdown processor" single ((:commit . "b73b40cb9c5cf6bc6fa501aa87a4c30b210c0c5f") (:url . "https://github.com/mmark-md/flycheck-mmark") (:keywords "convenience" "text"))]) (flycheck-mix . [(20170118 630) ((flycheck (27)) (elixir-mode (1 8 0))) "Elixir mix flycheck integration" single ((:commit . "76684d4b5987925b98b254aab656f8bf8198ab88") (:url . "https://github.com/tomekowal/flycheck-mix") (:keywords "elixir" "flycheck" "mix"))]) (flycheck-mercury . [(20151122 2334) ((flycheck (0 22)) (s (1 9 0)) (dash (2 4 0))) "Mercury support in Flycheck" single ((:commit . "fa9e433a0a912f0fae9e4dec9ea616ef99fcf861") (:url . "https://github.com/flycheck/flycheck-mercury") (:keywords "convenience" "languages" "tools"))]) (flycheck-liquidhs . [(20170412 1626) ((flycheck (0 15))) "A flycheck checker for Haskell using liquid (i.e. liquidhaskell)" single ((:commit . "c27252ac24d77f4b6eec76a4ba9cd61761a3fba9") (:url . "https://github.com/ucsd-progsys/liquidhaskell/flycheck-liquid.el") (:keywords "convenience" "languages" "tools"))]) (flycheck-lilypond . [(20171203 532) ((emacs (24 3)) (flycheck (0 22))) "LilyPond support in Flycheck" single ((:commit . "cc1b7677a932c42e5dab1661ad7b923d4aae744c") (:url . "https://github.com/hinrik/flycheck-lilypond") (:keywords "tools" "convenience"))]) (flycheck-ledger . [(20140605 1146) ((flycheck (0 15))) "Flycheck integration for ledger files" single ((:commit . "2944c56ad72945f78f88fa363e0239b40650d829") (:keywords "convenience" "languages" "tools"))]) (flycheck-kotlin . [(20170122 337) ((flycheck (0 18))) "Support kotlin in flycheck" single ((:commit . "cbb9fbf70dbe8efcc3971b3606ee95c97469b1fe"))]) (flycheck-julia . [(20170729 1441) ((emacs (24)) (flycheck (0 22))) "Julia support for Flycheck" single ((:commit . "213b60a5a9a1cb7887260e1d159b5bb27167cbb6") (:url . "https://github.com/gdkrmr/flycheck-julia") (:keywords "convenience" "tools" "languages"))]) (flycheck-joker . [(20171003 2222) ((flycheck (0 18))) "Add Clojure syntax checker (via Joker) to flycheck" single ((:commit . "c34c3922a2e8bc918f250602e0ddf655cdcad456"))]) (flycheck-irony . [(20160317 1536) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0))) "Flycheck: C/C++ support via Irony" single ((:commit . "34940ae5ab8f4c721d9c1118ebfc3496d7e67a84") (:url . "https://github.com/Sarcasm/flycheck-irony/") (:keywords "convenience" "tools" "c"))]) (flycheck-inline . [(20170728 2328) ((emacs (24 4)) (cl-lib (0 3)) (inline-docs (1 0 1)) (flycheck (31 -3))) "Display flycheck error messages with inline popup style." single ((:commit . "624957ec04164f03656bf2d0a5ccd6d2b013f545") (:url . "https://github.com/stardiviner/flycheck-inline") (:keywords "tools" "convenience"))]) (flycheck-hdevtools . [(20160926 2) ((flycheck (0 21 -3 1)) (dash (2 0))) "A flycheck checker for Haskell using hdevtools" single ((:commit . "eab1fc184854341a56154623a131cab6ff0ce18c") (:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools"))]) (flycheck-haskell . [(20171107 1420) ((emacs (24 3)) (flycheck (0 25)) (haskell-mode (13 7)) (dash (2 4 0)) (seq (1 11)) (let-alist (1 0 1))) "Flycheck: Automatic Haskell configuration" tar ((:commit . "ff21330a5a7db4e42d6ccf4410ef4a3231e5f19a") (:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience"))]) (flycheck-gradle . [(20180121 2251) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Gradle." single ((:commit . "f8c7ec0abdd77f35c5a9a653f8a80acea717b014") (:url . "https://github.com/jojojames/flycheck-gradle") (:keywords "languages" "gradle"))]) (flycheck-gometalinter . [(20170321 732) ((emacs (24)) (flycheck (0 22))) "flycheck checker for gometalinter" single ((:commit . "c90ea1aba80ddfdf603c9ba731be302400fd6ba2") (:url . "https://github.com/favadi/flycheck-gometalinter") (:keywords "convenience" "tools" "go"))]) (flycheck-ghcmod . [(20150113 2232) ((flycheck (0 21 -3 1)) (dash (2 0))) "A flycheck checker for Haskell using ghcmod" single ((:commit . "6bb7b7d879f05bbae54e99eb04806c877adf3ccc") (:url . "https://github.com/scturtle/flycheck-ghcmod") (:keywords "convenience" "languages" "tools"))]) (flycheck-flow . [(20171121 514) ((flycheck (0 18)) (json (1 4))) "Support Flow in flycheck" single ((:commit . "d9d1262b9139df1cab8072e5ab15563571f32b8f"))]) (flycheck-flawfinder . [(20170115 1927) ((flycheck (0 24)) (emacs (24 4))) "Integrate flawfinder with flycheck" single ((:commit . "7d964d38023b088adf3ffc2fddeead81f4491a45") (:url . "https://github.com/alexmurray/flycheck-flawfinder"))]) (flycheck-elm . [(20160717 257) ((flycheck (0 29 -3)) (emacs (24 4))) "Flycheck support for the elm language" single ((:commit . "b401873ebd2176190a0a6fb4d61c2cca97d3b9fb") (:url . "https://github.com/bsermons/flycheck-elm"))]) (flycheck-elixir . [(20171122 507) ((flycheck (0 25))) "Support Elixir in flycheck" single ((:commit . "1f19a739cdb93851c6b01b1e188e215d035cd4a1"))]) (flycheck-dogma . [(20170124 2321) ((flycheck (29))) "flycheck checker for elixir dogma" single ((:commit . "eea1844a81e87e2488b05e703a93272d0fc3bc74") (:url . "https://github.com/aaronjensen/flycheck-dogma"))]) (flycheck-dmd-dub . [(20180119 1220) ((flycheck (0 24)) (f (0 18 2))) "Sets flycheck-dmd-include-paths from dub package information" single ((:commit . "d4f6fde2ce5cbdbfef44b68affee394c9c891a1c") (:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages"))]) (flycheck-dialyzer . [(20160326 730) ((flycheck (0 18))) "Support dialyzer in flycheck" single ((:commit . "a5df0db95ac69f397b5f85d325a6d88cf8974f64"))]) (flycheck-dialyxir . [(20170515 825) ((flycheck (29))) "flycheck checker for elixir dialyxir" single ((:commit . "adfb73374cb2bee75724822972f405f2ec371199") (:url . "https://github.com/aaronjensen/flycheck-dialyxir"))]) (flycheck-demjsonlint . [(20161114 2318) ((flycheck (30))) "Flychecker for json-mode using jsonlint from demjson" tar ((:commit . "a3dfe1df8ecdea76c076c0849901427567356228") (:url . "https://github.com/z4139jq/flycheck-demjsonlint") (:keywords "convenience" "tools"))]) (flycheck-dedukti . [(20171103 512) ((flycheck (0 19)) (dedukti-mode (0 1))) "Flycheck integration of Dedukti" single ((:commit . "3dbff5646355f39d57a3ec514f560a6b0082a1cd") (:url . "https://github.com/rafoo/flycheck-dedukti") (:keywords "convenience" "languages" "tools" "flycheck" "dedukti"))]) (flycheck-d-unittest . [(20160521 2117) ((flycheck (0 21 -3 1)) (dash (1 4 0))) "Add D unittest support to flycheck" single ((:commit . "3e614f23cb4a5566fd7988dbcaaf254af81c7718") (:url . "https://github.com/tom-tan/flycheck-d-unittest/") (:keywords "flycheck" "d"))]) (flycheck-cython . [(20170724 258) ((flycheck (0 25))) "Support Cython in flycheck" single ((:commit . "ecc4454d35ab5317ab66a04406f36f0c1dbc0b76"))]) (flycheck-cstyle . [(20160905 1641) ((flycheck (0 24)) (emacs (24 4))) "Integrate cstyle with flycheck" single ((:commit . "207285140a353d08cf1fc450cacab158bc98ba82") (:url . "https://github.com/alexmurray/flycheck-cstyle"))]) (flycheck-css-colorguard . [(20161031 422) ((flycheck (0 22)) (emacs (24))) "Detect similar colors in CSS" single ((:commit . "ae94fa0396acd99f9ec36d9572459df793f37fe8") (:url . "https://github.com/Simplify/flycheck-css-colorguard/") (:keywords "flycheck" "css" "colorguard"))]) (flycheck-crystal . [(20171124 740) ((flycheck (30))) "Add support for Crystal to Flycheck" single ((:commit . "0fe6815201bebe4c5ff6857bd541d95b05132b10") (:url . "https://github.com/crystal-lang-tools/emacs-crystal-mode") (:keywords "tools" "crystal"))]) (flycheck-credo . [(20170526 845) ((flycheck (29))) "flycheck checker for elixir credo" single ((:commit . "e88f11ead53805c361ec7706e44c3dfee1daa19f") (:url . "https://github.com/aaronjensen/flycheck-credo"))]) (flycheck-coverity . [(20170703 1759) ((flycheck (0 24)) (dash (2 12 0)) (emacs (24 4))) "Integrate Coverity with flycheck" single ((:commit . "cb211e3dd50413a5042eb20175be518214591c9d") (:url . "https://github.com/alexmurray/flycheck-coverity"))]) (flycheck-color-mode-line . [(20171121 2307) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ((:commit . "cc474804d4e8088a627485faaf4217a5781aec7d") (:keywords "convenience" "language" "tools"))]) (flycheck-clojure . [(20170221 1354) ((cider (0 8 1)) (flycheck (0 22 -3 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single ((:commit . "0fe57ab9c0d6262a3c0dbc9c28a9ca98390a6016") (:url . "https://github.com/clojure-emacs/squiggly-clojure"))]) (flycheck-clangcheck . [(20150712 10) ((cl-lib (0 5)) (seq (1 7)) (flycheck (0 17))) "A Flycheck checker difinition for ClangCheck." single ((:commit . "24a9424c484420073a24443a829fd5779752362b") (:url . "https://github.com/kumar8600/flycheck-clangcheck"))]) (flycheck-clang-tidy . [(20171024 108) ((flycheck (0 30))) "Flycheck syntax checker using clang-tidy" single ((:commit . "b8ebd49693f67e08e420ba847cc88f6721ef9e3e") (:url . "https://github.com/ch1bo/flycheck-clang-tidy") (:keywords "convenience" "languages" "tools"))]) (flycheck-clang-analyzer . [(20170704 2333) ((flycheck (0 24)) (emacs (24 4))) "Integrate Clang Analyzer with flycheck" single ((:commit . "a33752224cb1da13b35d0d60b2017fe73d167781") (:url . "https://github.com/alexmurray/flycheck-clang-analyzer"))]) (flycheck-checkpatch . [(20170217 225) ((emacs (25)) (flycheck (30))) "Flycheck support for checkpatch.pl tool" single ((:commit . "6461fc7b0d493eb9863814055f8bce5fa35739de") (:url . "https://github.com/zpp0/flycheck-checkpatch"))]) (flycheck-checkbashisms . [(20160224 906) ((emacs (24)) (flycheck (0 25))) "checkbashisms checker for flycheck" single ((:commit . "0794ad763d7cd81286283f6400bc89a81e8e07d4") (:url . "https://github.com/Gnouc/flycheck-checkbashisms") (:keywords "convenience" "tools" "sh" "unix"))]) (flycheck-cask . [(20160928 226) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single ((:commit . "c3a51147eddeb7347de81f6a498fc96538bac499") (:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience"))]) (flycheck-bashate . [(20160629 2140) ((flycheck (0 24)) (emacs (24 4))) "Integrate bashate with flycheck" single ((:commit . "77fa03dbc578c34fe71ca44926bac2aff8f2b021") (:url . "https://github.com/alexmurray/flycheck-bashate"))]) (flycheck-ats2 . [(20170225 836) ((emacs (24 1)) (flycheck (0 22))) "Flycheck: ATS2 support" single ((:commit . "9f77add8408462af35bdddf87e37a661880255e3") (:url . "http://github.com/drvink/flycheck-ats2") (:keywords "convenience" "tools" "languages"))]) (flycheck-apertium . [(20160406 618) ((flycheck (0 25))) "Apertium checkers in flycheck" tar ((:commit . "71cf49d5aaee962b995583384bfa045a1d4c3db7") (:url . "http://wiki.apertium.org/wiki/Emacs") (:keywords "convenience" "tools" "xml"))]) (flycheck . [(20180123 1419) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "On-the-fly syntax checking" tar ((:commit . "ad6a29d367ece4db1b9f4e98dacb70bc50e771d5") (:url . "http://www.flycheck.org") (:keywords "convenience" "languages" "tools"))]) (flx-isearch . [(20180102 2114) ((emacs (24)) (flx (20140821)) (cl-lib (0 5))) "Fuzzy incremental searching for emacs" single ((:commit . "f132fd6367e369885ab3a865fbfe20eee989bc0b") (:url . "https://github.com/pythonnut/flx-isearch") (:keywords "convenience" "search" "flx"))]) (flx-ido . [(20180117 719) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ((:commit . "9c5cb5de0202b4eaac9359c84ca7ce9cbd7ee835") (:url . "https://github.com/lewang/flx"))]) (flx . [(20151030 1112) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ((:commit . "9c5cb5de0202b4eaac9359c84ca7ce9cbd7ee835") (:url . "https://github.com/lewang/flx"))]) (fluxus-mode . [(20170210 1141) ((osc (0 1)) (emacs (24 4))) "Major mode for interfacing with Fluxus" single ((:commit . "3661d4dfdaf249138e7f215f15f291c9391ede8d") (:url . "https://github.com/defaultxr/fluxus-mode") (:keywords "languages"))]) (flow-minor-mode . [(20180104 1348) ((emacs (25 1))) "Flow type mode based on web-mode." single ((:commit . "50dded94ad201fdc9453656a8b15179981cd5acd") (:url . "https://github.com/an-sh/flow-minor-mode"))]) (floobits . [(20170802 1500) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:commit . "ed5586d1bf94f36354091648e824ccb6fcaf807f") (:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools"))]) (fliptext . [(20171124 1256) nil "Input method for flipping characters upside down" single ((:commit . "fd821f645ffebae6ae3894afa7ba7fc06f91afc6") (:keywords "games" "i18n"))]) (flimenu . [(20170417 1847) ((dash (2 10 0)) (emacs (24 4))) "Flatten imenu automatically" single ((:commit . "9351201d89b05cbdaec312a6ebd7fd10c38d6112") (:url . "https://github.com/IvanMalison/flimenu") (:keywords "imenu" "browse" "structure" "hook" "mode" "matching" "tools" "convenience" "files"))]) (flim . [(20180118 522) ((apel (10 8))) "A library to provide basic features about message representation or encoding." tar ((:commit . "e969ab24f729835b6f8dd71d57cee1aff345f959"))]) (flex-isearch . [(20170308 1210) nil "Flex matching (like ido) in isearch." single ((:url . "https://bitbucket.org/jpkotta/flex-isearch") (:keywords "convenience" "search"))]) (flex-compile . [(20171213 1019) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "Run, evaluate and compile for a many languages and modes." tar ((:commit . "1952f6deee9d95196906f46fea2b24882cc614b6") (:url . "https://github.com/plandes/flex-compile") (:keywords "compilation" "integration"))]) (flex-autopair . [(20120809 518) nil "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." single ((:commit . "4bb757f2556a4a51828e2fed8fb81e31e83052cb") (:url . "https://github.com/uk-ar/flex-autopair.el") (:keywords "keyboard" "input"))]) (flatui-theme . [(20160618 1827) nil "A color theme for Emacs based on flatuicolors.com" single ((:commit . "9c15db5526c15c8dba55023f5698372b19c2a780") (:url . "https://github.com/john2x/flatui-theme.el"))]) (flatui-dark-theme . [(20170513 722) ((emacs (24))) "Dark color theme with colors from https://flatuicolors.com/" single ((:commit . "5b959a9f743f891e4660b1b432086417947872ea") (:url . "https://github.com/theasp/flatui-dark-theme") (:keywords "color" "theme" "dark" "flatui" "faces"))]) (flatland-theme . [(20171113 721) nil "A simple theme for Emacs based on the Flatland theme for Sublime Text" single ((:commit . "a98a6f19ad4dff0fa3fad1ea487b7d0ef634a19a") (:url . "http://github.com/gregchapple/flatland-emacs"))]) (flatland-black-theme . [(20170808 612) ((emacs (24 0))) "an Emacs 24 theme based on Flatland Black (tmTheme)" single ((:commit . "348c5d5fe615e6ea13cadc17f046e506e789ce07") (:url . "https://github.com/emacsfodder/flatland-black-theme"))]) (flash-region . [(20130923 1117) nil "Flash a region" single ((:commit . "261b3597b23cdd40e5c14262a5687bcc6c1d0901") (:keywords "utility"))]) (flappymacs . [(20171023 304) nil "flappybird clone for emacs" single ((:commit . "27f3e21acb22f786606481e3f4e5dc1edbaaaed4") (:url . "https://github.com/taksatou/flappymacs") (:keywords "games"))]) (fixmee . [(20150223 555) ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single ((:commit . "1b8b3460f1e3c3c1784b2a63fb9f4fb3bb4dc084") (:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience"))]) (fix-word . [(20171231 2215) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single ((:commit . "3e3339f5d44dd8be100cec1c88bcaefd328a2bde") (:url . "https://github.com/mrkkrp/fix-word") (:keywords "word" "convenience"))]) (fix-muscle-memory . [(20160822 2139) nil "Simple hacks to fix muscle memory problems" single ((:commit . "a123e04f8a1d2982cbf930efb909cad9522ac884") (:keywords "spelling" "typing"))]) (fix-input . [(20171231 2220) ((emacs (24 4))) "Make input methods play nicely with alternative keyboard layout on OS level" single ((:commit . "e053fcc641f1f835f2fdb71143e095c1889b8233") (:url . "https://github.com/mrkkrp/fix-input") (:keywords "input" "method"))]) (fish-mode . [(20180117 1847) ((emacs (24))) "Major mode for fish shell scripts" single ((:commit . "276db7de3c86411fbe3117f30272c5882b24a69e") (:keywords "fish" "shell"))]) (fish-completion . [(20171209 508) nil "Add fish completion to pcomplete (shell and Eshell)" single ((:commit . "12e5db70b5efe7a3cd37e8fd25eb526d08007aac") (:url . "https://github.com/Ambrevar/emacs-fish-completion"))]) (firrtl-mode . [(20180122 1950) ((emacs (24 3))) "mode for working with FIRRTL files" single ((:commit . "285f5c18722de98fd3dae195a2bd653497cf7daa") (:url . "https://github.com/ibm/firrtl-mode") (:keywords "languages" "firrtl"))]) (firestarter . [(20161219 523) nil "Execute (shell) commands on save" single ((:commit . "4d6b106f325ac1802eabce3c8a7cd0a4c7a32864") (:url . "https://github.com/wasamasa/firestarter") (:keywords "convenience"))]) (fireplace . [(20160811 519) nil "A cozy fireplace for emacs" single ((:commit . "23a444f749bcb2b804593e3b2cb9c73cc59231fb") (:url . "https://github.com/johanvts/emacs-fireplace") (:keywords "games"))]) (firefox-controller . [(20160320 1147) ((moz (0)) (popwin (1 0 0)) (cl-lib (0 5))) "An improved Firefox controller" single ((:commit . "a8af8cbf70afaf6b89a26d6ac69af8e92afc181f") (:url . "https://github.com/cute-jumper/emacs-firefox-controller") (:keywords "extensions"))]) (firecode-theme . [(20170808 611) ((emacs (24 0))) "an Emacs 24 theme based on FireCode (tmTheme)" single ((:commit . "8b7b03ecdd41e70dab145b98906017e1392eaef4") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (fiplr . [(20140723 2345) ((grizzl (0 1 0)) (cl-lib (0 1))) "Fuzzy Search for Files in Projects" tar ((:commit . "bb6b90ba3c558988c195048c4c40140b2ee17530"))]) (fingers . [(20160817 129) nil "Modal editing with universal text manipulation helpers." tar ((:commit . "fed0f742afb1d72eaef29d8da394467550a030fa") (:url . "http://github.com/fgeller/fingers.el") (:keywords "fingers" "modal" "editing" "workman"))]) (findr . [(20130127 1232) nil "Breadth-first file-finding facility for (X)Emacs" single ((:commit . "1ddbc0464bb05dcda392b62666ad17239a2152d3") (:keywords "files"))]) (find-things-fast . [(20150519 1526) nil "Find things fast, leveraging the power of git" single ((:commit . "efc7c189019ed65430e2f9e910e8e0a5ca9d2d03") (:keywords "project" "convenience"))]) (find-temp-file . [(20170107 539) nil "Open quickly a temporary file" single ((:commit . "513005d19d72d71f34481ee00158dd57bd93206f") (:url . "https://github.com/thisirs/find-temp-file.git") (:keywords "convenience"))]) (find-file-in-repository . [(20151113 519) nil "Quickly find files in a git, mercurial or other repository" single ((:commit . "8a8c84a6dbe7a2bba4564c3b58c92d157abfa3f8") (:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control"))]) (find-file-in-project . [(20171219 1858) ((ivy (0 10 0)) (emacs (24 3))) "Find file/directory and review Diff/Patch/Commit efficiently everywhere" single ((:commit . "b9dff2881cefaf2926df35fe23366ce3bd59d157") (:url . "https://github.com/technomancy/find-file-in-project") (:keywords "project" "convenience"))]) (find-by-pinyin-dired . [(20170206 208) ((pinyinlib (0 1 0))) "Find file by first PinYin character of Chinese Hanzi" single ((:commit . "2c48434637bd63840fca4d2c6cf9ebd5dd44658f") (:url . "http://github.com/redguardtoo/find-by-pinyin-dired") (:keywords "hanzi" "chinese" "dired" "find" "file" "pinyin"))]) (finalize . [(20170418 1245) ((emacs (24 1)) (cl-generic (0 3)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar ((:commit . "846731531e7d1d80451787992e07bfe7dedbe9ff"))]) (fillcode . [(20171029 925) nil "Fill (wrap) function calls and expressions in source code" single ((:commit . "d0a9e20f5fcc24a786d09ea19bfb9237681ba823") (:url . "https://snarfed.org/fillcode"))]) (fill-column-indicator . [(20171209 1124) nil "Graphically indicate the fill column" single ((:commit . "d2536b1c48f78679e15a2b50cd5d8c0ffde4b155") (:keywords "convenience"))]) (figlet . [(20160218 1437) nil "Annoy people with big, ascii art text" single nil]) (fifo-class . [(20160424 2258) nil "First in first out abstract class" single ((:commit . "8fe4cf690727f4ac7b67f29c55f845df023c3f21") (:url . "https://github.com/mola-T/fifo-class") (:keywords "lisp"))]) (fic-mode . [(20160209 1011) nil "Show FIXME/TODO/BUG(...) in special face only in comments and strings" single ((:commit . "8182f5be875fdefc5bd7142ab45adea89ac20705") (:url . "https://github.com/lewang/fic-mode"))]) (fetch . [(20131130 2330) nil "Fetch and unpack resources" single ((:commit . "3f2793afcbbc32f320e572453166f9354ecc6d06") (:url . "https://github.com/crshd/fetch.el"))]) (feature-mode . [(20170907 748) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar ((:commit . "722b352c4f0b800a9356dd369c79612782b3b847"))]) (fcopy . [(20150304 603) nil "Funny Copy, set past point HERE then search copy text" single ((:commit . "e355f6ec889d8ecbdb096019c2dc660b1cec4941") (:url . "https://github.com/ataka/fcopy") (:keywords "convenience"))]) (fcitx . [(20170913 1900) nil "Make fcitx better in Emacs" single ((:commit . "095332fbeb994c908c533fe2ad068c0728211c3d") (:url . "https://github.com/cute-jumper/fcitx.el") (:keywords "extensions"))]) (faustine . [(20171122 402) ((emacs (24 3)) (faust-mode (0 3))) "Edit, visualize, build and run Faust code" single ((:commit . "07a38963111518f86123802f9d477be0d4689a3f") (:url . "https://bitbucket.org/yphil/faustine") (:keywords "languages" "faust"))]) (faust-mode . [(20171122 414) nil "Faust syntax colorizer for Emacs." single ((:commit . "720fd8f5f48be27ceae3c6e3c612b39304484a03") (:url . "https://github.com/rukano/emacs-faust-mode") (:keywords "languages" "faust"))]) (fastnav . [(20120211 657) nil "Fast navigation and editing routines." single ((:commit . "1019ba2b61d1a070204099b23da347278a61bc89") (:keywords "nav" "fast" "fastnav" "navigation"))]) (fastdef . [(20160713 629) ((ivy (0 7 0)) (w3m (0 0))) "Insert terminology from Google top search results" single ((:commit . "0696f41dc150d35ce31fe8d2ea74f4173818bb55") (:url . "http://github.com/redguardtoo/fastdef") (:keywords "terminology" "org-mode" "markdown"))]) (fasd . [(20161216 831) nil "Emacs integration for the command-line productivity booster `fasd'" single ((:commit . "5940b84dfa1ea7225b740d3a8dd215290d964873") (:url . "https://github.com/steckerhalter/emacs-fasd") (:keywords "cli" "bash" "zsh" "autojump"))]) (farmhouse-theme . [(20160713 1544) nil "Farmhouse Theme, Emacs edition" tar ((:commit . "7ddc1ff13b4a3d5466bd0d33ecb86100352e83a7") (:keywords "color" "theme") (:url . "https://github.com/mattly/emacs-farmhouse-theme"))]) (fancy-narrow . [(20171030 1716) nil "narrow-to-region with more eye candy." single ((:commit . "9f4a587f6a5a387271fb665e13f59d41fd42504c") (:url . "http://github.com/Bruce-Connor/fancy-narrow") (:keywords "faces" "convenience"))]) (fancy-battery . [(20150101 404) ((emacs (24 1))) "Fancy battery display" single ((:commit . "9b88ae77a01aa3edc529840338bcb2db7f445822") (:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware"))]) (fakir . [(20140729 952) ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) "fakeing bits of Emacs" single ((:commit . "1fca406ad7de80fece6319ff75d4230b648534b0") (:url . "http://github.com/nicferrier/emacs-fakir") (:keywords "lisp" "tools"))]) (fakespace . [(20120817 1706) nil "fake namespaces with defpackage" single ((:commit . "d1bd1f4b14b2690d7a67f9a52622ec51ed84813a") (:url . "https://github.com/skeeto/elisp-fakespace"))]) (faff-theme . [(20170522 1219) nil "Light Emacs color theme on ivory3 background" single ((:commit . "e79dc142d99bc5a455a46345d3aba6f95f3f3f42") (:url . "https://github.com/WJCFerguson/emacs-faff-theme") (:keywords "color" "theme"))]) (factlog . [(20130209 1740) ((deferred (0 3 1))) "File activity logger" single ((:commit . "6503d77ea882c995b051d22e72db336fb28770fc") (:url . "https://github.com/tkf/factlog"))]) (faceup . [(20170925 1246) nil "Markup language for faces and font-lock regression testing" single ((:commit . "6c92dad56a133e14e7b27831e1bcf9b3a71ff154") (:url . "https://github.com/Lindydancer/faceup") (:keywords "faces" "languages"))]) (face-explorer . [(20170710 1201) nil "Library and tools for faces and text properties" single ((:commit . "13bd4553bc4b09215a04d0267be1cb4ed834775c") (:url . "https://github.com/Lindydancer/face-explorer") (:keywords "faces"))]) (fabric . [(20171115 2256) nil "Launch Fabric using Emacs" tar ((:commit . "df79be341d0b34ed23850f9894136092fa5fea8c") (:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric"))]) (f3 . [(20180109 2042) ((emacs (24)) (helm (1 9 6)) (cl-lib (0 5))) "The Fantastic File Finder: a helm interface for searching files really fast" tar ((:commit . "f896674c527f41fac8faea2ddeafb2757c7b9766") (:keywords "find" "file" "files" "helm" "fast" "finder"))]) (f . [(20180106 122) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:commit . "de6d4d40ddc844eee643e92d47b9d6a63fbebb48") (:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories"))]) (eziam-theme . [(20171007 939) nil "A mostly monochrome theme, inspired by Tao and Leuven, with dark and light versions." tar ((:commit . "909a84dc5959aac982d1c296e82d687d172d3ecd"))]) (ez-query-replace . [(20170814 621) ((dash (1 2 0)) (s (1 11 0))) "a smarter context-sensitive query-replace that can be reapplied" single ((:commit . "f5dbd2d3e5e62e6b7e7cc1a98fc4d0cd411e5afa"))]) (eyuml . [(20141028 1527) ((request (0 2 0)) (s (1 8 0))) "Write textual uml diagram from emacs using yuml.me" single ((:commit . "eb29c37316e44a14741f16e894fbcfcb7537dc80") (:url . "http://github.com/antham/eyuml") (:keywords "uml"))]) (eyebrowse . [(20171216 944) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single ((:commit . "ad94b5bed74a74769775e937e167d301f4ea70e3") (:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience"))]) (exwm-x . [(20170916 2015) ((cl-lib (0 5)) (exwm (0 1)) (switch-window (0 10)) (swiper (0 9 0)) (bind-key (1 0)) (counsel (0 9 0)) (ivy (0 9 0))) "A derivative wm based on EXWM (emacs x window manager)" tar ((:commit . "abb210ff56134cc6a285d91b875f3115bc951ad0") (:url . "https://github.com/tumashu/exwm-x") (:keywords "window-manager" "exwm"))]) (exwm-surf . [(20171204 340) ((emacs (24 4)) (exwm (0 16))) "Interface for Surf (surf.suckless.org) under exwm" single ((:commit . "6c17e2c1597fe4b7b454a1dac23b9127ac951e94") (:url . "https://github.com/ecraven/exwm-surf") (:keywords "extensions"))]) (extend-dnd . [(20151122 1050) nil "R drag and Drop" tar ((:commit . "80c966c93b82c9bb5c6225a432557c39144fc602") (:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop"))]) (extempore-mode . [(20180104 2221) ((emacs (24 4))) "Emacs major mode for Extempore source files" single ((:commit . "ae5f40d4b0883a4519e460cd7720e5fcc3a68fa5") (:url . "http://github.com/extemporelang/extempore-emacs-mode") (:keywords "extempore"))]) (exsqlaim-mode . [(20170607 303) ((s (1 10 0))) "Use variables inside sql queries" single ((:commit . "a2e0a62ec8b87193d8eaa695774bfd689324b06c") (:url . "https://github.com/ahmadnazir/exsqlaim-mode"))]) (express . [(20140508 1341) ((string-utils (0 3 2))) "Alternatives to `message'" single ((:commit . "93dae7377eace4a5413ba99aecb6f26f90798725") (:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface"))]) (expand-region . [(20171217 2125) nil "Increase selected region by semantic units." tar ((:commit . "f99b7630efcdb47c9c6182489c55fba3bcaee521"))]) (expand-line . [(20151005 1907) nil "Expand selection by line" single ((:commit . "75a5d0241f35dd0748ab8ecb4ff16891535be372"))]) (exotica-theme . [(20180119 441) ((emacs (24))) "A dark theme with vibrant colors" single ((:commit . "aca4fb0a6e460317ea1a04bdcb3e5175d30dc172") (:url . "https://github.com/jbharat/exotica-theme") (:keywords "faces" "theme" "dark" "vibrant colors"))]) (exiftool . [(20170822 1432) ((emacs (25))) "Elisp wrapper around ExifTool" single ((:commit . "3a07dbcb975577734d4abf6d68e1ab83a01951bb") (:url . "https://git.systemreboot.net/exiftool.el") (:keywords "data"))]) (exec-path-from-shell . [(20170508 4) nil "Get environment variables such as $PATH from the shell" single ((:commit . "5e355fbc50913d1ffe48bf86df0bcecd8b369ffb") (:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment"))]) (exato . [(20171127 1736) ((evil (1 2 13)) (thingatpt+ (0))) "EXATO: Evil XML/HTML Attributes Text Object" single ((:commit . "5b709c128680d4dc5ac4c11253eab94a1e38bcbc") (:url . "https://github.com/ninrod/exato"))]) (eww-lnum . [(20150102 712) nil "Conkeror-like functionality for eww" single ((:commit . "4b0ecec769919ecb05ca4fb15ec51911ba589929") (:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror"))]) (ewmctrl . [(20170921 1917) nil "Use `wmctrl' to manage desktop windows via EWMH/NetWM." single ((:commit . "3d0217c4d6cdb5c308b6cb4293574f470d4faacf") (:url . "https://github.com/flexibeast/ewmctrl") (:keywords "desktop" "windows" "ewmh" "netwm"))]) (evm . [(20141007 456) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single ((:commit . "d0623b2355436a5fd9f7238b419782080c79196b") (:url . "http://github.com/rejeep/evm"))]) (evil-visualstar . [(20160222 1648) ((evil (0))) "Starts a * or # search from the visual selection" single ((:commit . "06c053d8f7381f91c53311b1234872ca96ced752") (:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar"))]) (evil-visual-replace . [(20171015 2313) ((evil (1 0 0))) "search/replace commands for evil visual state, inc. blocks" single ((:commit . "163fc827a1ffc106475da470c37fb26f4cc9b008") (:url . "https://github.com/troyp/evil-visual-replace") (:keywords "evil" "search" "replace" "regexp" "block" "rectangular" "region" "visual"))]) (evil-visual-mark-mode . [(20150202 1000) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single ((:commit . "094ee37599492885ff3144918fcdd9b74dadaaa0") (:keywords "evil"))]) (evil-vimish-fold . [(20171030 451) ((emacs (24 4)) (evil (1 0 0)) (vimish-fold (0 2 0))) "Integrate vimish-fold with evil" single ((:commit . "4db872d12274fdddf7c6e9d01cf68cbad9cfcf15") (:url . "https://github.com/alexmurray/evil-vimish-fold"))]) (evil-tutor-ja . [(20160916 1832) ((evil (1 0 9)) (evil-tutor (0 1))) "Japanese Vimtutor adapted to Evil and wrapped in a major-mode" tar ((:commit . "99af7d82e02ce3bcdfaff47c5c80b57327a7ea8d") (:url . "https://github.com/kenjimyzk/evil-tutor-ja") (:keywords "convenience" "editing" "evil" "japanese"))]) (evil-tutor . [(20150102 2250) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar ((:commit . "4e124cd3911dc0d1b6817ad2c9e59b4753638f28") (:url . "https://github.com/syl20bnr/evil-tutor") (:keywords "convenience" "editing" "evil"))]) (evil-textobj-column . [(20170905 1205) ((names (0 5)) (emacs (24)) (evil (0))) "Provides column text objects." single ((:commit . "835d7036d0bc9a6e44fc9b7c54ccf2a7c01428cd") (:url . "https://github.com/noctuid/evil-textobj-column") (:keywords "evil" "column" "text-object"))]) (evil-textobj-anyblock . [(20170905 1207) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single ((:commit . "ff00980f0634f95bf2ad9956b615a155ea8743be") (:url . "https://github.com/noctuid/evil-textobj-anyblock") (:keywords "evil"))]) (evil-text-object-python . [(20160815 141) ((emacs (24)) (evil (1 2 12))) "Python specific evil text objects" single ((:commit . "3b3fb01e7ad7eeeeae1143695547fe75148cc44f") (:url . "https://github.com/wbolster/evil-text-object-python") (:keywords "evil" "python" "text-object"))]) (evil-test-helpers . [(20180109 1040) ((evil (1 2 13))) "unit test helpers for Evil" single ((:commit . "76d846bc4abbefdcdeae843b6a1cd61a9bd88d04"))]) (evil-terminal-cursor-changer . [(20170401 142) ((evil (1 0 8))) "Change cursor shape and color by evil state in terminal" single ((:commit . "b49ca4393d2f3cc6014174950059b36a5cb22949") (:url . "https://github.com/7696122/evil-terminal-cursor-changer") (:keywords "evil" "terminal" "cursor"))]) (evil-tabs . [(20160217 720) ((evil (0 0 0)) (elscreen (0 0 0))) "Integrating Vim-style tabs for Evil mode users." single ((:commit . "53d3314a810017b6056ab6796aef671f5ea1c063") (:url . "https://github.com/krisajenkins/evil-tabs") (:keywords "evil" "tab" "tabs" "vim"))]) (evil-swap-keys . [(20170726 1120) ((emacs (24))) "intelligently swap keys on text input with evil" single ((:commit . "56bc201e265a6bd482a7c41a7c81d2238341ef3a") (:url . "https://github.com/wbolster/evil-swap-keys") (:keywords "evil" "key" "swap" "numbers" "symbols"))]) (evil-surround . [(20180102 601) ((evil (1 2 12))) "emulate surround.vim from Vim" single ((:commit . "5a20c9757eff64e1567d313eb254126aef2bf3b2") (:keywords "emulation" "vi" "evil"))]) (evil-string-inflection . [(20171225 1815) ((emacs (24)) (evil (1 2 13)) (string-inflection (1 0 6))) "snake_case -> CamelCase -> etc. for text objects" single ((:commit . "ac261bee68444c2cb9aaab25b58509e8f58efe35") (:url . "https://github.com/ninrod/evil-string-inflection"))]) (evil-space . [(20151208 428) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:commit . "a9c07284d308425deee134c9d88a2d538dd229e6") (:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion"))]) (evil-snipe . [(20170903 603) ((emacs (24 4)) (evil (1 2 12)) (cl-lib (0 5))) "emulate vim-sneak & vim-seek" single ((:commit . "69adb46546a871beb54a445cb22652ac276555c1") (:url . "https://github.com/hlissner/evil-snipe") (:keywords "emulation" "vim" "evil" "sneak" "seek"))]) (evil-smartparens . [(20171210 713) ((evil (1 0)) (emacs (24 4)) (smartparens (1 10 1))) "Evil support for smartparens" single ((:commit . "026d4a3cfce415a4dfae1457f871b385386e61d3") (:url . "https://www.github.com/expez/evil-smartparens") (:keywords "evil" "smartparens"))]) (evil-search-highlight-persist . [(20170522 2034) ((highlight (0))) "Persistent highlights after search" single ((:commit . "979d2dec58d3b9c5ca5fdf4bb802a0209913794e"))]) (evil-rsi . [(20160221 1304) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single ((:commit . "65ae60866be494e4622fe383e23975e04d2a42a3") (:url . "http://github.com/linktohack/evil-rsi") (:keywords "evil" "rsi" "evil-rsi"))]) (evil-replace-with-register . [(20170713 225) ((evil (1 0 8))) "Port of vim plugin ReplaceWithRegister" single ((:commit . "91cc7bf21a94703c441cc9212214075b226b7f67") (:url . "https://github.com/Dewdrops/evil-ReplaceWithRegister") (:keywords "evil" "plugin"))]) (evil-replace-with-char . [(20171223 906) ((evil (1 2 13)) (emacs (24))) "replace chars of a text object with a char" single ((:commit . "b08293f380ca8809ef12df572d37f977bed0ae52") (:url . "https://github.com/ninrod/evil-replace-with-char"))]) (evil-rails . [(20160621 1558) ((evil (1 0)) (projectile-rails (1 0))) "Rails support for Evil Mode" single ((:commit . "c8669783d8a40719b2604c58a4c06c248cab272f") (:url . "https://github.com/antono/evil-rails") (:keywords "ruby" "rails" "vim" "project" "convenience" "web" "evil" "projectile"))]) (evil-quickscope . [(20160202 1124) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single ((:commit . "37a20e4c56c6058abf186ad4013c155e695e876f") (:url . "http://github.com/blorbx/evil-quickscope") (:keywords "faces" "emulation" "vim" "evil"))]) (evil-paredit . [(20150413 1348) ((evil (1 0 9)) (paredit (25 -2))) "Paredit support for evil keybindings" single ((:commit . "e058fbdcf9dbf7ad6cc77f0172d7517ef233d55f") (:url . "https://github.com/roman/evil-paredit") (:keywords "paredit" "evil"))]) (evil-org . [(20180116 1347) ((emacs (24 4)) (evil (1 0))) "evil keybindings for org-mode" tar ((:commit . "491b0b302b95d44ceb73d291dedbb9d5517ccee2") (:url . "https://github.com/Somelauw/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets"))]) (evil-opener . [(20161207 1010) ((evil (1 2 12)) (opener (0 2 2))) "opening urls as buffers in evil" tar ((:commit . "c384f67278046fdcd220275fdd212ab85672cbeb") (:url . "https://github.com/0robustus1/opener.el") (:keywords "url" "http" "files"))]) (evil-numbers . [(20140606 551) nil "increment/decrement numbers like in vim" single ((:commit . "6ea1c8c3a9b37bed63d48f1128e9a4910e68187e") (:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary"))]) (evil-nerd-commenter . [(20171206 441) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar ((:commit . "41d43709210711c07de69497c5f7db646b7e7a96") (:url . "http://github.com/redguardtoo/evil-nerd-commenter") (:keywords "commenter" "vim" "line" "evil"))]) (evil-multiedit . [(20171217 2317) ((emacs (24 4)) (evil (1 2 12)) (iedit (0 97)) (cl-lib (0 5))) "multiple cursors for evil-mode" single ((:commit . "adcadd09c9f628a65d73a140c37b649c3415a3cd") (:url . "https://github.com/hlissner/evil-multiedit") (:keywords "multiple cursors" "editing" "iedit"))]) (evil-mu4e . [(20171127 1214) ((emacs (24 4)) (dash (2 12 0)) (evil (1 2 10))) "evil-based key bindings for mu4e" single ((:commit . "234f8a7b24e3b21b6d849d209c006a258ae056ce") (:url . "https://github.com/JorisE/evil-mu4e"))]) (evil-mc-extras . [(20170202 849) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5)) (evil-mc (0 0 2)) (evil-numbers (0 4))) "Extra functionality for evil-mc" tar ((:commit . "ba3252ae129c3b79aeb70ec3d276cbda32b00421") (:url . "https://github.com/gabesoft/evil-mc-extras") (:keywords "evil" "editing" "multiple-cursors" "vim" "evil-multiple-cursors" "evil-mc" "evil-mc-extras"))]) (evil-mc . [(20170716 1806) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar ((:commit . "8127c3161a6d990635684a020f708b7914445593") (:url . "https://github.com/gabesoft/evil-mc") (:keywords "evil" "editing" "multiple-cursors" "vim" "evil-multiple-cursors" "evil-mc" "evil-mc"))]) (evil-matchit . [(20171127 245) ((evil (1 0 7))) "Vim matchit ported to Evil" tar ((:commit . "ceb13ad1b34eb0debe2472c024841bdddce9e593") (:url . "http://github.com/redguardtoo/evil-matchit") (:keywords "matchit" "vim" "evil"))]) (evil-mark-replace . [(20150424 18) ((evil (1 0 8))) "replace the thing in marked area" single ((:commit . "56cf191724a3e82239ca47a17b071c20aedb0617") (:url . "http://github.com/redguardtoo/evil-mark-replace") (:keywords "mark" "replace" "evil"))]) (evil-magit . [(20171213 1019) ((evil (1 2 3)) (magit (2 6 0))) "evil-based key bindings for magit" single ((:commit . "4cdfbcd13075869c238b2253a64668736a16880e") (:url . "https://github.com/justbur/evil-magit"))]) (evil-lispy . [(20170304 259) ((lispy (0 26 0)) (evil (1 2 12)) (hydra (0 13 5))) "precision Lisp editing with Evil and Lispy" tar ((:commit . "040a7ee130c2403a1d6dac591b94b202bb48e186") (:url . "https://github.com/sp3ctum/evil-lispy") (:keywords "lisp"))]) (evil-lisp-state . [(20160403 1948) ((evil (1 0 9)) (bind-map (0)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single ((:commit . "3c65fecd9917a41eaf6460f22187e2323821f3ce") (:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic"))]) (evil-lion . [(20170810 2314) ((emacs (24 3)) (evil (1 0 0))) "Evil align operator, port of vim-lion" single ((:commit . "aaa3874ad54c31b4322ac5bbc63e331498b11d61") (:url . "http://github.com/edkolev/evil-lion") (:keywords "emulations" "evil" "vim"))]) (evil-ledger . [(20170905 519) ((emacs (24 4)) (evil (1 2 12))) "Make `ledger-mode' more `evil'." single ((:commit . "a282fae7921d2648a32c3207413d927d1adda8b8") (:url . "https://github.com/atheriel/evil-ledger") (:keywords "convenience" "evil" "languages" "ledger" "vim-emulation"))]) (evil-leader . [(20140606 543) ((evil (0))) "let there be <leader>" single ((:commit . "39f7014bcf8b36463e0c7512c638bda4bac6c2cf") (:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader"))]) (evil-indent-textobject . [(20130831 1519) ((evil (0))) "evil textobjects based on indentation" single ((:commit . "70a1154a531b7cfdbb9a31d6922482791e20a3a7") (:url . "http://github.com/cofi/evil-indent-textobject") (:keywords "convenience" "evil"))]) (evil-indent-plus . [(20151109 1106) ((evil (0)) (cl-lib (0 5))) "Evil textobjects based on indentation" single ((:commit . "0c7501e6efed661242c3a20e0a6c79a6455c2c40") (:url . "http://github.com/TheBB/evil-indent-plus") (:keywords "convenience" "evil"))]) (evil-iedit-state . [(20160905 1908) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single ((:commit . "02ce7ea1414aa0f139b52f1b3350c2b7af74d0ba") (:url . "https://github.com/syl20bnr/evil-iedit-state") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic"))]) (evil-goggles . [(20180116 653) ((emacs (24 4)) (evil (1 0 0))) "Add a visual hint to evil operations" single ((:commit . "a1a62d2b562b9fc2172868e3b172207948d84bbf") (:url . "http://github.com/edkolev/evil-goggles") (:keywords "emulations" "evil" "vim" "visual"))]) (evil-god-state . [(20141116 1855) ((evil (1 0 8)) (god-mode (2 12 0))) "use god-mode keybindings in evil-mode" single ((:commit . "3d44197dc0a1fb40e7b7ff8717f8a8c339ce1d40") (:url . "https://github.com/gridaphobe/evil-god-state") (:keywords "evil" "leader" "god-mode"))]) (evil-find-char-pinyin . [(20160514 1341) ((evil (1 2 12)) (pinyinlib (0 1 0))) "Evil's f/F/t/T/evil-snipe commands with Pinyin support" single ((:commit . "04e277946d658f1a73c68dcbbadea9c21097a31c") (:keywords "extensions"))]) (evil-extra-operator . [(20161212 2003) ((evil (1 0 7))) "Evil operator for evaluating codes, taking notes, searching via google, etc." single ((:commit . "e16a9b36f9901254da9af8a73871061616410fc3") (:url . "http://github.com/Dewdrops/evil-extra-operator") (:keywords "evil" "plugin"))]) (evil-expat . [(20171125 752) ((emacs (24 3)) (evil (1 0 0))) "Evil ex commands" single ((:commit . "ff443637fc514813ed3139d99950391189a9360a") (:url . "http://github.com/edkolev/evil-expat") (:keywords "emulations" "evil" "vim"))]) (evil-exchange . [(20170510 1959) ((evil (1 2 8)) (cl-lib (0 3))) "Exchange text more easily within Evil" single ((:commit . "47691537815150715e64e6f6ec79be7746c96120") (:url . "http://github.com/Dewdrops/evil-exchange") (:keywords "evil" "plugin"))]) (evil-escape . [(20170913 618) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single ((:commit . "25920fb2f4ef48998eecea433c04096f8d124cfe") (:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil"))]) (evil-embrace . [(20160519 1129) ((emacs (24 4)) (embrace (0 1 0)) (evil-surround (0))) "Evil integration of embrace.el" single ((:commit . "4379adea032b25e359d01a36301b4a5afdd0d1b7") (:keywords "extensions"))]) (evil-ediff . [(20170724 1223) ((evil (1 2 3))) "Make ediff a little evil" single ((:commit . "67b0e69f65c196eff5b39dacb7a9ec05bb919c74") (:url . "https://github.com/justbur/evil-ediff"))]) (evil-easymotion . [(20180113 2254) ((emacs (24)) (avy (0 3 0)) (cl-lib (0 5))) "A port of vim's easymotion to emacs" single ((:commit . "79c13ed3bce018ac09d358e642e5bd7025e93603") (:url . "https://github.com/pythonnut/evil-easymotion") (:keywords "convenience" "evil"))]) (evil-dvorak . [(20160416 1141) ((evil (1 0 8))) "evil keybindings for that work with dvorak mode" tar ((:commit . "824f7c56980d72a0ff04c662223540cd66f13754") (:keywords "evil" "vim-emulation" "dvorak" "keyboard") (:url . "https://github.com/jbranso/evil-dvorak.git"))]) (evil-commentary . [(20170413 751) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." tar ((:commit . "395f91014b69844b81660c155f42eb9b1b3d199d") (:url . "http://github.com/linktohack/evil-commentary") (:keywords "evil" "comment" "commentary" "evil-commentary"))]) (evil-collection . [(20180123 5) ((emacs (25 1)) (evil (1 2 13))) "A set of keybindings for Evil mode" tar ((:commit . "85d3ad28eaf8bee94ead7bb93e43c70e0769f65a") (:url . "https://github.com/jojojames/evil-collection") (:keywords "evil" "tools"))]) (evil-colemak-minimal . [(20171006 617) ((emacs (24)) (evil (1 2 12))) "Minimal Colemak key bindings for evil-mode" single ((:commit . "6d98b6da60f414524a0d718f76024c26dce742b3") (:url . "https://github.com/bmallred/evil-colemak-minimal") (:keywords "colemak" "evil"))]) (evil-colemak-basics . [(20170425 509) ((emacs (24)) (evil (1 2 12)) (evil-snipe (2 0 3))) "Basic Colemak key bindings for evil-mode" single ((:commit . "7844079b47f47bb1dc24c885b0ac2e67524fa960") (:url . "https://github.com/wbolster/evil-colemak-basics") (:keywords "colemak" "evil"))]) (evil-cleverparens . [(20170717 2113) ((evil (1 0)) (paredit (1)) (smartparens (1 6 1)) (emacs (24 4)) (dash (2 12 0))) "Evil friendly minor-mode for editing lisp." tar ((:commit . "8c45879d49bfa6d4e414b6c1df700a4a51cbb869") (:url . "https://github.com/luxbock/evil-cleverparens") (:keywords "cleverparens" "parentheses" "evil" "paredit" "smartparens"))]) (evil-avy . [(20150908 48) ((emacs (24 1)) (cl-lib (0 5)) (avy (0 3 0)) (evil (1 2 3))) "set-based completion" single ((:commit . "2dd955cc3ecaa7ddeb67b295298abdc6d16dd3a5") (:url . "https://github.com/louy2/evil-avy") (:keywords "point" "location" "evil" "vim"))]) (evil-args . [(20140329 1429) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single ((:commit . "2a88b4d19953a11227cc1e91973b92149116f44c") (:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation"))]) (evil-anzu . [(20170123 2318) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single ((:commit . "9bca6ca14d865e7e005bc02a28a09b4ae74facc9") (:url . "https://github.com/syohex/emacs-evil-anzu"))]) (evil . [(20180122 35) ((emacs (24 1)) (undo-tree (0 6 3)) (goto-chg (1 6)) (cl-lib (0 5))) "Extensible Vi layer for Emacs." tar ((:commit . "76d846bc4abbefdcdeae843b6a1cd61a9bd88d04"))]) (eve-mode . [(20170822 1531) ((emacs (25)) (polymode (1 0)) (markdown-mode (2 0))) "Major mode for editing Eve documents." single ((:commit . "a4661114d9c18725691b76321d72167ca5a9070a") (:url . "https://github.com/witheve/emacs-eve-mode") (:keywords "languages" "wp" "tools"))]) (evalator-clojure . [(20160208 1348) ((cider (0 10 0)) (evalator (1 0 0))) "Clojure evaluation context for evalator via CIDER." tar ((:commit . "caa4e0a137bdfada86593128a654e16aa617ad50") (:url . "http://www.github.com/seanirby/evalator-clojure") (:keywords "languages" "clojure" "cider" "helm"))]) (evalator . [(20160212 1728) ((helm-core (1 9 1))) "Package for interactive transformation of data with helm" tar ((:commit . "f30da4da48c0b3f3cfa1fc1c7cfdb53ffe79df36") (:url . "http://www.github.com/seanirby/evalator") (:keywords "languages" "elisp" "helm"))]) (eval-sexp-fu . [(20131230 1351) ((highlight (0))) "Tiny functionality enhancements for evaluating sexps." single ((:commit . "6cffd33155d10c3e58b39cbb170f42e910fd8595") (:keywords "lisp" "highlight" "convenience"))]) (eval-in-repl . [(20171122 543) ((dash (0 0 0)) (paredit (0 0 0)) (ace-window (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar ((:commit . "fea05a5b81d74ac53cb2a83aa83a73d9526bcc42") (:url . "https://github.com/kaz-yos/eval-in-repl/"))]) (eval-expr . [(20120618 2347) nil "enhanced eval-expression command" single ((:commit . "a0e69e83de41df8dbccefc1962ab4f02206a3328") (:keywords "lisp" "extensions"))]) (euslisp-mode . [(20170830 1229) ((emacs (24 3)) (s (1 9)) (exec-path-from-shell (0)) (helm-ag (0 58))) "Major mode for Euslisp-formatted text" single ((:commit . "db62a2d148482317794727982576494596365a55") (:url . "https://github.com/iory/euslisp-mode") (:keywords "euslisp" "euslisp" "github"))]) (ethan-wspace . [(20170507 1330) nil "whitespace customizations for emacs" single ((:commit . "e055ee6730c0b03525d32e67511ef6c51e4c29e4") (:keywords "whitespace" "tab" "newline" "trailing" "clean"))]) (eterm-256color . [(20171221 1837) ((emacs (24 4)) (xterm-color (1 6)) (f (0 19 0))) "Customizable 256 colors for term." tar ((:commit . "a5560abfa81242dc45ab0342e41e33f6c7e6bc1e") (:url . "http://github.com/dieggsy/eterm-256color") (:keywords "faces"))]) (etable . [(20161028 1309) ((dash (2 9 0)) (interval-list (0 1)) (emacs (24 4))) "Implementation of javax.swing.JTable for Emacs." tar ((:commit . "d502141f0c69bf95256ba5cb9cd15350c7e942d2"))]) (esxml . [(20171129 7) nil "Library for working with xml via esxml and sxml" tar ((:commit . "5548ceba17deae0c3c6d0092672edc4de3c75ce3"))]) (esup . [(20170923 1328) ((cl-lib (0 5)) (emacs (24))) "the Emacs StartUp Profiler (ESUP)" tar ((:commit . "a589005a9a888537deef94d6fe38a9b8790c97c7") (:url . "http://github.com/jschaf/esup") (:keywords "convenience" "processes"))]) (ess-view . [(20160309 1315) ((ess (15)) (s (1 8 0)) (f (0 16 0))) "View R dataframes in a spreadsheet software" single ((:commit . "5ae35d37ac625b16640401d19f9a51b340da9420") (:url . "https://github.com/GioBo/ess-view") (:keywords "extensions" "ess"))]) (ess-smart-underscore . [(20170222 1715) ((ess (0))) "Ess Smart Underscore" tar ((:commit . "02e8a03553f34fe7184afff97f20e560d6f8d617") (:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore"))]) (ess-smart-equals . [(20150201 2201) ((emacs (24)) (ess (5 0))) "better smart-assignment with =-key in R and S" single ((:commit . "e0f5f18f01ed252fde50d051adf1fa6254a254c9") (:url . "https://github.com/genovese/ess-smart-equals") (:keywords "r" "s" "ess" "convenience"))]) (ess-R-data-view . [(20130509 458) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ((:commit . "d6e98d3ae1e2a2ea39a56eebcdb73e99d29562e9") (:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience"))]) (ess . [(20180123 1313) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar ((:commit . "0eb9e4358602f4ebfe4233d1cf9454e01978419f") (:url . "http://ess.r-project.org"))]) (esqlite-helm . [(20151116 50) ((esqlite (0 2 0)) (helm (20131207 845))) "Define helm source for sqlite database" single ((:commit . "bc4047e09b8f6c34802db86095cd465935670dce") (:url . "https://github.com/mhayashi1120/Emacs-esqlite") (:keywords "data"))]) (esqlite . [(20151206 406) ((pcsv (1 3 3))) "Manipulate sqlite file from Emacs" single ((:commit . "bc4047e09b8f6c34802db86095cd465935670dce") (:url . "https://github.com/mhayashi1120/Emacs-esqlite") (:keywords "data"))]) (espuds . [(20160905 600) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single ((:commit . "78fc53feaf77a98d63894cd410faee2a18107b00") (:url . "http://github.com/ecukes/espuds") (:keywords "test"))]) (espresso-theme . [(20170716 813) nil "Espresso Tutti Colori port for Emacs" single ((:commit . "e79c5c14732b7e34aab75dbcc968839536536c59") (:url . "https://github.com/dgutov/espresso-theme"))]) (eslintd-fix . [(20171128 453) ((dash (2 12 0)) (emacs (24 3))) "use eslint_d to automatically fix js files" single ((:commit . "3efb041c9ad0116e745efaede7f7972bc2179a72") (:url . "https://github.com/aaronjensen/eslintd-fix"))]) (eslint-fix . [(20160819 36) nil "Fix JavaScript files using ESLint" single ((:commit . "be90d1e78b1dfd43b6b3b1c06868539e2ac27d3a") (:url . "https://github.com/codesuki/eslint-fix") (:keywords "javascript" "eslint" "lint" "formatting" "style"))]) (eshell-z . [(20170116 2038) ((cl-lib (0 5))) "cd to frequent directory in eshell" single ((:commit . "c9334cbc1552234df3437f35d98e32f4d18446b8") (:url . "https://github.com/xuchunyang/eshell-z") (:keywords "convenience"))]) (eshell-up . [(20170425 1037) ((emacs (24))) "Quickly go to a specific parent directory in eshell" single ((:commit . "9c100bae5c3020e8d9307e4332d3b64e7dc28519") (:url . "https://github.com/peterwvj/eshell-up") (:keywords "eshell"))]) (eshell-prompt-extras . [(20180109 2234) nil "Display extra information for your eshell prompt." single ((:commit . "1d8825dcc005b488c6366d0b3015fc6686194eea") (:url . "https://github.com/hiddenlotus/eshell-prompt-extras") (:keywords "eshell" "prompt"))]) (eshell-git-prompt . [(20170909 752) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 11 0))) "Some Eshell prompt for Git users" single ((:commit . "b6bb2d7bd4e393b4170b29891cfefb72ae020aab") (:url . "https://github.com/xuchunyang/eshell-git-prompt") (:keywords "eshell" "git"))]) (eshell-fringe-status . [(20170117 1516) nil "Show last status in fringe" single ((:commit . "adc6997c68e39c0d52a2af1b2fd5cf2057783797") (:url . "http://projects.ryuslash.org/eshell-fringe-status/"))]) (eshell-fixed-prompt . [(20170804 635) ((emacs (25)) (s (1 11 0))) "Restrict eshell to a single fixed prompt" single ((:commit . "4351b214de6d4e8e45279930448e2f93b491848e"))]) (eshell-did-you-mean . [(20150915 1252) ((emacs (24 1)) (cl-lib (0 5))) "command not found (\"did you mean…\" feature) in Eshell" single ((:commit . "7cb6ef8e2274d0a50a9e114d412307a6543533d5") (:url . "https://github.com/xuchunyang/eshell-did-you-mean") (:keywords "eshell"))]) (eshell-bookmark . [(20170922 814) ((emacs (24 3))) "Integrate bookmarks with eshell." single ((:commit . "deda4b848b2fb979dbe73ead2cb866610e3596ed") (:url . "https://github.com/Fuco1/eshell-bookmark") (:keywords "convenience" "files"))]) (eshell-autojump . [(20150927 24) nil "autojump command for Eshell" single ((:commit . "c6a8b81a16576df9875e721fbbfe6690d04e7e43") (:url . "http://github.com/coldnew/eshell-autojump"))]) (esh-help . [(20170829 2111) ((dash (1 4 0))) "Add some help functions and support for Eshell" single ((:commit . "8a8a9d4d9852f8bd96da3b94e95ff57097ac8ec6") (:url . "https://github.com/tom-tan/esh-help/") (:keywords "eshell" "extensions"))]) (esh-buf-stack . [(20140107 218) nil "Add a buffer stack feature to Eshell" single ((:commit . "ce0ea5aadca3150eaa9d2e6ec20296add4e99176") (:keywords "eshell" "extensions"))]) (esh-autosuggest . [(20171223 1855) ((emacs (24 4)) (company (0 9 4))) "History autosuggestions for eshell" single ((:commit . "aa921f8975b0f95d1cb0044e6ad7f17529261610") (:url . "http://github.com/dieggsy/esh-autosuggest") (:keywords "completion" "company" "matching" "convenience" "abbrev"))]) (escreen . [(20170613 1534) nil "emacs window session manager" single ((:commit . "153dc05b2b7e6e2d4cbd7b6cbe8b10d6a70f73f3"))]) (esa . [(20170427 845) ((cl-lib (0 5))) "Interface to esa.io" single ((:commit . "8bd011cd1861113f54ad155d3c62725e1dcd37e7") (:url . "https://github.com/nabinno/esa.el") (:keywords "tools" "esa"))]) (es-windows . [(20140211 104) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single ((:commit . "239e30408cb1adb4bc8bd63e2df34711fa910b4f") (:url . "https://github.com/sabof/es-windows"))]) (es-mode . [(20171220 719) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0)) (s (1 11 0)) (request (0 3 0))) "A major mode for editing and executing Elasticsearch queries" tar ((:commit . "adf879cb108819fc18fea52788b3fa98a57f5177") (:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch"))]) (es-lib . [(20141111 1030) ((cl-lib (0 3))) "A collection of emacs utilities" tar ((:commit . "753b27363e39c10edc9e4e452bdbbbe4d190df4a") (:url . "https://github.com/sabof/es-lib"))]) (ert-runner . [(20171111 451) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:commit . "80ff435058f0e9815d0ac8c7a53143c474e00db3") (:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test"))]) (ert-modeline . [(20140115 215) ((s (1 3 1)) (dash (1 2 0)) (emacs (24 1)) (projectile (0 9 1))) "displays ert test results in the modeline." single ((:commit . "e7be2b81191afb437b70368a819770f8f750e4af") (:keywords "tools" "tests" "convenience"))]) (ert-junit . [(20161018 1217) ((ert (0))) "JUnit XML reports from ert results" single ((:commit . "c4cd27b60f9e7ccd05fd8a2097cde947eb250599") (:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert"))]) (ert-expectations . [(20121009 34) nil "The simplest unit test framework in the world" single ((:commit . "aed70e002c4305b66aed7f6d0d48e9addd2dc1e6") (:url . "http://www.emacswiki.org/emacs/download/ert-expectations.el") (:keywords "test" "unittest" "ert" "expectations"))]) (ert-async . [(20151011 659) nil "Async support for ERT" single ((:commit . "f64a7ed5b0d2900c9a3d8cc33294bf8a79bc8526") (:url . "http://github.com/rejeep/ert-async.el") (:keywords "test"))]) (eros . [(20161221 826) ((emacs (24 4))) "Evaluation Result OverlayS for Emacs Lisp" single ((:commit . "a42e45c9b2397156c684330b0fc90ee0eba773f5") (:url . "https://github.com/xiongtx/eros") (:keywords "convenience" "lisp"))]) (erlang . [(20171219 305) ((emacs (24 1))) "Erlang major mode" tar ((:commit . "716ef17d2a00c7f4a5a5cf92fffd18adb94c542d"))]) (ergoemacs-status . [(20160317 2238) ((powerline (2 3)) (mode-icons (0 1 0))) "Adaptive Status Bar / Mode Line" single ((:commit . "d952cc2361adf6eb4d6af60950ad4ab699c81320"))]) (ergoemacs-mode . [(20171030 738) ((emacs (24 1)) (undo-tree (0 6 5)) (cl-lib (0 5))) "Emacs mode based on common modern interface and ergonomics." tar ((:commit . "3ce23bba3cb50562693860f87f3528c471d603ba") (:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience"))]) (erefactor . [(20160121 159) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single ((:commit . "bf68085e5635eb94fd85709f8e1355c1f5534745") (:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint"))]) (eredis . [(20160809 2053) nil "eredis, a Redis client in emacs lisp" single ((:commit . "0d7d524592be488309c7c339d137ba836e52bfff") (:url . "http://code.google.com/p/eredis/"))]) (ereader . [(20170809 2201) ((emacs (24 4)) (dash (2 12 1)) (s (1 10 0)) (xml+ (0 0 0))) "Major mode for reading ebooks with org-mode integration" tar ((:commit . "f3bbd3f13195f8fba3e3c880aab0e4c60430dcf3") (:url . "https://github.com/bddean/emacs-ereader") (:keywords "epub" "ebook"))]) (ercn . [(20150523 803) nil "Flexible ERC notifications" single ((:commit . "79a4df5609046ae2e2e3375998287be6dda80615") (:url . "http://www.github.com/leathekd/ercn"))]) (erc-yt . [(20150426 549) ((dash (2 10 0))) "An erc module to display youtube links nicely" single ((:commit . "43e7d49325b17a3217a6ffb4a9daf75c5ff4e6f8") (:keywords "multimedia"))]) (erc-youtube . [(20150603 1436) nil "Show info about a YouTube URL in an ERC buffer." single ((:commit . "97054ba8475b442e2aa81e5a291f668b7f28697f") (:keywords "multimedia"))]) (erc-view-log . [(20140227 1239) nil "Major mode for viewing ERC logs" single ((:commit . "c5a25f0cbca84ed2e4f72068c02b66bd0ea3b266") (:url . "http://github.com/Niluge-KiWi/erc-view-log/raw/master/erc-view-log.el") (:keywords "erc" "viewer" "logs" "colors"))]) (erc-twitch . [(20170426 2306) ((json (1 3)) (erc (5 0))) "Support for Twitch emotes for ERC." single ((:commit . "53c6af0cb72e56d897d30a40e7e5066668d6b5ec") (:url . "https://github.com/vibhavp/erc-twitch") (:keywords "twitch" "erc" "emotes"))]) (erc-tweet . [(20150920 558) nil "shows text of a tweet when an url is posted in erc buffers" single ((:commit . "91fed61e139fa788d66a7358f0d50acc896414b8") (:keywords "extensions"))]) (erc-track-score . [(20130328 515) nil "Add score support to tracked channel buffers" single ((:commit . "5b27531ea6b1a4c4b703b270dfa9128cb5bfdaa3") (:url . "http://julien.danjou.info/erc-track-score.html"))]) (erc-terminal-notifier . [(20140115 224) nil "OSX notifications via the terminal-notifier gem for Emacs ERC." single ((:commit . "a3dacb935845e4a20031212bbd82b2170f68d2a8") (:url . "http://github.com/julienXX/") (:keywords "erc" "terminal-notifier" "nick"))]) (erc-status-sidebar . [(20171223 1324) ((emacs (24 5)) (seq (2 3))) "a hexchat-like activity overview for ERC channels" single ((:commit . "9e972f4e31287362020daa81dc7af26999ea6c5b") (:url . "https://github.com/drewbarbs/erc-status-sidebar"))]) (erc-social-graph . [(20150508 504) nil "A social network graph module for ERC." single ((:commit . "e6ef3416a1c5064054bf054d9f0c1c7bf54a9cd0") (:url . "https://github.com/vibhavp/erc-social-graph") (:keywords "erc" "graph"))]) (erc-scrolltoplace . [(20171104 1346) ((emacs (24 0)) (switch-buffer-functions (0 0 1))) "An Erc module to scrolltobottom better with keep-place" single ((:commit . "7539654e4a72edcc5bba07a101961e5bf0a9d449") (:url . "http://github.com/jgkamat/erc-scrolltoplace") (:keywords "erc" "module" "comm" "scrolltobottom" "keep-place"))]) (erc-image . [(20180118 739) nil "Show received image urls in the ERC buffer" single ((:commit . "0fcfe9283f75ec657d513c901c35cdbd48c8d2b5") (:keywords "multimedia"))]) (erc-hl-nicks . [(20160202 1150) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((:commit . "be181920ce6af0ab5d00d1c638e4e598b3998643") (:url . "http://www.github.com/leathekd/erc-hl-nicks"))]) (erc-hipchatify . [(20170314 937) ((emacs (24 4)) (s (1 10 0)) (alert (1 2)) (request (0 2 0))) "Provide emoticons and html rendering for HipChat" single ((:url . "https://bitbucket.org/seanfarley/erc-hipchatify") (:keywords "erc" "bitlbee" "hipchat" "multimedia"))]) (erc-crypt . [(20161228 739) ((cl-lib (0 5))) "Symmetric Encryption for ERC" single ((:commit . "731f9264a5bf08a8fc0b5ce69e72058c86f873a5") (:url . "https://github.com/atomontage/erc-crypt") (:keywords "comm"))]) (erc-colorize . [(20170107 539) nil "Per user colorization of whole message" single ((:commit . "d026a016dcb9d63d9ac66d30627a92a8f1681bbd") (:url . "https://github.com/thisirs/erc-colorize.git") (:keywords "erc" "convenience"))]) (eproject . [(20151205 2130) ((helm (1 6 4))) "assign files to projects, programatically" tar ((:commit . "fdff000d601eb8bdb165db3dc4925c6797308b78") (:keywords "programming" "projects"))]) (eprime-mode . [(20140513 1116) nil "An E-prime checking mode for Emacs" single ((:commit . "17a481af26496be91c07139a9bfc05cfe722506f") (:url . "https://github.com/AndrewHynes/eprime-mode") (:keywords "e-prime" "english" "grammar"))]) (epresent . [(20160410 1901) ((org (8)) (cl-lib (0 5))) "Simple presentation mode for Emacs Org-mode" single ((:commit . "6c8abedcf46ff08091fa2bba52eb905c6290057d") (:url . "https://github.com/dakrone/epresent") (:keywords "gui"))]) (epm . [(20161027 34) ((emacs (24 3)) (epl (0 8))) "Emacs Package Manager" tar ((:commit . "ab3d194fc4d11520d6b9bce4746d7242f3f1606a") (:url . "https://github.com/xuchunyang/epm"))]) (epl . [(20150517 433) ((cl-lib (0 3))) "Emacs Package Library" single ((:commit . "83797835f729f39b80acba4c7e83d73a2e410e26") (:url . "http://github.com/cask/epl") (:keywords "convenience"))]) (epkg . [(20180112 457) ((closql (0 4 0)) (dash (2 13 0)) (emacs (25 1))) "browse the Emacsmirror package database" tar ((:commit . "c8ab0e5e1fda70113633ac6ee01c0aaecd8a1a99") (:url . "https://github.com/emacscollective/epkg") (:keywords "tools"))]) (epic . [(20170209 1623) ((htmlize (1 47))) "Evernote Picker for Cocoa Emacs" single ((:commit . "a41826c330eb0ea061d58a08cc861b0c4ac8ec4e") (:url . "https://github.com/yoshinari-nomura/epic") (:keywords "evernote" "applescript"))]) (epc . [(20140609 2234) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar ((:commit . "e1bfa5ca163273859336e3cc89b4b6460f7f8cda") (:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc"))]) (eopengrok . [(20160903 2359) ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) "opengrok interface for emacs" single ((:commit . "78f734328aaf19c52720415c037708ece1944c4c") (:keywords "tools"))]) (envdir . [(20160221 1123) ((emacs (24)) (dash (2 10 0)) (f (0 17 2))) "Modify environment according to files in a specified directory" single ((:commit . "f29346c55ccf11d8c75628edc6d430ed63c36917") (:url . "https://github.com/proofit404/envdir-mode"))]) (ensime . [(20171217 1730) ((scala-mode (0 23)) (sbt-mode (0 2)) (yasnippet (0 10 0)) (company (0 9 0)) (dash (2 12 1)) (s (1 11 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar ((:commit . "3d3ab18436ad6089496b3bce1d49c64a86965431") (:url . "https://github.com/ensime/ensime-emacs") (:keywords "languages"))]) (enotify . [(20130407 648) nil "A networked notification system for emacs" tar ((:commit . "7fd2f48ef4ff32c8f013c634ea2dd6b1d1409f80"))]) (eno . [(20160110 234) ((dash (2 12 1)) (edit-at-point (1 0))) "Goto/copy/cut any word/symbol/line in view, similar to ace-jump/easymotion" single ((:commit . "40075bb1ed9e62f42c5799f3d3721734742ed417") (:url . "http://github.com/enoson/eno.el"))]) (enlive . [(20170725 717) nil "query html document with css selectors" single ((:commit . "604a8ca272b6889f114e2b5a13adb5b1dc4bae86") (:url . "http://github.com/zweifisch/enlive") (:keywords "css" "selector" "query"))]) (enh-ruby-mode . [(20180123 1835) ((emacs (24))) "Major mode for editing Ruby files" tar ((:commit . "989f7191078c8c1c46921167f5f96119fad930a5") (:url . "http://github.com/zenspider/Enhanced-Ruby-Mode") (:keywords "languages" "elisp" "ruby"))]) (engine-mode . [(20170812 2007) ((cl-lib (0 5))) "Define and query search engines from within Emacs." single ((:commit . "408932727bb723017eaf6338e50cb6d1266b8df8") (:url . "https://github.com/hrs/engine-mode"))]) (encourage-mode . [(20151128 105) ((emacs (24 4))) "Encourages you in your work. :D" single ((:commit . "99edacf2d94d168d3da0609860dc7253db7c9815") (:url . "https://github.com/halbtuerke/encourage-mode.el") (:keywords "fun"))]) (enclose . [(20121008 914) nil "Enclose cursor within punctuation pairs." tar ((:commit . "2747653e84af39017f503064bc66ed1812a77259"))]) (emr . [(20170811 1057) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1)) (clang-format (0)) (iedit (0 97))) "Emacs refactoring system." tar ((:commit . "d7009b30be810af6bb33c7d99a9b320e2aaeb698") (:keywords "tools" "convenience" "refactoring"))]) (empos . [(20151011 1216) nil "Locate bibtex citations from within emacs" single ((:commit . "7b99ad30e56937adb7e6349777e5a2045597d564") (:url . "http://github.com/dimalik/empos/") (:keywords "citations" "reference" "bibtex" "reftex"))]) (emojify-logos . [(20171125 214) ((emojify (0 4))) "Add logos to emojify" tar ((:commit . "96c74383a7c69e839ba41de3507154ca4ad564a1") (:url . "https://github.com/mxgoldstein/emojify-logos"))]) (emojify . [(20171018 744) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar ((:commit . "001c3adcc521223f6b53a2243635528b2cb7f7e8") (:url . "https://github.com/iqbalansari/emacs-emojify") (:keywords "multimedia" "convenience"))]) (emoji-recall . [(20160723 1508) ((emacs (24))) "How many emoji can you recall from memory?" tar ((:commit . "d9122f8fb1467309260109a1985cd14f18fdf631") (:url . "https://github.com/lujun9972/emoji-recall.el") (:keywords "game"))]) (emoji-fontset . [(20160726 1224) nil "Set font face for Emoji." single ((:commit . "10be897fa5165fd40fd35a89e38c759e008fa775") (:keywords "emoji" "font" "config"))]) (emoji-display . [(20140117 213) nil "emoji displaying module" single ((:commit . "bb4217f6400151a9cfa6d4524b8427f01feb5193") (:url . "https://github.com/ikazuhiro/emoji-display") (:keywords "emoji"))]) (emoji-cheat-sheet-plus . [(20150617 631) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar ((:commit . "96a003127d646a2683d81ca906a17eace0a6413e") (:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords "emacs" "emoji"))]) (emms-state . [(20160504 105) ((emms (0))) "Display track description and playing time in the mode line" single ((:commit . "77930300222333b71eafd495cc1fee3a3585eb23") (:url . "https://github.com/alezost/emms-state.el") (:keywords "emms"))]) (emms-soundcloud . [(20131221 345) ((emms (20131016)) (json (1 2))) "EMMS source for Soundcloud audio sharing platform" single ((:commit . "87e5cbf9609d1f26c24dc834fdeb78b33d453c2b") (:url . "http://github.com/osener/emms-soundcloud") (:keywords "emms" "soundcloud"))]) (emms-player-simple-mpv . [(20170930 2216) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar ((:commit . "1af7838037c86872e897bea872d279ff080c28c6") (:url . "https://github.com/momomo5717/emms-player-simple-mpv") (:keywords "emms" "mpv"))]) (emms-player-mpv-jp-radios . [(20171211 609) ((emacs (24)) (cl-lib (0 5)) (emms (4 0)) (emms-player-simple-mpv (0 1 7))) "EMMS players and stream lists of Japan radio stations" tar ((:commit . "686be9b27537bdc7987f1ab0525393208bfc480b") (:url . "https://github.com/momomo5717/emms-player-mpv-jp-radios") (:keywords "emms" "mpv" "radio"))]) (emms-player-mpv . [(20170628 303) ((emms (0))) "mpv support for EMMS" single ((:commit . "8c72282c98f9b10601e9a6901277040cda4b33aa") (:url . "https://github.com/dochang/emms-player-mpv/") (:keywords "multimedia" "emms" "mpv"))]) (emms-mode-line-cycle . [(20160221 320) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single ((:commit . "2c2f395e484a1d345050ddd61ff5fab71a92a6bc") (:url . "https://github.com/momomo5717/emms-mode-line-cycle") (:keywords "emms" "mode-line"))]) (emms-mark-ext . [(20130528 2027) ((emms (3 0))) "Extra functions for emms-mark-mode and emms-tag-edit-mode" single ((:commit . "ec68129e3e9e469e5bf160c6a1b7030e322f3541") (:url . "https://github.com/vapniks/emms-mark-ext") (:keywords "convenience" "multimedia"))]) (emms-info-mediainfo . [(20131223 500) ((emms (0))) "Info-method for EMMS using medianfo" single ((:commit . "bce16eae9eacd38719fea62a9755225a888da59d") (:keywords "multimedia" "processes"))]) (emms-bilibili . [(20180102 2018) ((emacs (25)) (cl-lib (0 5))) "Play Bilibili in EMMS." single ((:commit . "294bca3dfc42fe3a55fb326ab39bc0fcfc8c5090") (:url . "https://github.com/stardiviner/emms-bilibili") (:keywords "emms" "bilibili"))]) (emms . [(20180103 520) ((cl-lib (0 5))) "The Emacs Multimedia System" tar ((:commit . "3a8d16d91edae81ffb2bb9efa12d41712edfd4f8") (:url . "http://www.gnu.org/software/emms/") (:keywords "emms" "mp3" "mpeg" "multimedia"))]) (emmet-mode . [(20161113 2158) nil "Unofficial Emmet's support for emacs" single ((:commit . "5af39aaef59125fd80901f275c23c89493f9d133") (:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience"))]) (emlib . [(20161126 723) ((dash (2 13 0)) (cl-lib (0 5))) "A Machine Learning library for Emacs" tar ((:commit . "dea2af00f551ea580c641d86dd69219f7d4f3685") (:url . "https://github.com/narendraj9/emlib.git") (:keywords "data" "ai" "neural networks" "ml"))]) (embrace . [(20171031 1133) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" single ((:commit . "dd5da196e5bcc5e6d87e1937eca0c21da4334ef2") (:keywords "extensions"))]) (ember-yasnippets . [(20160526 958) ((yasnippet (0 8 0))) "Snippets for Ember.js development" tar ((:commit . "3b5bd01569646237bf1b540d097e12f9118b67f4") (:keywords "tools" "abbrev" "languages"))]) (ember-mode . [(20171208 559) ((cl-lib (0 5))) "Ember navigation mode for emacs" single ((:commit . "755256782478cb724edd8f111225d7c8d342f90c") (:keywords "ember" "ember.js" "emberjs"))]) (emaps . [(20160910 521) nil "utilities for working with keymaps." single ((:commit . "728eb6eeae46194f32a01bafa349ece520bc7a10") (:url . "https://github.com/GuiltyDolphin/emaps") (:keywords "convenience" "keyboard" "keymap" "utility"))]) (emamux-ruby-test . [(20130812 939) ((emamux (0 1)) (projectile (0 9 1))) "Ruby test with emamux" single ((:commit . "23b73c650573b340351a919da3da416acfc2ac84") (:url . "https://github.com/syohex/emamux-ruby-test"))]) (emamux . [(20170226 1937) ((emacs (24 3))) "Interact with tmux" single ((:commit . "39f57786b2cdd3844888df42d71c7bd251f07158") (:url . "https://github.com/syohex/emacs-emamux"))]) (emacsshot . [(20161018 743) nil "Snapshot a frame or window from within Emacs" tar ((:commit . "11ace77ab718292d05b82d93178380aff591468b") (:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience"))]) (emacsql-sqlite . [(20171218 1827) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar ((:commit . "616dde37524f47246bbb161f20d3f5f090f10fbf") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql-psql . [(20171218 1827) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for PostgreSQL via psql" tar ((:commit . "616dde37524f47246bbb161f20d3f5f090f10fbf") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql-mysql . [(20171218 1827) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for MySQL" single ((:commit . "616dde37524f47246bbb161f20d3f5f090f10fbf") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql . [(20171218 1903) ((emacs (25 1))) "high-level SQL database front-end" tar ((:commit . "616dde37524f47246bbb161f20d3f5f090f10fbf") (:url . "https://github.com/skeeto/emacsql"))]) (emacsist-view . [(20160426 523) nil "Mode for viewing emacsist.com" single ((:commit . "f67761259ed779a9bc95c9a4e0474522990c5c6b") (:url . "https://github.com/lujun9972/emacsist-view") (:keywords "convenience" "usability"))]) (emacsc . [(20161028 1006) nil "helper for emacsc(1)" tar ((:commit . "421e0c567358769e32f670ae8e949d99abae0c28") (:url . "https://github.com/knu/emacsc") (:keywords "tools"))]) (emacsagist . [(20140331 1130) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single ((:commit . "aba342ba59c254a88017f25e9fb7a8cd6f2fda83") (:url . "http://github.com/echosa/emacsagist") (:keywords "tools"))]) (emacs-setup . [(20120727 726) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar ((:commit . "c783ec13e3b39093fffb6f6d64dccdce8ce4d375"))]) (elx . [(20180114 707) ((emacs (24 4))) "extract information from Emacs Lisp libraries" single ((:commit . "127fd4fca8ac6470cfda62f47bb1c29859862cfc") (:url . "https://github.com/emacscollective/elx") (:keywords "docs" "libraries" "packages"))]) (elwm . [(20150817 307) ((dash (1 1 0))) "Minimalistic window manager for emacs" single ((:commit . "c33b183f006ad476c3a44dab316f580f8b369930") (:url . "https://github.com/Fuco1/elwm") (:keywords "docs"))]) (elvish-mode . [(20170913 1939) ((emacs (24 3))) "Defines a major mode for Elvish" single ((:commit . "9cf31b453ac79b011b84e83ca11c964c4e647649") (:url . "https://github.com/ALSchwalm/elvish-mode"))]) (elscreen-separate-buffer-list . [(20161106 1958) ((emacs (24 4)) (elscreen (1 4 6))) "Separate buffer list manager for elscreen" single ((:commit . "7652d827aa1b8c1b04303c5b4b0bda5e8f85565e") (:keywords "elscreen"))]) (elscreen-multi-term . [(20151021 1933) ((emacs (24 4)) (elscreen (1 4 6)) (multi-term (1 3))) "Multi term for elscreen" single ((:commit . "7b6048a0dd80f69460a62bbc6f1af8856141a5ea") (:keywords "elscreen" "multi term"))]) (elscreen-mew . [(20160504 1135) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:commit . "c90a23441d836da14a1cb12788432308ba58e2b6") (:url . "https://github.com/masutaka/elscreen-mew"))]) (elscreen-fr . [(20160920 253) ((elscreen (0)) (seq (1 11))) "Use frame title as screen tab" single ((:commit . "b9c11f80d277086d5d5bf88623e15fc7adbbbe3c") (:url . "http://github.com/rocher/elscreen-fr"))]) (elscreen-buffer-group . [(20170808 1825) ((emacs (24 4)) (elscreen (0)) (cl-lib (0 5))) "elscreen buffer group" single ((:commit . "a3cd4d7eae3cca87bede4b39a46d3c0641f8cd06") (:url . "https://github.com/jeffgran/elscreen-buffer-group") (:keywords "buffer"))]) (elscreen . [(20160613 251) nil "Emacs window session manager" tar ((:commit . "35c68a7503179fa618639e1c90b43bec9812a988"))]) (elquery . [(20170624 1635) ((emacs (25 1)) (s (1 11 0)) (dash (2 13 0))) "The HTML library for elisp." single ((:commit . "a5f7f3545330280991dd6334f4ce4f72aaa44145") (:url . "https://github.com/AdamNiederer/elquery") (:keywords "html" "hypermedia" "tools" "webscale"))]) (elpygen . [(20171225 936) ((emacs (25)) (yasnippet (0 8 0))) "Generate a Python function/method using a symbol under point" single ((:commit . "21929c997a05968f9eefe52b85a76ceaab3b0d81") (:url . "https://github.com/vkazanov/elpygen") (:keywords "python" "languages" "tools"))]) (elpy . [(20180119 54) ((company (0 9 2)) (emacs (24 4)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar ((:commit . "1fc5e18c3e26f085167201147f9fe2bfb6fd167a"))]) (elpa-mirror . [(20180113 2321) ((emacs (24 4))) "Create local package repository so package upgrade never breaks" single ((:commit . "3fedb1ca6f84cdbfc27723d6906b67a0e2ca2972") (:url . "http://github.com/redguardtoo/elpa-mirror") (:keywords "cloud" "mirror" "elpa"))]) (elpa-clone . [(20170502 514) ((emacs (24 4)) (cl-lib (0))) "Clone ELPA archive" single ((:commit . "92f4c9d3570ad002575a90d0cc4a522c203a1110") (:url . "https://github.com/dochang/elpa-clone") (:keywords "comm" "elpa" "clone" "mirror"))]) (elpa-audit . [(20141023 631) nil "Handy functions for inspecting and comparing package archives" single ((:commit . "727da50e626977351aff2675b6540a36818bbbe6") (:url . "https://github.com/purcell/elpa-audit") (:keywords "maint"))]) (eloud . [(20160731 857) ((emacs (24 4))) "A lightweight, interactive screen reader" single ((:commit . "82c97918585bd2a749251ae87d7732ca9d856c16") (:url . "https://github.com/smythp/eloud") (:keywords "extensions"))]) (elogcat . [(20151120 1641) ((s (1 9 0)) (dash (2 10 0))) "logcat interface" single ((:commit . "4f311b7a07565b0d060334bc68edb36f2bff703f") (:keywords "tools"))]) (elog . [(20160724 1555) ((eieio (1 3))) "logging library extended from logito" single ((:commit . "a67237d9813c7591614d95e2ef31cc5e5ed3f31b") (:keywords "lisp" "tool" "log"))]) (elnode . [(20140203 1506) ((web (0 1 4)) (dash (1 1 0)) (noflet (0 0 7)) (s (1 5 0)) (creole (0 8 14)) (fakir (0 1 6)) (db (0 0 5)) (kv (0 0 17))) "The Emacs webserver." tar ((:commit . "3f2bf225853e40a2a10386ee5ae0bd6ba5d44ce9"))]) (elmine . [(20170511 20) ((s (1 10 0))) "Redmine API access via elisp." single ((:commit . "432d2f2f7cb5b533f25b993d1001abcadcebe8ed") (:url . "http://github.com/leoc/elmine") (:keywords "tools"))]) (elmacro . [(20170312 356) ((s (1 11 0)) (dash (2 13 0))) "Convert keyboard macros to emacs lisp" single ((:commit . "97c8ca4041e5082df243ad6371a091759c30d0f7") (:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience"))]) (elm-yasnippets . [(20160331 2224) ((yasnippet (0 8 0))) "Yasnippets for Elm" tar ((:commit . "45a11a0cef0c36633fb3477d3dc4167e82779ba4") (:keywords "snippets"))]) (elm-mode . [(20180114 9) ((f (0 17)) (let-alist (1 0 4)) (seq (2 2)) (s (1 7 0)) (emacs (24 4)) (dash (2 13 0))) "Major mode for Elm" tar ((:commit . "09c6e62e14a2c9afaad03a867c7a268b6bc68ab0") (:url . "https://github.com/jcollard/elm-mode"))]) (elixir-yasnippets . [(20150417 539) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar ((:commit . "980ca7626c14ef0573bec0035ec7942796062783"))]) (elixir-mode . [(20170918 2231) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar ((:commit . "861788186f4dbd500209656dcf38a15b3efe74dd") (:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir"))]) (elisp-slime-nav . [(20160128 1109) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ((:commit . "34938422929800839e2f935aca890cd4a229ca99") (:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp"))]) (elisp-sandbox . [(20131116 1042) nil "Evaluate EmacsLisp expressions in a sandbox" single ((:commit . "d894d68934ef09c42f72ac4e1173a0bedc23f139") (:url . "https://github.com/joelmccracken/elisp-sandbox") (:keywords "lisp"))]) (elisp-refs . [(20180111 1431) ((dash (2 12 0)) (loop (1 2)) (s (1 11 0))) "find callers of elisp functions or macros" single ((:commit . "eee751a6120f925cdffcfbb6a4545e599b953e94") (:keywords "lisp"))]) (elisp-lint . [(20150430 1558) nil "basic linting for Emacs Lisp" single ((:commit . "1168b12575f1ed54ee523d34a90757459a6e42a3") (:url . "http://github.com/nschum/elisp-lint/") (:keywords "lisp"))]) (elisp-format . [(20160508 252) nil "Format elisp code" single ((:commit . "03cc293eb2f78ec58fc1d84279af06816a04b979") (:url . "https://github.com/Yuki-Inoue/elisp-format"))]) (elisp-docstring-mode . [(20170304 815) nil "Major mode for editing elisp docstrings." single ((:commit . "f512e509dd690f65133e55563ebbfd2dede5034f") (:keywords "languages"))]) (elisp-depend . [(20161230 750) nil "Parse depend libraries of elisp file." single ((:commit . "e4b201ac7dcee4489d58800c299fd04aaa61d07a"))]) (elhome . [(20161025 1342) ((initsplit (20120630))) "A framework for a \"home\" Emacs configuration" tar ((:commit . "e789e806469af3e9705f72298683c21f6c3a516d") (:url . "http://github.com/demyanrogozhin/elhome") (:keywords "lisp"))]) (elfeed-web . [(20180121 1036) ((simple-httpd (1 4 3)) (elfeed (1 4 0)) (emacs (24 1))) "web interface to Elfeed" tar ((:commit . "2f36a18065c38ac5aa1abb3a8f39f9a3eabf49ea"))]) (elfeed-protocol . [(20171214 2319) ((emacs (24 4)) (elfeed (2 1 1)) (cl-lib (0 5))) "Provide owncloud/ttrss protocols for elfeed" tar ((:commit . "97049eb980ce1cc2b871e4c7819133f1e4936a83") (:url . "https://github.com/fasheng/elfeed-protocol") (:keywords "news"))]) (elfeed-org . [(20171113 356) ((elfeed (1 1 1)) (org (8 2 7)) (dash (2 10 0)) (s (1 9 0)) (cl-lib (0 5))) "Configure elfeed with one or more org-mode files" single ((:commit . "1a2bacc160d4e164f012ebf23f3ecccac85df18f") (:url . "https://github.com/remyhonig/elfeed-org") (:keywords "news"))]) (elfeed-goodies . [(20171126 2251) ((popwin (1 0 0)) (powerline (2 2)) (elfeed (2 0 0)) (cl-lib (0 5)) (noflet (0 0 10)) (ace-jump-mode (2 0))) "Elfeed goodies" tar ((:commit . "fc0c3e72f9fcd7bbf5237f6f2323bc666e8240b4") (:url . "https://github.com/algernon/elfeed-goodies"))]) (elfeed . [(20180123 1336) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar ((:commit . "2f36a18065c38ac5aa1abb3a8f39f9a3eabf49ea"))]) (elf-mode . [(20161009 48) ((emacs (24 3))) "Show symbols in binaries" single ((:commit . "cd280d683cd3341d8bb31af6db7e3b74a133e6ab") (:url . "https://github.com/abo-abo/elf-mode") (:keywords "matching"))]) (elein . [(20120120 316) nil "running leiningen commands from emacs" single ((:commit . "d4c0c0491dbb7c90e953d7a16172107c37103605") (:url . "https://github.com/remvee/elein") (:keywords "tools" "processes"))]) (electric-spacing . [(20161209 1157) nil "Insert operators with surrounding spaces smartly" single ((:commit . "9d0f8a213133f2619a4e9dfbba3b00d4348c07b0"))]) (electric-operator . [(20180114 1000) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" tar ((:commit . "63661980cef82a8032108f5ce14d5bd4f44d1255") (:url . "https://github.com/davidshepherd7/electric-operator") (:keywords "electric"))]) (electric-case . [(20150417 412) nil "insert camelCase, snake_case words without \"Shift\"ing" single ((:commit . "bac64e772107e3dc721a9819f63b9ebdc28a81f7") (:url . "http://hins11.yu-yake.com/"))]) (eldoc-overlay . [(20171219 140) ((emacs (24 3)) (inline-docs (1 0 1)) (quick-peek (1 0))) "Display eldoc with contextual documentation overlay." single ((:commit . "a391396f4cdf30a2f27a4c426b58b44ab3d0f0d0") (:url . "https://github.com/stardiviner/eldoc-overlay") (:keywords "documentation" "eldoc" "overlay"))]) (eldoc-eval . [(20150512 506) nil "Enable eldoc support when minibuffer is in use." single ((:commit . "e87b89f89a2aed0bb3b31c014fc1b72f00413866"))]) (elcord . [(20180121 1636) ((emacs (25))) "Allows you to integrate Rich Presence from Discord" tar ((:commit . "3a13d7b1cbbb9b586dae8e79fe4c8a8a09d8146c") (:url . "https://github.com/Zulu-Inuoe/elcord") (:keywords "games"))]) (elbank . [(20180123 109) ((emacs (25)) (seq (2 16))) "Personal finances reporting application" tar ((:commit . "e4b532373a32889b8ab3389bd3e726dff5dd0bcf") (:keywords "tools" "personal-finances"))]) (el2org . [(20170804 2142) ((emacs (25 1))) "Convert elisp file to org file" single ((:commit . "4a33469cd305e581603d7ef63bc2a1f2156f2e2e") (:url . "https://github.com/tumashu/el2org") (:keywords "convenience"))]) (el2markdown . [(20170630 1158) nil "Convert commentary section of elisp files to markdown." single ((:commit . "368d99313683cd943c99feaffca356be60bdb636") (:url . "https://github.com/Lindydancer/el2markdown"))]) (el-x . [(20140111 1401) nil "main entry point for el-x package" tar ((:commit . "e7c333d4fc31a90f4dca951efe21129164b42605") (:keywords "lisp"))]) (el-spy . [(20131226 1208) nil "Mocking framework for Emacs lisp. It also support spy, proxy." single ((:commit . "b1dead9d1877660856ada22d906ac4e54695aec7") (:url . "https://github.com/uk-ar/el-spy") (:keywords "test"))]) (el-sprunge . [(20140106 1739) ((web-server (20140105 2246)) (htmlize (20130207 1202)) (emacs (24 3))) "Command line paste server with Emacs highlighting" tar ((:commit . "37855ec60aeb4d565c49a4d711edc7341e9a22cb"))]) (el-spice . [(20140805 1138) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar ((:commit . "65d9ec84b581a5867eebbc58de93958e992ca80d") (:url . "https://github.com/vedang/el-spice") (:keywords "languages" "extensions"))]) (el-spec . [(20121018 4) nil "ruby's rspec like syntax test frame work" single ((:commit . "1dbc465401d4aea5560318c4f13ff30920a0718d") (:url . "https://github.com/uk-ar/el-spec") (:keywords "test"))]) (el-pocket . [(20170922 549) ((web (0 5 2)) (emacs (24))) "Read and write to Pocket (getpocket.com)" single ((:commit . "a80abfb67efe68ada1d7d0a73aecee57e763baaa") (:url . "http://github.com/pterygota/el-pocket") (:keywords "emacs" "pocket" "bookmarks"))]) (el-patch . [(20171016 1743) ((emacs (25))) "Future-proof your Emacs Lisp customizations!" single ((:commit . "a5999539e42fb41d2b31f09022b9efe27ae76684") (:url . "https://github.com/raxod502/el-patch") (:keywords "extensions"))]) (el-mock . [(20170824 1254) nil "Tiny Mock and Stub framework in Emacs Lisp" single ((:commit . "5df1d3a956544f1d3ad0bcd81daf47fff33ab8cc") (:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest"))]) (el-init-viewer . [(20150303 28) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single ((:commit . "dbcb4418fe342dfd7da805f2d7caf1def68db7f9") (:url . "https://github.com/HKey/el-init-viewer"))]) (el-init . [(20150728 220) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single ((:commit . "6b45551b8ed473c8a0c897b743b0378a3501556c") (:url . "https://github.com/HKey/el-init"))]) (el-get . [(20180110 753) nil "Manage the external elisp bits and pieces you depend upon" tar ((:commit . "f64264389c9d261f4487e20cf699be35e05e61e9") (:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki"))]) (el-autoyas . [(20120918 617) nil "Automatically create Emacs-Lisp Yasnippets" tar ((:commit . "bde0251ecb504f585dfa27c205c8e312655310cc") (:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet"))]) (ejc-sql . [(20171227 259) ((emacs (24 4)) (clomacs (0 0 2)) (cider (0 14)) (dash (2 12 1)) (auto-complete (1 5 1)) (spinner (1 7 1)) (direx (1 0 0))) "Emacs SQL client uses Clojure JDBC." tar ((:commit . "afb3e6f1e82abec5407c7a3335bf1c70fa3690d6") (:url . "https://github.com/kostafey/ejc-sql") (:keywords "sql" "jdbc"))]) (eink-theme . [(20170717 807) nil "E Ink color theme" single ((:commit . "4c990bb3428f725735fa1f733ef4c5ad61f632b0") (:url . "http://github.com/maio/eink-emacs"))]) (ein-mumamo . [(20150301 1628) ((ein (0 4))) "Multiple major mode support for Emacs IPython Notebook" single ((:commit . "028fefec499598add1a87b92ed991891f38f0c7b"))]) (ein . [(20171128 516) ((websocket (1 7)) (auto-complete (1 4 0)) (request (0 3)) (deferred (0 5)) (request-deferred (0 2 0)) (cl-generic (0 3)) (dash (2 13 0)) (s (1 11 0)) (skewer-mode (1 6 2))) "Emacs IPython Notebook" tar ((:commit . "1bd6155005ee9749e51bcc8232c80690484c8ca2"))]) (eimp . [(20120826 1339) nil "Emacs Image Manipulation Package" single ((:commit . "2e7536fe6d8f7faf1bad7a8ae37faba0162c3b4f") (:keywords "files" "frames"))]) (eide . [(20171229 1435) nil "IDE interface" tar ((:commit . "faae6f1384826d18f70b28826dc528d70e91a5c9"))]) (ego . [(20180120 849) ((emacs (24 5)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (simple-httpd (1 4 5))) "a static site generator based on org mode, forked from org-page." tar ((:commit . "78b284b1e0582d4e32db16914ade6a1e9bb73e72"))]) (egison-mode . [(20160603 103) nil "Egison editing mode" single ((:commit . "0a62375f65f0a947bb2f8ec4743514cf4b6c7f3e") (:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el"))]) (egg . [(20160330 2047) nil "Emacs Got Git - Emacs interface to Git" tar ((:commit . "cadc5c7fd21142d7ea41732200ab52eac0b96d3f") (:keywords "git" "version control" "release management"))]) (eg . [(20170830 115) ((cl-lib (0 5)) (emacs (24 3))) "Norton Guide reader" single ((:commit . "1c7f1613d2aaae728ef540305f6ba030616f86bd") (:url . "https://github.com/davep/eg.el") (:keywords "docs"))]) (efire . [(20151009 1331) ((circe (1 2))) "Use campfire from Emacs" single ((:commit . "91a644662afb352475efad0b377713656f131e5c") (:url . "https://github.com/capitaomorte/efire") (:keywords "convenience" "tools"))]) (edts . [(20171030 9) ((auto-complete (1 3 1)) (auto-highlight-symbol (1 53)) (dash (2 13)) (erlang (2 4 1)) (f (0 19 0)) (popup (0 4)) (s (1 11 0))) "Erlang Development Tool Suite" tar ((:commit . "6ef4bdf571235ee1b078db321402270cabff7fda"))]) (edn . [(20160215 419) ((cl-lib (0 3)) (emacs (24 1)) (peg (0 6))) "Support for reading and writing the edn data format from elisp" single ((:commit . "be9e32d1b49e35247b263b0243df7cfdc8d413ab") (:url . "https://www.github.com/expez/edn.el") (:keywords "edn" "clojure"))]) (editorconfig-domain-specific . [(20160705 802) ((cl-lib (0 5)) (editorconfig (0 6 0))) "Apply brace style and other \"domain-specific\" EditorConfig properties" single ((:commit . "0142ddff7b3293c82b0a83ad2c3edd6ee1a84ddd") (:url . "https://github.com/lassik/editorconfig-emacs-domain-specific") (:keywords "editorconfig" "util"))]) (editorconfig-custom-majormode . [(20170509 141) ((editorconfig (0 6 0))) "Decide major-mode and mmm-mode from EditorConfig" single ((:commit . "b5350d20b2730a0f029c9e1d651e50cf9a809fa9") (:url . "https://github.com/10sr/editorconfig-custom-major-mode-el") (:keywords "editorconfig" "util"))]) (editorconfig-charset-extras . [(20170712 108) ((editorconfig (0 6 0))) "Extra EditorConfig Charset Support" single ((:commit . "bf2d23c57a485ee41d21a9a0015d5bd52baabf85") (:url . "https://github.com/10sr/editorconfig-charset-extras-el") (:keywords "tools"))]) (editorconfig . [(20171208 2036) ((cl-lib (0 5))) "EditorConfig Emacs Plugin" tar ((:commit . "15e26cf5a5a656735fa25bfa75164f0893f4688a") (:url . "https://github.com/editorconfig/editorconfig-emacs#readme"))]) (edit-server-htmlize . [(20130329 1548) ((edit-server (1 9))) "(de)HTMLization hooks for edit-server.el" single ((:commit . "e7f8dadfabe869c77ca241cd6fbd4c52bd908392") (:url . "https://github.com/frobtech/edit-server-htmlize"))]) (edit-server . [(20180120 752) nil "server that responds to edit requests from Chrome" single ((:commit . "f01f5775760d73a8b0975d8caf009c3b1e7b2229") (:url . "https://github.com/stsquad/emacs_chrome"))]) (edit-list . [(20100930 743) nil "edit a single list" single ((:commit . "f460d3f9e208a4e606fe6ded307f1b011916ca71") (:url . "http://mwolson.org/static/dist/elisp/edit-list.el"))]) (edit-indirect-region-latex . [(20161128 2245) ((emacs (24 3)) (ht (2 2)) (edit-indirect (0 1 4))) "Edit LaTeX regions in separate buffers, e.g. for English grammar checks" single ((:commit . "05043f2c0c9838947d3ca4b51b695deb7c47612e") (:url . "https://github.com/niitsuma/edit-indirect-region-latex"))]) (edit-indirect . [(20170928 430) ((emacs (24 3))) "Edit regions in separate buffers" single ((:commit . "032ac0ec690d4999d564fd882588c7a197efe8dd") (:url . "https://github.com/Fanael/edit-indirect"))]) (edit-color-stamp . [(20130529 1033) ((es-lib (0 2)) (cl-lib (1 0))) "Edit a hex color stamp, using a QT or the internal color picker" tar ((:commit . "32dc1ca5bcf3dcf83fad5e39b55dc5b77becb3d3") (:url . "https://github.com/sabof/edit-color-stamp"))]) (edit-at-point . [(20150716 624) nil "edit(copy,cut..) current things(word,symbol..) under cursor" single ((:commit . "3b800c11685102e1eab62ec71c5fc1589ebb81a7") (:url . "http://github.com/enoson/edit-at-point.el"))]) (edebug-x . [(20130615 2325) nil "Extensions for Edebug" single ((:commit . "a2c2c42553d3bcbd5ac11898554865acbed1bc46") (:url . "https://github.com/ScottyB/edebug-x") (:keywords "extensions"))]) (ede-php-autoload-drupal . [(20170316 1458) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Drupal support for ede-php-autoload" single ((:commit . "54a04241d94fabc4f4d16ae4dc8ba4f0c6e3b435") (:keywords "programming" "php" "drupal"))]) (ede-php-autoload-composer-installers . [(20170221 1226) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Composer installers support for ede-php-autoload" single ((:commit . "7840439802c7d11ee086bbf465657f3da12f9f66") (:url . "https://github.com/xendk/ede-php-autoload-composer-installers") (:keywords "programming" "php"))]) (ede-php-autoload . [(20170428 933) nil "Simple EDE PHP Project" tar ((:commit . "65e502602dbc623257a820245d41f94cf2e1f07d") (:url . "https://github.com/stevenremot/ede-php-autoload") (:keywords "php" "project" "ede"))]) (ede-compdb . [(20150920 1333) ((ede (1 2)) (semantic (2 2)) (cl-lib (0 4))) "Support for compilation database projects in EDE" single ((:commit . "d6d8466cd62876fc90adeff5875a1a584fd846cd") (:keywords "development" "ninja" "build" "cedet" "ede"))]) (edbi-sqlite . [(20160221 1123) ((emacs (24)) (edbi (0 1 3))) "Open sqlite files with edbi" single ((:commit . "52cb9ca1af7691b592f2cfd2f007847e7a4ccd5f") (:url . "https://github.com/proofit404/edbi-sqlite"))]) (edbi-minor-mode . [(20160706 747) ((edbi (0 1 3))) "Use edbi with regular SQL files." single ((:commit . "566a2141a6eb9d9d5d7e1bd7c251d1c5e8f0d2ec") (:url . "https://github.com/proofit404/edbi-minor-mode"))]) (edbi-django . [(20160221 1123) ((emacs (24)) (edbi (0 1 3)) (f (0 17 1))) "Run edbi with django settings" tar ((:commit . "61c70d3a727ff28c1c7d1eb61af1efba7a268b8f") (:url . "https://github.com/proofit404/edbi-django"))]) (edbi-database-url . [(20160221 1123) ((emacs (24)) (edbi (0 1 3))) "Run edbi with database url" single ((:commit . "d56c580268cd93651998c4c6b1c5558e6b6ca90f") (:url . "https://github.com/proofit404/edbi-database-url"))]) (edbi . [(20160224 1741) ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) "Emacs Database Interface" tar ((:commit . "6f50aaf4bde75255221f2292c7a4ad3fa9d918c0"))]) (ecukes . [(20171216 408) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar ((:commit . "3a77ba9f1064c2bca47b401974c009e65727c46e"))]) (eclipse-theme . [(20160430 322) nil "Theme based on Eclipse circa 2010" single ((:commit . "dc54d9312d97210823b922038076e2b1b132eff2") (:url . "https://github.com/abo-abo/eclipse-theme") (:keywords "themes"))]) (eclim . [(20171113 1754) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (0 10 0))) "An interface to the Eclipse IDE." tar ((:commit . "4f27d04c30a026f24c0ff18c3a7d36e3fb5b57a5"))]) (ecb . [(20170728 1221) nil "a code browser for Emacs" tar ((:commit . "1330a44cf3c171781083b0b926ab7622f64e6e81") (:keywords "browser" "code" "programming" "tools"))]) (ebib . [(20180111 30) ((dash (2 5 0)) (seq (2 15)) (parsebib (2 3)) (emacs (24 4))) "a BibTeX database manager" tar ((:commit . "8c4735fbd7864a8420a16378ac2240fa60af5332") (:keywords "text" "bibtex"))]) (ebf . [(20160211 958) ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5))) "brainfuck language transpiler to Emacs Lisp" tar ((:commit . "4cd9c26354d8be6571354b2954d21fba882e78a2") (:url . "http://github.com/rexim/ebf"))]) (ebal . [(20171231 2216) ((emacs (24 4)) (f (0 18 0))) "Emacs interface to Cabal and Stack" single ((:commit . "3a7a9a66efed30416e2013da80fed2f79b91def1") (:url . "https://github.com/mrkkrp/ebal") (:keywords "convenience" "cabal" "haskell"))]) (easy-repeat . [(20150516 148) ((emacs (24 4))) "Repeat easily" single ((:commit . "060f0e6801c82c40c06961dc0528a00e18947a8c") (:url . "https://github.com/xuchunyang/easy-repeat.el") (:keywords "repeat" "convenience"))]) (easy-kill-extras . [(20161028 504) ((easy-kill (0 9 4))) "Extra functions for easy-kill." tar ((:commit . "e60a74d7121eff7c263098aea2901cc05a5f6acd") (:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience"))]) (easy-kill . [(20151030 2229) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single ((:commit . "e2b667f651a3531164d24ea4cbcd8c34fba0e17f") (:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience"))]) (easy-jekyll . [(20180108 559) ((emacs (24 4))) "Major mode managing jekyll blogs" single ((:commit . "9a66d5c5dddac7d5b924df0c3bb414d3f797d8a5") (:url . "https://github.com/masasam/emacs-easy-jekyll"))]) (easy-hugo . [(20180103 1855) ((emacs (24 4))) "Write blogs made with hugo by markdown or org-mode" single ((:commit . "62a79c5d359674c95719dd129260e4e1f6e760bd") (:url . "https://github.com/masasam/emacs-easy-hugo"))]) (easy-escape . [(20161209 744) nil "Improve readability of escape characters in regular expressions" single ((:commit . "63fa5fcf9a53b7d3c1e872081e65afad5a722ba8") (:url . "https://github.com/cpitclaudel/easy-escape") (:keywords "convenience" "lisp" "tools"))]) (easy-after-load . [(20170817 531) nil "eval-after-load for all files in a directory" single ((:commit . "29e20145da49ac9ea40463c552130777408040de") (:url . "https://github.com/pd/easy-after-load"))]) (eacl . [(20171109 40) ((emacs (24 3)) (ivy (0 9 1))) "Auto-complete line(s) by grepping project" single ((:commit . "0ee57b495036b6c1b54d668e84be373f8a1c8d9a") (:url . "http://github.com/redguardtoo/eacl") (:keywords "abbrev" "convenience" "matching"))]) (e2wm-term . [(20141009 608) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single ((:commit . "65b5ac88043d5c4048920a048f3599904ca55981") (:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager"))]) (e2wm-sww . [(20140524 158) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single ((:commit . "1063f9854bd34db5ac771cd1036cecc89834729d") (:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager"))]) (e2wm-svg-clock . [(20150106 506) ((e2wm (20130225 1602)) (svg-clock (0 4))) "e2wm plugin for svg-clock" single ((:commit . "d425925e3afffcbe2ff74edc80b714e4319d4c94") (:url . "https://github.com/myuhe/e2wm-svg-clock.el") (:keywords "convenience" "e2wm"))]) (e2wm-pkgex4pl . [(20140525 347) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single ((:commit . "7ea994450727190c4f3cb46cb429ba41b692ecc0") (:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl"))]) (e2wm-direx . [(20170509 601) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single ((:commit . "b47f19d15436cc28233a812a1150689f61d11046") (:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience"))]) (e2wm-bookmark . [(20151122 2121) ((e2wm (1 2))) "Bookmark plugin for e2wm.el" single ((:commit . "bad816b6d8049984d69bcd277b7d325fb84d55eb") (:keywords "convenience"))]) (e2wm-R . [(20151230 126) ((e2wm (1 3)) (inlineR (1 0)) (ess (15 3))) "some e2wm plugin and perspective for GNU R" single ((:commit . "4350601ee1a96bf89777b3f09f1b79b88e2e6e4d") (:url . "https://github.com/myuhe/e2wm-R.el") (:keywords "convenience" "e2wm"))]) (e2wm . [(20170214 1636) ((window-layout (1 4))) "simple window manager for emacs" tar ((:commit . "4353d3394c77a49f8f0291c239858c8c5e877549") (:keywords "tools" "window manager"))]) (e2ansi . [(20150220 1513) nil "Syntax highlighting support for `less', powered by Emacs." tar ((:commit . "bd047d3d6ad02a0679582d5786afe9aee656da90") (:url . "https://github.com/Lindydancer/e2ansi") (:keywords "faces" "languages"))]) (dynamic-spaces . [(20171027 1151) nil "When editing, don't move text separated by spaces" single ((:commit . "97ae8480c257ba573ca3d06dbf602f9b23c41d38") (:url . "https://github.com/Lindydancer/dynamic-spaces") (:keywords "convenience"))]) (dynamic-ruler . [(20160602 108) nil "Displays a dynamic ruler at point." single ((:commit . "c9c0de6fe5721f06b50e01d9b4684b519c71b367") (:url . "http://rocher.github.io/dynamic-ruler") (:keywords "ruler" "tools" "convenience"))]) (dynamic-fonts . [(20140731 526) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single ((:commit . "ab0c65accbdb59acaed5b263327e22ec019b3e82") (:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames"))]) (dylan-mode . [(20160405 1514) nil "Major mode for editing Dylan programs." tar ((:commit . "7e8ba16bf125f0066d3e1caeefaba94a6d32ac72"))]) (dyalog-mode . [(20171211 722) ((cl-lib (0 2)) (emacs (24))) "Major mode for editing Dyalog APL source code" tar ((:url . "https://bitbucket.org/harsman/dyalog-mode/") (:keywords "languages"))]) (dut-mode . [(20170729 1411) ((emacs (24))) "Major mode for the Dut programming language" single ((:commit . "9235c7acaa6690942e9de8b7acd1e4be0c859dc1") (:url . "https://github.com/dut-lang/dut-mode") (:keywords "languages" "gut"))]) (duplicate-thing . [(20120515 948) nil "Duplicate current line & selection" single ((:commit . "f6ed0232fd0653621afe450d53775a32a9d0e328") (:keywords "command" "duplicate" "line" "selection"))]) (dummyparens . [(20141009 324) nil "parenthesis auto-pairing and wrapping" single ((:commit . "9798ef1d0eaa24e4fe66f8aa6022a8c62714cc89") (:url . "https://github.com/snosov1/dummyparens") (:keywords "dummyparens" "auto-pair" "wrapping"))]) (dumb-jump . [(20180123 1100) ((emacs (24 3)) (f (0 20 0)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." single ((:commit . "3bd7c23c3e4ac0936679ad6ebb68f14e37c7bc5d") (:keywords "programming"))]) (dumb-diff . [(20171211 1322) ((emacs (24 3))) "fast arbitrary diffs" single ((:commit . "1a2331d283049b71a07c1b06b1e0627a950d55f4") (:keywords "programming" "diff"))]) (ducpel . [(20140702 454) ((cl-lib (0 5))) "Logic game with sokoban elements" tar ((:commit . "b53b935ab95c02b82ccf38f63c89e39e99477a55") (:url . "https://github.com/alezost/ducpel") (:keywords "games"))]) (dts-mode . [(20161103 523) nil "Major mode for Devicetree source code" single ((:commit . "9ee0854446dcc6c53d2b8d2941051768dba50344") (:keywords "languages"))]) (dtrt-indent . [(20171001 1233) nil "Adapt to foreign indentation offsets" tar ((:commit . "7fd55af3b0311ea24b68397054e705c835fa5ef1") (:keywords "convenience" "files" "languages" "c"))]) (dtrace-script-mode . [(20150213 2223) nil "DTrace code editing commands for Emacs" single ((:commit . "801af1ef16075d31a19830ebb8404bbf3a322f10"))]) (dsvn . [(20130120 1257) nil "Subversion interface" single ((:commit . "17bce692e9bd5a43373d5cb1d66da50e1acb903b") (:keywords "docs"))]) (drupal-spell . [(20130520 955) nil "Aspell extra dictionary for Drupal" tar ((:commit . "a69f5e3b62c4c0da74ce26c1d00d5b8f7395e4ae") (:url . "https://github.com/arnested/drupal-spell") (:keywords "wp"))]) (drupal-mode . [(20171120 1509) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ((:commit . "47fda0a38a5b197f4606137d9c3b7d44aaeaa886") (:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal"))]) (dropbox . [(20170502 1722) ((json (1 2)) (oauth (1 0 3))) "Emacs backend for dropbox" single ((:commit . "d85bbf6caa4203d6088ea29f5c057c1e9bcacd85") (:keywords "dropbox"))]) (drone . [(20161106 118) nil "Launch your drone test suite if drone.yml is present" single ((:commit . "1d4ee037ad3208847a4235426edf0c4a3e7b1899") (:url . "https://github.com/olymk2/emacs-drone") (:keywords "drone" "tests" "ci"))]) (drill-instructor-AZIK-force . [(20151122 2114) ((popup (0 5))) "Support AZIK input" tar ((:commit . "008cea202dc31d7d6fb1e7d8e6334d516403b7a5"))]) (drawille . [(20160418 1138) ((cl-lib (0 5))) "Drawille implementation in elisp" tar ((:commit . "d914845725719d8293e2f0dea3c9c7e0a1e0e62a") (:url . "https://github.com/sshbio/elisp-drawille") (:keywords "graphics"))]) (drag-stuff . [(20161107 2349) nil "Drag stuff (lines, words, region, etc...) around" tar ((:commit . "6d06d846cd37c052d79acd0f372c13006aa7e7c8"))]) (draft-mode . [(20140609 756) nil "Rough drafting for Emacs." single ((:commit . "4779fb32daf53746459da2def7e08004492d4f18") (:url . "https://github.com/gaudecker/draft-mode") (:keywords "draft" "drafting"))]) (dracula-theme . [(20170412 845) ((emacs (24))) "Dracula Theme" single ((:commit . "62df5de68c73d34faaa0191a92ce3ebce589bf24") (:url . "https://github.com/dracula/emacs"))]) (dr-racket-like-unicode . [(20161021 511) ((emacs (24 1))) "DrRacket-style unicode input" single ((:commit . "4953f1c8a68472e157a0dcd0a7e35a4ec2577133") (:keywords "i18n" "tools"))]) (dpaste_de . [(20131015 525) ((web (0 3 7))) "Emacs mode to paste to dpaste.de" single ((:commit . "f0c39e8864299f735642f7d9fa490689398ce39d") (:keywords "pastebin"))]) (dpaste . [(20160303 1312) nil "Emacs integration for dpaste.com" single ((:commit . "5ebabb466a6ae70882549855b6b2194fc32189f8") (:keywords "paste" "pastie" "pastebin" "dpaste" "python"))]) (downplay-mode . [(20151125 1209) nil "focus attention on a region of the buffer" single ((:commit . "4a2c3addc73c8ca3816345c3c11c08af265baedb") (:url . "https://github.com/tobias/downplay-mode/"))]) (download-region . [(20180123 1733) ((cl-lib (0 3))) "Simple in-buffer download manager" single ((:commit . "bbba3ecd80818d5d940d41fe89a6e2ec5dd2c53c") (:url . "http://hins11.yu-yake.com/"))]) (dotnet . [(20170827 838) nil "Interact with dotnet CLI tool" single ((:commit . "e22fd23bf2bfab980d4802b10c4d872b800f90d4") (:url . "https://github.com/julienXX/dotnet.el") (:keywords ".net" "tools"))]) (dotenv-mode . [(20171123 649) ((emacs (24 3))) "Major mode for .env files" single ((:commit . "8d45b98beb04f486eb13d71765589e7dccb8ffa9") (:url . "https://github.com/preetpalS/emacs-dotenv-mode"))]) (dot-mode . [(20161025 1037) ((emacs (24 3))) "minor mode to repeat typing or commands" single ((:commit . "cde2d593cb3f8e31db8778e434d3a4550707d2cc") (:url . "https://github.com/wyrickre/dot-mode") (:keywords "convenience"))]) (doom-themes . [(20180108 1934) ((emacs (24 4)) (all-the-icons (1 0 0)) (cl-lib (0 5))) "an opinionated pack of modern color-themes" tar ((:commit . "d74fb168948c2b0142a2ae9cb6180d7c67b137eb") (:url . "https://github.com/hlissner/emacs-doom-theme") (:keywords "dark" "light" "blue" "atom" "one" "theme" "neotree" "icons" "faces" "nova"))]) (doom . [(20160121 722) ((cl-lib (0 5))) "DOM implementation and manipulation library" single ((:commit . "5e2d3f54e5b84eaa533cbdb6cf17b1b6009f0730") (:url . "http://www.github.com/toroidal-code/doom.el/") (:keywords "xml" "doom"))]) (dollaro . [(20151123 502) ((s (1 6 0))) "simple text templates" single ((:commit . "500127f0172ac7a1eec627e026b59136580a74ac") (:keywords "tools" "convenience"))]) (dokuwiki-mode . [(20170223 501) nil "Major mode for DokuWiki document" single ((:commit . "e4e116f6fcc373e3f5937c1a7daa5c2c9c6d3fa1") (:url . "https://github.com/kai2nenobu/emacs-dokuwiki-mode") (:keywords "hypermedia" "text" "dokuwiki"))]) (dokuwiki . [(20180101 1659) ((emacs (24 3)) (xml-rpc (1 6 8))) "Edit Remote DokuWiki Pages Using XML-RPC" single ((:commit . "594c4d4904dcc2796bbbd2c0845d9e7c09ccf6f7") (:url . "http://www.github.com/accidentalrebel/emacs-dokuwiki") (:keywords "convenience"))]) (dockerfile-mode . [(20171124 1647) ((emacs (24)) (s (1 12))) "Major mode for editing Docker's Dockerfiles" single ((:commit . "4ab78f678e9ee40c7c5729dc8f1f5c1a847be2e7") (:url . "https://github.com/spotify/dockerfile-mode"))]) (docker-tramp . [(20170206 1925) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar ((:commit . "8e2b671eff7a81af43b76d9dfcf94ddaa8333a23") (:url . "https://github.com/emacs-pe/docker-tramp.el") (:keywords "docker" "convenience"))]) (docker-compose-mode . [(20170916 1438) ((emacs (24 3)) (dash (2 12 0)) (yaml-mode (0 0 12))) "Major mode for editing docker-compose files" single ((:commit . "f3c06a43d69dfe80041a82a9365281bd5c65a105") (:url . "https://github.com/meqif/docker-compose-mode") (:keywords "convenience"))]) (docker-api . [(20160525 20) ((dash (2 12 1)) (request (0 2 0)) (s (1 11 0))) "Emacs interface to the Docker API" tar ((:commit . "206144346b7fa4165223349cfeb64a75d47ddd1b") (:url . "https://github.com/Silex/docker-api.el"))]) (docker . [(20180107 925) ((emacs (24 4)) (dash (2 12 1)) (docker-tramp (0 1)) (magit-popup (2 6 0)) (s (1 11 0)) (tablist (0 70)) (json-mode (1 7 0))) "Emacs interface to Docker" tar ((:commit . "5a6e407ee9c6035245749ee1f249aed16d651728") (:url . "https://github.com/Silex/docker.el") (:keywords "filename" "convenience"))]) (docean . [(20150927 1118) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "Interact with DigitalOcean from Emacs." single ((:commit . "dcc296782b08531b768d3cf851cc7959ec486bf1") (:url . "https://github.com/emacs-pe/docean.el") (:keywords "convenience"))]) (docbook-snippets . [(20150714 925) ((yasnippet (0 8 0))) "Yasnippets for DocBook" tar ((:commit . "b06297fdec039a541aaa6312cb328a11062cfab4") (:url . "https://github.com/jhradilek/emacs-docbook-snippets") (:keywords "snippets" "docbook"))]) (dna-mode . [(20170804 114) nil "a major mode for editing dna sequences" tar ((:commit . "471d374de22c33eaddd8e41dd8ae29753fab2f6a") (:url . "http://www.mahalito.net/~harley/elisp/dna-mode.el") (:keywords "dna" "emacs" "editing"))]) (dmenu . [(20180118 445) ((cl-lib (0 5))) "simulate the dmenu command line program" single ((:commit . "6e492cd4ee4fb39ecda92776707fc270f54d25e7") (:keywords "convenience" "usability"))]) (dkmisc . [(20131110 315) ((emacs (24 1))) "Miscellaneous functions required by dk* packages." tar ((:commit . "fe3d49c6f8322b6f89466361acd97585bdfe0608"))]) (dklrt . [(20131110 541) ((dkmisc (0 50)) (ledger-mode (20130908 1357)) (emacs (24 1))) "Ledger Recurring Transactions." tar ((:commit . "5d6c99f8018335256ab934b4c1049708ae2d48ba"))]) (dkl . [(20161004 1707) nil "Display keyboard layout." tar ((:commit . "6b4584f86037bda3383960c678d51f340229fb91") (:url . "https://github.com/flexibeast/dkl") (:keywords "input" "keyboard" "layout"))]) (dkdo . [(20131110 319) ((dkmisc (0 50)) (emacs (24 1))) "Do List major mode based on org-mode." tar ((:commit . "fd6bb105e8331fafb6385c5238c988c4c5bbe2da"))]) (django-theme . [(20131022 202) nil "Custom face theme for Emacs" single ((:commit . "86c8142b3eb1addd94a43aa6f1d98dab06401af0") (:url . "http://github/anrzejsliwa/django-theme"))]) (django-snippets . [(20131229 811) ((yasnippet (0 8 0))) "Yasnippets for django" tar ((:commit . "a71b8dd984e7f724b8321246e5c353a4ae5c986e") (:url . "https://github.com/myfreeweb/django-mode"))]) (django-mode . [(20170522 14) ((projectile (0)) (s (0)) (helm-make (0))) "Major mode for Django web framework." tar ((:commit . "a71b8dd984e7f724b8321246e5c353a4ae5c986e") (:keywords "languages"))]) (django-manage . [(20160818 1912) ((hydra (0 13 2))) "Django minor mode for commanding manage.py" single ((:commit . "876fb2cb627d465adfdc905841279784bcdd7ee8") (:keywords "languages"))]) (dizzee . [(20171201 116) nil "A more pleasant way to manage your project's subprocesses in Emacs." tar ((:commit . "e3cf1c2ea5d0fc00747524b6f3c5b905d0a8c8e1"))]) (dix-evil . [(20170105 623) ((dix (0 3 0)) (evil (1 0 7))) "optional evil-integration with dix.el" single ((:commit . "bcc7fd7aef5d25171978c386c620e09d0ba8d2f8") (:url . "http://wiki.apertium.org/wiki/Emacs") (:keywords "languages"))]) (dix . [(20170224 615) ((cl-lib (0 5))) "minor mode for editing Apertium XML dictionary files" tar ((:commit . "bcc7fd7aef5d25171978c386c620e09d0ba8d2f8") (:url . "http://wiki.apertium.org/wiki/Emacs") (:keywords "languages"))]) (ditz-mode . [(20150729 240) nil "Emacs interface to Ditz issue tracking system" single ((:keywords "tools"))]) (distinguished-theme . [(20151216 1215) nil "A dark and elegant theme for emacs." single ((:commit . "9b1d25ac59465a5016d187ea84b7614c95a29b3b") (:url . "https://github.com/Lokaltog/distinguished-theme"))]) (distel-completion-lib . [(20160816 406) nil "Completion library for Erlang/Distel" single ((:commit . "2ba4eea51cecfa75cf62f58180460ee9ff43131f") (:url . "github.com/sebastiw/distel-completion") (:keywords "erlang" "distel" "completion"))]) (display-theme . [(20140115 756) ((emacs (24))) "display current theme(s) at mode-line" single ((:commit . "b180b3be7a74ae4799a14e7e4bc2fe10e3ff7a15") (:url . "https://github.com/kawabata/emacs-display-theme/") (:keywords "tools"))]) (dispass . [(20140202 731) ((dash (1 0 0))) "Emacs wrapper for DisPass" single ((:commit . "b6e8f89040ebaaf0e7609b04bc27a8979f0ae861") (:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes"))]) (disk . [(20171115 2331) nil "simplified find-file, revert-file, save-buffer interface" single ((:commit . "283e54e3be7d08f959076240b2ab324e25632137") (:url . "http://www.emacswiki.org/emacs/DiskKey") (:keywords "convenience"))]) (discover-my-major . [(20170113 2306) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single ((:commit . "ac83b24b5130eb0944f820736012df0924cce528") (:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys"))]) (discover-js2-refactor . [(20140129 752) ((js2-refactor (20131221 501)) (discover (20140103 1339))) "Adds discover context menu for js2-refactor" single ((:commit . "3812abf61f39f3e73a9f3daefa6fed4f21a429ba") (:keywords "js2-refactor" "discover"))]) (discover-clj-refactor . [(20150328 759) ((clj-refactor (0 14 0)) (discover (0 3))) "Adds discover context menu for clj-refactor" single ((:commit . "3fbd5c1162739e606d7cf5d4f5d7426547d99647") (:keywords "clj-refactor" "discover" "convenience"))]) (discover . [(20140103 1339) ((makey (0 3))) "discover more of Emacs" single ((:commit . "7b0044bbb3b3bd5d811fdfb0f5ac6ec8de1239df"))]) (discourse . [(20160911 119) ((cl-lib (0 5)) (request (0 2)) (s (1 11 0))) "discourse api" single ((:commit . "a86c7e608851e186fe12e892a573994f08c8e65e") (:url . "https://github.com/lujun9972/discourse-api") (:keywords "lisp" "discourse"))]) (disaster . [(20171016 1452) nil "Disassemble C/C++ code under cursor in Emacs" single ((:commit . "10a785facc60d89d78e0d5177985ab1af1741bb4") (:url . "https://github.com/jart/disaster") (:keywords "tools"))]) (disable-mouse . [(20171226 1715) nil "Disable mouse commands globally" single ((:commit . "541363bd6353b8b05375552bab884a6315ea545c") (:url . "https://github.com/purcell/disable-mouse") (:keywords "mouse"))]) (dirtree-prosjekt . [(20140129 104) ((prosjekt (0 3)) (dirtree (0 1))) "dirtree integration for prosjekt." single ((:commit . "a864a8be5842223043702395f311e3350c28e9db") (:url . "https://github.com/abingham/prosjekt"))]) (dirtree . [(20140129 32) ((tree-mode (1 1 1 1)) (windata (0))) "Directory tree views" single ((:commit . "ba55f1e716e386fdd37cb8e7f48616e405dc7251"))]) (direx-grep . [(20140515 806) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single ((:commit . "1109a512a80b2673a70b18b8568514049017faad") (:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience"))]) (direx . [(20170422 627) nil "Simple Directory Explorer" tar ((:commit . "a79bfdb5980cf6ed7bfb3b41ddc471a7b6c0ede4") (:keywords "convenience"))]) (direnv . [(20171221 138) ((emacs (24 4)) (dash (2 12 0)) (with-editor (2 5 10))) "direnv support for emacs" single ((:commit . "b1c14f307652e5a039165d196a799638feb16cd8") (:url . "https://github.com/wbolster/emacs-direnv") (:keywords "direnv" "environment" "processes" "unix" "tools"))]) (diredful . [(20160529 1317) nil "colorful file names in dired buffers" single ((:commit . "c08e163d9d6c62f7b07e94d54c96c2e364e67e0e") (:url . "https://github.com/thamer/diredful") (:keywords "dired" "colors" "extension" "widget"))]) (diredfl . [(20171014 1402) ((emacs (24))) "Extra font lock rules for a more colourful dired" single ((:commit . "085eabf2e70590ec8e31c1e66931d652d8eab432") (:url . "https://github.com/purcell/diredfl") (:keywords "faces"))]) (dired-toggle-sudo . [(20151109 206) nil "Browse directory with sudo privileges." single ((:commit . "02449dbda4e168f99fe5352c9628df5d39e11483") (:keywords "emacs" "dired"))]) (dired-toggle . [(20140907 1349) nil "provide a simple way to toggle dired buffer for current directory" single ((:commit . "84efb9ec9c327e4da53cdb7cda5b51dcd0ede0e5") (:url . "https://github.com/fasheng/dired-toggle") (:keywords "dired" "toggle"))]) (dired-subtree . [(20170910 1521) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Insert subdirectories in a tree-like fashion" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-single . [(20170804 544) nil "Reuse the current dired buffer to visit a directory" single ((:commit . "0dcc645de6397bf12c33229de67a503e4490c618") (:keywords "dired" "reuse" "buffer"))]) (dired-sidebar . [(20180122 2139) ((emacs (25 1)) (dired-subtree (0 0 1))) "Tree browser leveraging dired" single ((:commit . "e749b7ada1de75d2431d9087ff70c3737c88b2dd") (:url . "https://github.com/jojojames/dired-sidebar") (:keywords "dired" "files" "tools"))]) (dired-ranger . [(20171229 753) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Implementation of useful ranger features for dired" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-rainbow . [(20171202 1448) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Extended file highlighting according to its type" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-quick-sort . [(20161208 1312) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." single ((:commit . "1845f978d313f750a5b70b832457ed803c4ffbdb") (:url . "https://gitlab.com/xuhdev/dired-quick-sort#dired-quick-sort") (:keywords "convenience" "files"))]) (dired-open . [(20160205 1213) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Open files from dired using using custom actions" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-narrow . [(20170309 329) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Live-narrowing of search results for dired" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-launch . [(20171004 1027) nil "Use dired as a launcher" single ((:commit . "f71826804221bafc4f9f2f75a800400a72c24b8b") (:url . "https://github.com/thomp/dired-launch") (:keywords "dired" "launch"))]) (dired-k . [(20170313 803) ((emacs (24 3))) "highlight dired buffer by file size, modified time, git status" tar ((:commit . "c50e8f73358060a448bff66db2d330b52bbeffc1") (:url . "https://github.com/syohex/emacs-dired-k"))]) (dired-imenu . [(20140109 810) nil "imenu binding for dired mode" single ((:commit . "610e21fe0988c85931d34894d3eee2442c79ab0a") (:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu"))]) (dired-icon . [(20170222 2126) ((emacs (24 3))) "A minor mode to display a list of associated icons in dired buffers." tar ((:commit . "f60e10757a5011235b519231ad35974ff25963ed") (:url . "https://gitlab.com/xuhdev/dired-icon") (:keywords "dired" "files"))]) (dired-hide-dotfiles . [(20170314 1339) ((emacs (25 1))) "Hide dotfiles in dired" single ((:commit . "b715f643ec805b3b8aca334595e6589320f04a49") (:url . "https://github.com/mattiasb/dired-hide-dotfiles") (:keywords "files"))]) (dired-hacks-utils . [(20160527 1436) ((dash (2 5 0))) "Utilities and helpers for dired-hacks collection" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-filter . [(20171010 204) ((dash (2 10 0)) (dired-hacks-utils (0 0 1)) (f (0 17 0)) (cl-lib (0 3))) "Ibuffer-like filtering for dired" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-filetype-face . [(20160822 655) nil "Set different faces for different filetypes in dired" single ((:commit . "72b3c88e8b82b3f8681d940757f7b2992bd80793") (:url . "https://github.com/jixiuf/dired-filetype-face") (:keywords "dired" "filetype" "face"))]) (dired-fdclone . [(20170413 747) nil "dired functions and settings to mimic FDclone" single ((:commit . "f55b69e5cd1d45699a0f37468ac8e20fa7a0cff6") (:url . "https://github.com/knu/dired-fdclone.el") (:keywords "unix" "directories" "dired"))]) (dired-explorer . [(20170614 1956) ((cl-lib (0 5))) "minor-mode provides Explorer like select file at dired." single ((:commit . "b02b08d73821512853c6a14113c794dded1df75a") (:keywords "dired" "explorer"))]) (dired-efap . [(20140122 856) nil "Edit Filename At Point in a dired buffer" single ((:commit . "624757b2e54d9a13e2183118d6c113e37684b90c") (:url . "https://github.com/juan-leon/dired-efap") (:keywords "dired" "environment" "files" "renaming"))]) (dired-dups . [(20130527 1425) nil "Find duplicate files and display them in a dired buffer" single ((:commit . "694ad128c822c59348ced16c4a0c1356d43da47a") (:url . "https://github.com/vapniks/dired-dups") (:keywords "unix"))]) (dired-collapse . [(20171107 47) ((dash (2 10 0)) (f (0 19 0))) "Collapse unique nested paths in dired listing" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-avfs . [(20161012 404) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "AVFS support for dired" single ((:commit . "f0628fb58ae25563a5bba211f613f8bd7e23fabd") (:keywords "files"))]) (dired-atool . [(20160208 433) ((emacs (24))) "Pack/unpack files with atool on dired." single ((:commit . "f188ccf6092330dbbefc0e75aa4fad3e7258749d") (:url . "https://github.com/HKey/dired-atool") (:keywords "files"))]) (dircmp . [(20141204 956) nil "Compare and sync directories." tar ((:commit . "558ee0b601c2de9d247612085aafe2926f56a09f") (:url . "https://github.com/matthewlmcclure/dircmp-mode") (:keywords "unix" "tools"))]) (dionysos . [(20160810 356) ((libmpdee (2 1 0)) (alert (1 2)) (s (1 11 0)) (dash (2 12 1)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Dionysos, a music player for Emacs" tar ((:commit . "0aac21caadabc5a7f09e18a9dcb02f3dec26588b") (:url . "https://github.com/nlamirault/dionysos") (:keywords "music"))]) (dimmer . [(20180121 2108) ((emacs (25))) "visually highlight the selected buffer" single ((:commit . "c1bdcf2a09eb4800d862e442a59599e316c5f0ef") (:url . "https://github.com/gonewest818/dimmer.el") (:keywords "faces" "editing"))]) (diminish . [(20170419 1036) nil "Diminished modes are minor modes with no modeline display" single ((:commit . "565a983a39d2e2cffab5df13b34f3b6116723208") (:url . "https://github.com/myrjola/diminish.el") (:keywords "extensions" "diminish" "minor" "codeprose"))]) (dim-autoload . [(20161023 1329) nil "dim or hide autoload cookie lines" single ((:commit . "c91edab065f413910354940742b35bdffeb52029") (:url . "https://github.com/tarsius/dim-autoload") (:keywords "convenience"))]) (dim . [(20160818 249) ((emacs (24 4))) "Change mode-line names of major/minor modes" single ((:commit . "4b00587dfaabc1f2393b9a9f9993996c288d4445") (:url . "https://github.com/alezost/dim.el") (:keywords "convenience"))]) (digit-groups . [(20160816 1926) ((dash (2 11 0))) "Highlight place-value positions in numbers" single ((:url . "http://bitbucket.com/adamsmd/digit-groups"))]) (digistar-mode . [(20160218 1155) nil "major mode for Digistar scripts" single ((:commit . "15288b1e1a04b79b5ab7097fdd26d48b2ff41076") (:keywords "languages"))]) (diffview . [(20150928 2211) nil "View diffs in side-by-side format" single ((:commit . "031b70913e755c5e55222680f80185032a7d1728") (:url . "https://github.com/mgalgs/diffview-mode") (:keywords "convenience" "diff"))]) (diffscuss-mode . [(20141014 1657) nil "Major mode for diffscuss files." single ((:commit . "e0aacd8b3d9f886f27222c1397f0655e849e0af7") (:keywords "tools"))]) (difflib . [(20171227 718) ((emacs (24 4)) (cl-generic (0 3)) (ht (2 2)) (s (1 12 0))) "Helpers for computing deltas between sequences." single ((:commit . "b08850251812d71e62fd6956081299590acdf37b") (:url . "http://github.com/dieggsy/difflib.el") (:keywords "matching" "tools" "string"))]) (diff-hl . [(20180123 1420) ((cl-lib (0 2)) (emacs (24 3))) "Highlight uncommitted changes using VC" tar ((:commit . "9ef21e4ea2389545417741e20a89d92bfd72d6ff") (:url . "https://github.com/dgutov/diff-hl") (:keywords "vc" "diff"))]) (dictionary . [(20140717 2029) ((connection (1 10)) (link (1 10))) "Client for rfc2229 dictionary servers" single ((:commit . "a23b8f4a422d0de69a006ed010eff5795319db98") (:keywords "interface" "dictionary"))]) (dictcc . [(20171213 1334) ((emacs (24 4)) (cl-lib (0 5)) (ivy (0 10 0))) "Look up translations on dict.cc" single ((:commit . "a77cf1fadadcbde762466970b503c8a8916b35b2") (:keywords "convenience"))]) (dic-lookup-w3m . [(20170803 354) ((w3m (20120723 324)) (stem (20120826))) "look up dictionaries on the Internet" tar ((:commit . "79aca5eb9c78e67cb85a386060d48113caad5ec3") (:keywords "emacs-w3m" "w3m" "dictionary"))]) (dhall-mode . [(20171204 1327) ((emacs (24 4))) "a major mode for dhall configuration language" single ((:commit . "bc6aec777594beeac6ba4c6dbfb1c889341589c9") (:url . "https://github.com/psibi/dhall-mode") (:keywords "languages"))]) (dfmt . [(20170728 323) nil "Emacs Interface to D indenting/formatting tool dfmt." single ((:commit . "21b9094e907b7ac53f5ecb4ff4539613a9d12434") (:url . "https://github.com/qsimpleq/elisp-dfmt") (:keywords "tools" "convenience" "languages" "dlang"))]) (devdocs . [(20170731 150) nil "Launch DevDocs search" single ((:commit . "a2d51e824f0cc48a9dd611cc740bc8b86143e611") (:url . "https://github.com/xuchunyang/DevDocs.el"))]) (desktop-registry . [(20140119 1343) nil "Keep a central registry of desktop files" single ((:commit . "244c2e7f9f0a1050aa8a47ad0b38f4e4584682dd") (:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience"))]) (desktop+ . [(20170107 1332) ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) "Handle special buffers when saving & restoring sessions" single ((:commit . "88055cee526a000056201898499cebbd35e3ea76") (:url . "https://github.com/ffevotte/desktop-plus"))]) (describe-number . [(20151031 1755) ((yabin (1 1))) "Describe arbitrarily large number at point." single ((:commit . "40618345a37831804b29589849a785ef5aa5ac24") (:url . "https://github.com/netromdk/describe-number") (:keywords "describe" "value" "help"))]) (demo-it . [(20170628 1503) nil "Create demonstrations" tar ((:commit . "1e8b42ff6479fa541eeec5699b4727af136d40da") (:keywords "demonstration" "presentation" "test"))]) (demangle-mode . [(20170923 1501) ((cl-lib (0 1)) (emacs (24))) "Automatically demangle C++ symbols" single ((:commit . "79231b05f97da147d66120f947656f856a3a64fb") (:url . "https://github.com/liblit/demangle-mode") (:keywords "c" "tools"))]) (delim-kill . [(20100516 2320) nil "Kill text between delimiters." single ((:commit . "1dbe47344f2d2cbc8c54beedf0cf0bf10fd203c1") (:url . "http://github.com/thomas11/delim-kill/tree/master") (:keywords "convenience" "languages"))]) (deft . [(20180112 1155) nil "quickly browse, filter, and edit plain text notes" single ((:commit . "c4b30d780bfa732ff52d85f0311e4a045f44a7b4") (:url . "https://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity"))]) (defproject . [(20151201 1419) ((emacs (24))) "Manager dir-locals and project specific variables" single ((:commit . "674d48a5e34cb4bba76faa38ee901322ec649086") (:url . "https://github.com/kotfic/defproject") (:keywords "convenience"))]) (define-word . [(20180105 1152) ((emacs (24 3))) "display the definition of word at point." single ((:commit . "d52e9898a2719bd5003184196aa3b889c4fcb7b3") (:url . "https://github.com/abo-abo/define-word") (:keywords "dictionary" "convenience"))]) (deferred . [(20170901 630) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" single ((:commit . "2239671d94b38d92e9b28d4e12fd79814cfb9c16") (:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async"))]) (default-text-scale . [(20170826 2215) nil "Easily adjust the font size in all frames" single ((:commit . "968e985e219235f3e744d6d967e592acbaf6e0a8") (:url . "https://github.com/purcell/default-text-scale") (:keywords "frames" "faces"))]) (dedukti-mode . [(20171103 512) nil "Major mode for Dedukti files" single ((:commit . "d7c3505a1046187de3c3aeb144455078d514594e") (:url . "https://github.com/rafoo/dedukti-mode") (:keywords "languages" "dedukti"))]) (dedicated . [(20090428 1231) nil "A very simple minor mode for dedicated buffers" single ((:commit . "8275fb672f9cc4ba6682ebda0ef91db827e32992") (:keywords "dedicated" "buffer"))]) (decl . [(20171212 658) ((dash (2 5 0)) (emacs (24 3)) (cl-lib (0 3))) "Library for organizing code declaratively" single ((:commit . "c097d532de13cb69b0fc390afa6d806d0db97588") (:url . "https://github.com/preetpalS/decl.el"))]) (decide . [(20170702 1617) nil "rolling dice and other random things" single ((:commit . "90133687118c236142b8110571c463304b3192f9"))]) (debug-print . [(20140125 1619) ((emacs (24))) "A nice printf debugging environment by the way Gauche do" single ((:commit . "d817fd9ea2d3f8d2c1ace4d8af155684f3a99dc5") (:url . "https://github.com/kenoss/debug-print") (:keywords "extensions" "lisp" "tools" "maint"))]) (debpaste . [(20160113 1547) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single ((:commit . "6f2a400665062468ebd03a2ce1de2a73d9084958") (:url . "http://github.com/alezost/debpaste.el") (:keywords "paste"))]) (ddskk . [(20170709 839) ((ccc (1 43)) (cdb (20141201 754))) "Simple Kana to Kanji conversion program." tar ((:commit . "16d156562aef72f02ced58087335ed72d520d878"))]) (db-pg . [(20130131 1102) ((pg (0 12)) (db (0 0 6))) "A PostgreSQL adapter for emacs-db" single ((:commit . "7d5ab86b74b05fe003b3b434d4835f37f3f3eded") (:keywords "data" "comm" "database" "postgresql"))]) (db . [(20140421 1411) ((kv (0 0 11))) "A database for EmacsLisp" single ((:commit . "b3a423fb8e72f9013009cbe033d654df2ce31438") (:keywords "data" "lisp"))]) (dayone . [(20160105 440) ((uuid (0 0 3)) (mustache (0 22)) (ht (1 5))) "Utility script for Day One" tar ((:commit . "ab628274f0806451f23bce16f62a6a11cbf91a2b") (:url . "https://github.com/mori-dev/emacs-dayone") (:keywords "day one" "tools" "convenience"))]) (datomic-snippets . [(20180116 752) ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) "Yasnippets for Datomic" tar ((:commit . "731fbd31b814ef1521bd7eb1558eeab6a4c2e01b"))]) (datetime-format . [(20160612 1015) nil "Datetime functions" single ((:commit . "e6427538b547cbe02e1bd6ed4b765c73620bdae8") (:url . "https://github.com/zonuexe/emacs-datetime") (:keywords "datetime" "calendar"))]) (datetime . [(20180118 837) ((emacs (24 1))) "Parsing, formatting and matching timestamps" single ((:commit . "d99e56785d750d6c7e416955f047fe057fae54a6") (:url . "https://github.com/doublep/datetime") (:keywords "lisp" "i18n"))]) (date-field . [(20141128 1705) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single ((:commit . "11c9170d1f7b343233f7716d4c0a62be024c1654") (:url . "https://github.com/aki2o/emacs-date-field") (:keywords "widgets"))]) (date-at-point . [(20150308 543) nil "Add `date' to `thing-at-point' function" single ((:commit . "38df823d05df08ec0748a4185113fae5f99090e9") (:url . "https://github.com/alezost/date-at-point.el") (:keywords "convenience"))]) (dashboard . [(20180110 1153) ((emacs (24 4)) (page-break-lines (0 11))) "A startup screen extracted from Spacemacs" tar ((:commit . "e3fc28a6d3626c8cae9eb2e448b2f2e6b1a98f52") (:url . "https://github.com/rakanalh/emacs-dashboard") (:keywords "startup" "screen" "tools"))]) (dash-functional . [(20180107 818) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:commit . "c1991d4c22f356be21df6b3badd7233a94df7937") (:keywords "lisp" "functions" "combinators"))]) (dash-at-point . [(20140626 35) nil "Search the word at point with Dash" single ((:commit . "ed872b4fcbe02ef1a5bac0337afe19a7a747f34c") (:url . "https://github.com/stanaka/dash-at-point"))]) (dash . [(20180118 743) nil "A modern list library for Emacs" single ((:commit . "c1991d4c22f356be21df6b3badd7233a94df7937") (:keywords "lists"))]) (dart-mode . [(20171024 2137) ((emacs (24 5)) (cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (s (1 11))) "Major mode for editing Dart files" single ((:commit . "adef2a5b672d503ae3e92b30bb80095879b030d0") (:url . "https://github.com/nex3/dart-mode") (:keywords "language"))]) (darktooth-theme . [(20171206 639) ((autothemer (0 2))) "From the darkness... it watches" single ((:commit . "dc90fc7d526d7e65256e050e3b373908a27b6c45") (:url . "http://github.com/emacsfodder/emacs-theme-darktooth"))]) (darkokai-theme . [(20170728 339) nil "A darker variant on Monokai." single ((:commit . "d881d51acf0a7f806ae68d48305e30941a741a0e") (:url . "http://github.com/sjrmanning/darkokai"))]) (darkmine-theme . [(20160405 2324) nil "Yet another emacs dark color theme." single ((:commit . "7f7e82ca03bcad52911fa41fb3e204e32d6ee63e") (:url . "https://github.com/pierre-lecocq/darkmine-theme"))]) (darkburn-theme . [(20170423 952) nil "A not-so-low contrast color theme for Emacs." single ((:commit . "0af794ff7fac19778ac8a7efb92455c6f6c2158f") (:url . "http://github.com/gorauskas/darkburn-theme"))]) (dark-souls . [(20140314 428) nil "Prepare to die" single ((:commit . "94122b1215423e58dcf18584a2bd022029d54d4b") (:url . "http://github.com/tomjakubowski/dark-souls.el") (:keywords "games"))]) (dark-mint-theme . [(20160301 2242) nil "dark & minty fresh theme" single ((:commit . "95c30a26de31549cd341184ba9ab2be8fdc67eba"))]) (dark-krystal-theme . [(20170808 600) ((emacs (24 0))) "an Emacs 24 theme based on Dark Krystal (tmTheme)" single ((:commit . "79084b99665dc9ffb0ec62cc092349a5ecebebbc") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (darcula-theme . [(20171227 1045) nil "Inspired by IntelliJ's Darcula theme" single ((:commit . "d9b82b58ded9014985be6658f4ab17e26ed9e93e") (:url . "https://gitlab.com/fommil/emacs-darcula-theme") (:keywords "faces"))]) (darcsum . [(20140315 2110) nil "a pcl-cvs like interface for managing darcs patches" tar ((:commit . "00c252b51cb24c25fb74f529960ebd631514a4c1") (:keywords "completion" "convenience" "tools" "vc"))]) (dante . [(20180122 1305) ((dash (2 13 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (haskell-mode (13 14)) (s (1 11 0))) "Development mode for Haskell" single ((:commit . "7af89cb2f66a534055334d7621ead3580e83e30e") (:url . "https://github.com/jyp/dante") (:keywords "haskell" "tools"))]) (danneskjold-theme . [(20180116 211) nil "Beautiful high-contrast Emacs theme." tar ((:commit . "5784843c9ff8b22535d571c25d275eb4ffb1588e"))]) (dakrone-theme . [(20170801 1233) nil "dakrone's custom dark theme" single ((:commit . "232ad1be5f3572dcbdf528f1655109aa355a6937") (:url . "https://github.com/dakrone/dakrone-theme") (:keywords "color" "themes" "this" "file" "is" "not" "part" "of" "gnu" "emacs."))]) (dakrone-light-theme . [(20170808 1440) nil "dakrone's custom light theme" single ((:commit . "06f198dc8b4ca7421990b30a23d89c8e0b8c5de4") (:url . "https://github.com/dakrone/dakrone-light-theme") (:keywords "color" "themes" "faces" "this" "file" "is" "not" "part" "of" "gnu" "emacs."))]) (dad-joke . [(20170927 2358) ((emacs (24))) "Get/display dad jokes" single ((:commit . "bee47e7b746b403228fa7d7361cb095de19ac9ba") (:url . "https://github.com/davep/dad-joke.el") (:keywords "games"))]) (dactyl-mode . [(20140906 1025) nil "Major mode for editing Pentadactyl config files" single ((:commit . "cc55fe6b987271d9647492b8df4c812d884f661f") (:url . "https://github.com/luxbock/dactyl-mode") (:keywords "languages" "vim"))]) (d-mode . [(20161022 717) nil "D Programming Language major mode for (X)Emacs" single ((:commit . "a97c92ced57224287a84e7fc48ba9aac6b2afc08") (:keywords "d" "programming" "language" "emacs" "cc-mode"))]) (czech-holidays . [(20160113 952) nil "Adds a list of Czech public holidays to Emacs calendar" single ((:commit . "d136fa09a152b3cd80db6d55c7b4ddfe07b90fbf") (:keywords "calendar"))]) (cython-mode . [(20170907 1648) nil "Major mode for editing Cython files" single ((:commit . "6009ccf90e89f73f3bb8454b9f9f5bca52572b89"))]) (cypher-mode . [(20151110 342) nil "major mode for editing cypher scripts" single ((:commit . "ce8543d7877c736c574a17b49874c9dcdc7a06d6") (:url . "http://github.com/fxbois/cypher-mode") (:keywords "cypher" "graph"))]) (cyphejor . [(20171231 2218) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single ((:commit . "d2faf26420ac16c4056f6eda067b845d33e102cd") (:url . "https://github.com/mrkkrp/cyphejor") (:keywords "mode-line" "major-mode"))]) (cycle-themes . [(20150402 2009) ((cl-lib (0 5))) "A global minor mode to make switching themes easier" single ((:commit . "6e125d11fdbc6b78fc9f219eb2609a5e29815898") (:url . "http://github.com/toroidal-code/cycle-themes.el") (:keywords "themes" "utility" "global minor mode"))]) (cycle-resize . [(20160521 857) nil "Cycle resize the current window horizontally or vertically" single ((:commit . "7d255d6fe85f12c967a0f7fcfcf18633be194c88") (:url . "https://github.com/pierre-lecocq/cycle-resize"))]) (cycbuf . [(20131203 1237) nil "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el" single ((:commit . "1079b41c3eb27d65b66d4399959bb6253f84858e") (:url . "https://github.com/martinp26/cycbuf") (:keywords "files" "convenience" "buffer switching"))]) (cyberpunk-theme . [(20170724 924) nil "Cyberpunk Color Theme" single ((:commit . "88eff8a42d6ed8ba7782ae003ec9597aed4fd019") (:keywords "color" "theme" "cyberpunk"))]) (cwl-mode . [(20171205 145) ((yaml-mode (0 0 13)) (emacs (24 4))) "A major mode for editing CWL" single ((:commit . "bdeb9c0734126f940db80bfb8b1dc735dab671c7") (:url . "https://github.com/tom-tan/cwl-mode") (:keywords "languages" "cwl" "common workflow language"))]) (cursor-test . [(20131207 932) ((emacs (24))) "testing library for cursor position in emacs." single ((:commit . "e09956e048b88fd2ee8dd90b5678baed8b04d31b") (:url . "https://github.com/ainame/cursor-test.el"))]) (cuda-mode . [(20151213 1921) nil "NVIDIA CUDA Major Mode" single ((:commit . "9ae9eacfdba3559b5456342d0d03296290df8ff5") (:keywords "c" "languages"))]) (cucumber-goto-step . [(20131209 2119) ((pcre2el (1 5))) "Jump to cucumber step definition" single ((:commit . "f2713ffb26ebe1b757d1f2ea80e900b55e5895aa") (:url . "http://orthogonal.me"))]) (cubicle-mode . [(20171009 1257) nil "Major mode for the Cubicle model checker" single ((:commit . "c2fba597da83b9ddc1195f1c8710d5330db24735"))]) (cubicaltt . [(20171108 602) ((emacs (24 1)) (cl-lib (0 5))) "Mode for cubical type theory" single ((:commit . "682e9f66ce16daf166549c1a16dd3a110894a8ea") (:url . "https://github.com/mortberg/cubicaltt") (:keywords "languages"))]) (ctxmenu . [(20140303 1342) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar ((:commit . "5c2376859562b98c07c985d2b483658e4c0e888e") (:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup"))]) (ctl-mode . [(20151202 206) nil "Major mode for editing GrADS script files" single ((:commit . "1a13051db21b999c7682a015b33a03096ff9d891") (:keywords "grads" "script" "major-mode"))]) (ctags-update . [(20170728 58) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ((:commit . "783bf91eba1cd27cbb739067a24e15e5e04564e6") (:url . "https://github.com/jixiuf/ctags-update") (:keywords "exuberant-ctags" "etags"))]) (ctable . [(20171005 1711) nil "Table component for Emacs Lisp" single ((:commit . "b8830d1ca95abb100a81bc32011bd17d5ecba000") (:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table"))]) (csv . [(20161113 710) nil "Functions for reading and parsing CSV files." single ((:commit . "aa1dfa1263565d5fac3879c21d8ddf5f8915e411") (:keywords "extensions" "data" "csv"))]) (cssh . [(20150810 1009) nil "clusterssh implementation for emacs" single ((:commit . "2fe2754235225a59b63f08b130cfd4352e2e1c3f") (:url . "http://tapoueh.org/emacs/cssh.html") (:keywords "clusterssh" "ssh" "cssh"))]) (css-eldoc . [(20150124 1923) nil "an eldoc-mode plugin for CSS source code" tar ((:commit . "c558ac4c470742c98a37290e6b409db28183df30"))]) (css-comb . [(20160415 2259) nil "Sort CSS properties in a particular order using CSS Comb" single ((:commit . "6fa45e5af8a8bd3af6c1154cde3540e32c4206ee") (:url . "https://github.com/channikhabra/css-comb.el"))]) (css-autoprefixer . [(20180118 1411) ((emacs (24))) "Adds autoprefix to CSS" single ((:commit . "2b18f38978845a18c66218e1abf0db789137073f") (:url . "https://github.com/kkweon/emacs-css-autoprefixer") (:keywords "convenience" "usability" "css"))]) (csound-mode . [(20180119 1726) ((emacs (25)) (shut-up (0 3 2)) (multi (2 0 1))) "A major mode for interacting and coding Csound" tar ((:commit . "4fc4e77263d31604c86be799163d96cdad57c610") (:url . "https://github.com/hlolli/csound-mode"))]) (csharp-mode . [(20171211 2238) nil "C# mode derived mode" single ((:commit . "ba7a81a85ee5fd234f24333ab156ce897cb20cc7") (:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode"))]) (csgo-conf-mode . [(20161209 819) nil "CS:GO Configuration files syntax highlighting" single ((:commit . "57e7224f87a3ccc76b5564cc95fa0ff43bb6807c") (:url . "https://github.com/wynro/emacs-csgo-conf-mode") (:keywords "languages"))]) (crystal-mode . [(20180104 1920) ((emacs (24 4))) "Major mode for editing Crystal files" single ((:commit . "0fe6815201bebe4c5ff6857bd541d95b05132b10") (:url . "https://github.com/crystal-lang-tools/emacs-crystal-mode") (:keywords "languages" "crystal"))]) (cryptsy-public-api . [(20141008 528) ((json (1 2))) "Library for working with the Cryptsy public API" single ((:commit . "795c204452f880c0087663e7c35faf26ea34af4d") (:keywords "cryptsy" "bitcoin" "litecoin" "dogecoin"))]) (cryptol-mode . [(20180118 535) nil "Cryptol major mode for Emacs" single ((:commit . "dcc9498813a77ffb83010032e0e5a540f00f3d33") (:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography"))]) (crux . [(20180113 251) ((seq (1 11))) "A Collection of Ridiculously Useful eXtensions" single ((:commit . "3e07035660f953cb08847362378267f5859bbe69") (:url . "https://github.com/bbatsov/crux") (:keywords "convenience"))]) (crm-custom . [(20160116 1606) ((cl-lib (0 5))) "Alternate `completing-read-multiple' that uses `completing-read'" single ((:commit . "f1aaccf64306a5f99d9bf7ba815d7ea41c15518d") (:url . "https://github.com/DarwinAwardWinner/crm-custom") (:keywords "completion" "minibuffer" "multiple elements"))]) (cricbuzz . [(20171227 1607) ((enlive (0 0 1)) (f (0 19 0)) (dash (2 13 0)) (s (1 11 0))) "Cricket scores from cricbuzz in emacs" single ((:commit . "557f75f10525e7a4d50e83010b9ed07fbf9df889") (:url . "https://github.com/lepisma/cricbuzz.el") (:keywords "cricket" "score"))]) (creole-mode . [(20130721 1750) nil "a markup mode for creole" single ((:commit . "b5e79b2ec5f19fb5aacf689b5febc3e0b61515c4") (:url . "https://github.com/nicferrier/creole-mode") (:keywords "hypermedia" "wp"))]) (creole . [(20140924 800) ((noflet (0 0 3)) (kv (0 0 17))) "A parser for the Creole Wiki language" single ((:commit . "7d5cffe93857f6c75ca09ac79c0e47b8d4410e53") (:keywords "lisp" "creole" "wiki"))]) (creds . [(20140510 1006) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar ((:commit . "b059397a7d59481f05fbb1bb9c8d3c2c69226482"))]) (creamsody-theme . [(20170222 258) ((autothemer (0 2))) "Straight from the soda fountain." single ((:commit . "32fa3f4e461da92700523b1b20e7b28974c19a26") (:url . "http://github.com/emacsfodder/emacs-theme-creamsody"))]) (crappy-jsp-mode . [(20140311 231) nil "A pretty crappy major-mode for jsp." single ((:commit . "6c45ab92b452411cc0fab9bcee2f456276b4fc40") (:keywords "jsp" "major" "mode"))]) (cquery . [(20180123 2010) ((emacs (25 1)) (lsp-mode (3 4)) (dash (0 13))) "cquery client for lsp-mode" single ((:commit . "0158acff369919df3c63ca8d95cc1b5bd6fd5d6b") (:url . "https://github.com/jacobdufault/cquery") (:keywords "languages" "lsp" "c++"))]) (cql-mode . [(20160720 2039) ((emacs (24))) "Major mode for editting CQLs" single ((:commit . "2529ade55c125a89d8215f096a74733a90611c5d") (:url . "https://github.com/Yuki-Inoue/cql-mode") (:keywords "cql" "cassandra"))]) (cpputils-cmake . [(20170819 259) nil "Easy realtime C++ syntax check and IntelliSense with CMake." single ((:commit . "4fa37dd075c716f98b67b96f3b6e022730df1c1b") (:url . "http://github.com/redguardtoo/cpputils-cmake") (:keywords "cmake" "intellisense" "flymake" "flycheck"))]) (cpanfile-mode . [(20161001 10) ((emacs (24 4))) "Major mode for cpanfiles" single ((:commit . "eda675703525198df1f76ddf250bffa40217ec5d") (:url . "https://github.com/zakame/cpanfile-mode") (:keywords "perl"))]) (cp5022x . [(20120323 1635) nil "cp50220, cp50221, cp50222 coding system" single ((:commit . "ea7327dd75e54539576916f592ae1be98179ae35") (:keywords "languages" "cp50220" "cp50221" "cp50222" "cp51932" "cp932"))]) (coverlay . [(20160507 955) ((emacs (24 1)) (cl-lib (0 5))) "Test coverage overlays" single ((:commit . "11068e2e4ed971b757ac0294528d4beb91124e58") (:url . "https://github.com/twada/coverlay.el") (:keywords "coverage" "overlay"))]) (coverage . [(20160222 114) ((ov (1 0)) (cl-lib (0 5))) "Code coverage line highlighting" single ((:commit . "d68e5d20108e280b11a802a671bd009c7dcfff89") (:url . "https://github.com/trezona-lecomte/coverage") (:keywords "coverage" "metrics" "simplecov" "ruby" "rspec"))]) (cov . [(20170405 1508) ((emacs (24 4)) (f (0 18 2)) (s (1 11 0))) "Show coverage stats in the fringe." single ((:commit . "519239cc37d3ad0204fecac99f42e1694ce57d3d") (:url . "https://github.com/AdamNiederer/cov") (:keywords "coverage" "gcov" "c"))]) (counsel-world-clock . [(20171201 2337) ((ivy (0 9 0)) (s (1 12 0))) "Display world clock using Ivy." single ((:commit . "04153fbb21e51b1cfd042bdfc6ed1e8355a1edd7") (:url . "https://github.com/kchenphy/counsel-world-clock"))]) (counsel-tramp . [(20171224 321) ((emacs (24 3)) (counsel (0 10))) "Tramp ivy interface for ssh, docker, vagrant" single ((:commit . "6efa0e6e204d08d5b8b8b66f7e3ae7f07d5a3665") (:url . "https://github.com/masasam/emacs-counsel-tramp"))]) (counsel-spotify . [(20170612 1132) ((emacs (25)) (ivy (0 9 0))) "Control Spotify search and select music with Ivy." single ((:commit . "dba8c1bf92e15f34f12a9e22b5958a93f10b46c5"))]) (counsel-pydoc . [(20171018 1342) ((emacs (24 3)) (ivy (0 9 1))) "run pydoc with counsel" single ((:commit . "1d8ff8ca3b9d69453cde423b1887fbb490a95c9e") (:url . "https://github.com/co-dh/pydoc_utils") (:keywords "completion" "matching"))]) (counsel-projectile . [(20180105 632) ((counsel (0 10 0)) (projectile (0 14 0))) "Ivy integration for Projectile" single ((:commit . "4d78ae8c90e8ebb903b8e70442989a69e46ff069") (:url . "https://github.com/ericdanan/counsel-projectile") (:keywords "project" "convenience"))]) (counsel-osx-app . [(20160821 109) ((ivy (0 8 0)) (emacs (24 3))) "launch osx applications via ivy interface" single ((:commit . "b1c54cbc033c4939966910d85ce035503079e108") (:url . "https://github.com/d12frosted/counsel-osx-app"))]) (counsel-notmuch . [(20171223 145) ((emacs (24)) (ivy (0 10 0)) (notmuch (0 21)) (s (1 12 0))) "Search emails in Notmuch asynchronously with Ivy" single ((:commit . "ac1aaead81c6860d7b8324cc1c00bcd52de5e9ca") (:url . "https://github.com/fuxialexander/counsel-notmuch") (:keywords "mail"))]) (counsel-gtags . [(20170326 559) ((emacs (24 3)) (counsel (0 8 0))) "ivy for GNU global" single ((:commit . "220ebb48419ee6891ecbf9ea8fe130b494b17ee2") (:url . "https://github.com/syohex/emacs-counsel-gtags"))]) (counsel-etags . [(20180121 1738) ((emacs (24 3)) (counsel (0 9 1))) "Fast and complete Ctags/Etags solution using ivy" single ((:commit . "e05fdb306eee197d63976d24bf0e16db241c6c06") (:url . "http://github.com/redguardtoo/counsel-etags") (:keywords "tools" "convenience"))]) (counsel-dash . [(20160729 829) ((emacs (24 4)) (dash (2 12 1)) (dash-functional (1 2 0)) (helm-dash (1 3 0)) (counsel (0 8 0))) "Browse dash docsets using Ivy" single ((:commit . "07fa74a94ff4da5b6c8c4810f5e143e701b480d2") (:url . "https://github.com/nathankot/counsel-dash") (:keywords "dash" "ivy" "counsel"))]) (counsel-bbdb . [(20171129 1737) ((ivy (0 8 0)) (emacs (24 3))) "Quick search&input email from BBDB based on ivy" single ((:commit . "c86f4b9ef99c9db0b2c4196a300d61300dc2d0c1") (:url . "https://github.com/redguard/counsel-bbdb") (:keywords "mail" "abbrev" "convenience" "matching"))]) (counsel . [(20180114 1336) ((emacs (24 3)) (swiper (0 9 0))) "Various completion functions using Ivy" single ((:commit . "92fd1aaae0597cd9c8a8ab382b187491b3f01d3d") (:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching"))]) (cosmo . [(20170922 44) ((emacs (24 4))) "Cosmological Calculator" single ((:commit . "dd83b09a49a2843606b28279b674b2207040b36b") (:url . "https://gitlab.com/montanari/cosmo-el") (:keywords "tools"))]) (corral . [(20160502 1) nil "Quickly surround text with delimiters" single ((:commit . "e7ab6aa118e46b93d4933d1364bc273f57cd6911") (:url . "http://github.com/nivekuil/corral"))]) (coq-commenter . [(20170822 1609) ((dash (2 13 0)) (s (1 11 0)) (cl-lib (0 5))) "Coq commenting minor mode for proof" single ((:commit . "7fe9a2cc0ebdb0b1e54a24eb7971d757fb588ac3") (:url . "http://github.com/ailrun/coq-commenter") (:keywords "comment" "coq" "proof"))]) (copyit-pandoc . [(20160624 1328) ((emacs (24)) (copyit (0 0 1)) (pandoc (0 0 1))) "Copy it, yank anything!" single ((:commit . "f50d033b129d467fb517a351adf3f16cabd82a62") (:url . "https://github.com/zonuexe/emacs-copyit") (:keywords "convinience" "yank" "clipboard"))]) (copyit . [(20161126 429) ((emacs (24)) (cl-lib (0 5)) (s (1 9 0))) "Copy it, yank anything!" single ((:commit . "f50d033b129d467fb517a351adf3f16cabd82a62") (:url . "https://github.com/zonuexe/emacs-copyit") (:keywords "convenience" "yank" "clipboard"))]) (copy-file-on-save . [(20171211 1744) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17)) (s (1 7 0))) "Copy file on save, automatic deployment it." single ((:commit . "11c2004947e0200e88991e265a5ae971adfbd7b2") (:url . "https://github.com/emacs-php/emacs-auto-deployment") (:keywords "files" "comm" "deploy"))]) (copy-as-format . [(20171215 1616) ((cl-lib (0 5))) "Copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code" single ((:commit . "971957166fe64d914ec4be209b4f80efeeabbb19") (:url . "https://github.com/sshaw/copy-as-format") (:keywords "github" "slack" "jira" "hipchat" "gitlab" "bitbucket" "org-mode" "pod" "rst" "asciidoc" "tools" "convenience"))]) (control-mode . [(20160624 1010) nil "A \"control\" mode, similar to vim's \"normal\" mode" single ((:commit . "72d6179b60adc438aada74083b2bf4264b575de3") (:url . "https://github.com/stephendavidmarsh/control-mode") (:keywords "convenience" "emulations"))]) (contrast-color . [(20160903 1107) ((emacs (24 3)) (cl-lib (0 5))) "Pick best contrast color for you" single ((:commit . "c5fb77a211ebbef3185ada37bea7420534c33f94") (:url . "https://github.com/yuutayamada/contrast-color-el") (:keywords "color" "convenience"))]) (contextual-menubar . [(20170908 408) nil "display the menubar only on a graphical display" single ((:commit . "67ddb1c8eec62e2b26524c09585a4f25f03ebb11") (:url . "https://github.com/aaronjensen/contextual-menubar"))]) (contextual . [(20160131 1037) ((emacs (24)) (dash (2 12 1)) (cl-lib (0 5))) "Contextual profile management system" single ((:commit . "9e009614fb72ef14964d7107abd44de5aed21659") (:url . "https://github.com/lshift-de/contextual") (:keywords "convenience" "tools"))]) (connection . [(20140717 2029) nil "TCP-based client connection" single ((:commit . "a23b8f4a422d0de69a006ed010eff5795319db98") (:keywords "network"))]) (conkeror-minor-mode . [(20150114 804) nil "Mode for editing conkeror javascript files." single ((:commit . "476e81c27b056e21c192391fe674a2bf875466b0") (:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools"))]) (confluence . [(20151020 1828) ((xml-rpc (1 6 4))) "Emacs mode for interacting with confluence wikis" tar ((:commit . "4518d270a07760644c4204985c83d234ece4738b") (:url . "http://code.google.com/p/confluence-el/") (:keywords "confluence" "wiki" "xmlrpc"))]) (config-parser . [(20160426 519) ((emacs (24 4))) "a library for parsing config file" single ((:commit . "85d559e7889d8f5b98b8794b79426ae25ec3caa5") (:url . "https://github.com/lujun9972/el-config-parser") (:keywords "convenience" "config"))]) (config-general-mode . [(20171024 1140) nil "Config::General config file mode" single ((:commit . "b4a8e6ba0bb027a77e4a0f701409f3e57bb2e4c0") (:url . "https://github.com/tlinden/config-general-mode") (:keywords "files"))]) (conda . [(20171122 716) ((emacs (24 4)) (pythonic (0 1 0)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "Work with your conda environments" single ((:commit . "0bba56d80bb959a20838a024b174d1cf1e2cfd07") (:url . "http://github.com/necaris/conda.el") (:keywords "python" "environment" "conda"))]) (concurrent . [(20161228 1930) ((emacs (24 3)) (deferred (0 5 0))) "Concurrent utility functions for emacs lisp" single ((:commit . "2239671d94b38d92e9b28d4e12fd79814cfb9c16") (:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent"))]) (composer . [(20180111 942) ((emacs (24)) (s (1 9 0)) (f (0 17)) (request (0 2 0)) (seq (1 9)) (php-runtime (0 1 0))) "Interface to PHP Composer" single ((:commit . "e34ebe795d267e28965c85bd84cbb16b18165bd8") (:url . "https://github.com/zonuexe/composer.el") (:keywords "tools" "php" "dependency" "manager"))]) (composable . [(20170723 2347) ((emacs (24 4))) "composable editing" tar ((:commit . "ac981974f89607393cc61314aaa19672d45b0650") (:keywords "lisp"))]) (company-ycmd . [(20171010 2258) ((ycmd (1 3)) (company (0 9 3)) (deferred (0 5 1)) (s (1 11 0)) (dash (2 13 0)) (let-alist (1 0 5)) (f (0 19 0))) "company-mode backend for ycmd" single ((:commit . "7f394d02f6f3149b215adcc96043c78d5f32d612") (:url . "https://github.com/abingham/emacs-ycmd"))]) (company-ycm . [(20140904 1117) ((ycm (0 1))) "company-ycm" single ((:commit . "4da8a14abcd0f4fa3235042ade2e12b5068c0601") (:keywords "abbrev"))]) (company-web . [(20171111 1049) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar ((:commit . "935c65de0411ebbcb4f2223f31e756e093eaae07") (:url . "https://github.com/osv/company-web") (:keywords "html" "company"))]) (company-try-hard . [(20150902 1506) ((emacs (24 3)) (company (0 8 0)) (dash (2 0))) "get all completions from company backends" single ((:commit . "70b94cfc40c576af404e743133979048e1bd2610") (:keywords "matching"))]) (company-terraform . [(20171215 546) ((emacs (24 4)) (company (0 8 12)) (terraform-mode (0 6))) "A company backend for terraform" tar ((:commit . "1730e03aec5e67b751f50469c978e83326eae7f3") (:url . "https://github.com/rafalcieslak/emacs-company-terraform") (:keywords "abbrev" "convenience" "terraform" "company"))]) (company-tern . [(20161004 1147) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single ((:commit . "10ac058b065ae73c1f30e9fb7d969dd1a79387be") (:url . "https://github.com/proofit404/company-tern"))]) (company-statistics . [(20170210 1133) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" single ((:commit . "e62157d43b2c874d2edbd547c3bdfb05d0a7ae5c") (:url . "https://github.com/company-mode/company-statistics") (:keywords "abbrev" "convenience" "matching"))]) (company-sourcekit . [(20170126 353) ((emacs (24 3)) (company (0 8 12)) (dash (2 12 1)) (dash-functional (1 2 0)) (sourcekit (0 2 0))) "company-mode completion backend for SourceKit" single ((:commit . "abf9bc5a0102eb666d3aa6d6bf22f6efcc852781") (:url . "https://github.com/nathankot/company-sourcekit") (:keywords "abbrev"))]) (company-shell . [(20170517 2241) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" single ((:commit . "6ae625f80d90e0779c79de38e8f83a336c1d00fa") (:url . "https://github.com/Alexander-Miller/company-shell") (:keywords "company" "shell" "auto-completion"))]) (company-rtags . [(20170924 2244) ((emacs (24 3)) (company (0 8 1)) (rtags (2 10))) "RTags back-end for company" single ((:commit . "53e74892e8bd15baa4d1bd1d640dcabcba9667ee") (:url . "http://rtags.net"))]) (company-restclient . [(20151202 401) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "company-mode completion back-end for restclient-mode" single ((:commit . "ef67ba2f613ce3d61b70011c9d0a303a754ffc5b") (:url . "https://github.com/iquiw/company-restclient"))]) (company-racer . [(20171204 1910) ((emacs (24 4)) (cl-lib (0 5)) (company (0 8 0)) (deferred (0 3 1))) "Company integration for racer" single ((:commit . "a00381c9d416f375f783fcb6ae8d40669ce1f567") (:url . "https://github.com/emacs-pe/company-racer") (:keywords "convenience"))]) (company-quickhelp . [(20170429 1052) ((emacs (24 3)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single ((:commit . "c42610040ccfaacd8040f47c5e1c629a18987614") (:url . "https://www.github.com/expez/company-quickhelp") (:keywords "company" "popup" "documentation" "quickhelp"))]) (company-qml . [(20170428 1008) ((qml-mode (0 1)) (company (0 8 12))) "Company backend for QML files" tar ((:commit . "4af4f32a7ad86d86bb9293fb0b675aec513b5736") (:keywords "extensions"))]) (company-pollen . [(20160812 810) ((company (0 9 0)) (pollen-mode (1 0))) "company-mode completion backend for pollen" single ((:commit . "de762bd7f9760185dae8ef025ca9a9126ae78de0") (:url . "https://github.com/lijunsong/pollen-mode") (:keywords "languages" "pollen" "pollenpub" "company"))]) (company-plsense . [(20180117 1658) ((company (0 9 3)) (cl-lib (0 5 0)) (dash (2 12 0)) (s (1 12)) (emacs (24))) "Company backend for Perl" single ((:commit . "b48e3181e08ec597269621d621aa06636f02d883") (:url . "https://github.com/CeleritasCelery/company-plsense"))]) (company-php . [(20171226 1924) ((cl-lib (0 5)) (ac-php-core (1)) (company (0 9))) "company completion source for php" single ((:commit . "b9f455d863d3e92fcf32eaa722447c6d62ee1297") (:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense"))]) (company-nixos-options . [(20160215 57) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single ((:commit . "7007363e773a419203a69798fb0e0731b2eb0f73") (:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (company-ngram . [(20170129 1113) ((cl-lib (0 5)) (company (0 8 0))) "N-gram based completion" tar ((:commit . "09a68b802e64799e95f205b438d469bbd78cd2e6") (:url . "https://github.com/kshramt/company-ngram"))]) (company-nand2tetris . [(20171201 1013) ((nand2tetris (1 1 0)) (company (0 5)) (cl-lib (0 5 0))) "Company backend for nand2tetris major mode" single ((:commit . "33acee34d24b1c6a87db833b7d23449cf858f64f") (:url . "http://www.github.com/CestDiego/nand2tetris.el/") (:keywords "nand2tetris" "hdl" "company"))]) (company-math . [(20171016 814) ((company (0 8 0)) (math-symbol-lists (1 2))) "Completion backends for unicode math symbols and latex tags" single ((:commit . "3481f03ebb6a613ff85b71ca8edd2d5842c49012") (:url . "https://github.com/vspinu/company-math") (:keywords "unicode" "symbols" "completion"))]) (company-lua . [(20171108 1506) ((company (0 8 12)) (s (1 10 0)) (f (0 17 0)) (lua-mode (20151025))) "Company backend for Lua" tar ((:commit . "29f6819de4d691e5fd0b62893a9f4fbc1c6fcb52"))]) (company-lsp . [(20180122 1747) ((emacs (25 1)) (lsp-mode (3 4)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." single ((:commit . "0f750d4cbde7063472b1f25b7cef7e632ae307cb") (:url . "https://github.com/tigersoldier/company-lsp"))]) (company-lean . [(20171102 754) ((emacs (24 3)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 10 0)) (f (0 19 0)) (company (0 9 3)) (lean-mode (3 3 0))) "A company backend for lean-mode" single ((:commit . "ae90bd280588c96d540892d0f42247db5a126f51") (:url . "https://github.com/leanprover/lean-mode") (:keywords "languages"))]) (company-jedi . [(20151216 1921) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "company-mode completion back-end for Python JEDI" single ((:commit . "2f54e791e10f5dc0ff164bfe97f1878359fab6f6"))]) (company-irony-c-headers . [(20151018 209) ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) "Company mode backend for C/C++ header files with Irony" single ((:commit . "72c386aeb079fb261d9ec02e39211272f76bbd97") (:url . "https://github.com/hotpxl/company-irony-c-headers") (:keywords "c" "company"))]) (company-irony . [(20170905 1346) ((emacs (24 1)) (company (0 8 0)) (irony (1 1 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single ((:commit . "52aca45bcd0f2cb0648fcafa2bbb4f8ad4b2fee7") (:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience"))]) (company-inf-ruby . [(20140805 1354) ((company (0 6 10)) (inf-ruby (2 2 7)) (emacs (24 1))) "company-mode completion back-end for inf-ruby" single ((:commit . "fe3e4863bc971fbb81edad447efad5795ead1b17") (:url . "https://github.com/company-mode/company-inf-ruby"))]) (company-go . [(20170825 943) ((company (0 8 0)) (go-mode (1 0 0))) "company-mode backend for Go (using gocode)" single ((:commit . "416643789f088aa5077f667cecde7f966131f6be") (:keywords "languages"))]) (company-glsl . [(20171015 1049) ((company (0 9 4)) (glsl-mode (2 0)) (emacs (24 4))) "Support glsl in company-mode" single ((:commit . "a262c12c3bcd0807718c4edcaf2b054e30ef0e26") (:url . "https://github.com/guidoschmidt/company-glsl"))]) (company-ghci . [(20160310 1800) ((company (0 8 11)) (haskell-mode (13))) "company backend which uses the current ghci process." single ((:commit . "c2d74a41166e76de2e78c87f582ba3a1179b2aa6"))]) (company-ghc . [(20170918 133) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 4 0 0)) (emacs (24))) "company-mode ghc-mod backend" single ((:commit . "dab111cb5067c545ccdc6b2d0ba70c1c4bbce060") (:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion"))]) (company-flx . [(20180102 2118) ((emacs (24)) (company (0 8 12)) (flx (0 5))) "flx based fuzzy matching for company" single ((:commit . "05efcafb488f587bb6e60923078d97227462eb68") (:url . "https://github.com/PythonNut/company-flx") (:keywords "convenience" "company" "fuzzy" "flx"))]) (company-flow . [(20170325 810) ((company (0 8 0)) (dash (2 13 0))) "Flow backend for company-mode" single ((:commit . "339f502e46e7d9214b61498d539b17f8f0322d17") (:url . "https://github.com/aaronjensen/company-flow"))]) (company-erlang . [(20170122 2138) ((emacs (24 4)) (ivy-erlang-complete (0 1)) (company (0 9 2))) "company backend based on ivy-erlang-complete" single ((:commit . "bc0524a16f17b66c7397690e4ca0e004f09ea6c5") (:keywords "tools"))]) (company-emoji . [(20161230 1937) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" tar ((:commit . "8dc88ffe0773ef44321f245d39430c14a1bc2b82") (:url . "https://github.com/dunn/company-emoji.git") (:keywords "emoji" "company"))]) (company-emacs-eclim . [(20170104 743) ((eclim (0 3)) (company (0 7)) (cl-lib (0 5))) "company-mode backend for eclim" single ((:commit . "4f27d04c30a026f24c0ff18c3a7d36e3fb5b57a5"))]) (company-edbi . [(20160221 1123) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single ((:commit . "ffaeff75d0457285d16d11db772881542a6026ad") (:url . "https://github.com/proofit404/company-edbi"))]) (company-distel . [(20161002 2339) ((distel-completion-lib (1 0 0))) "Erlang/distel completion backend for company-mode" single ((:commit . "2ba4eea51cecfa75cf62f58180460ee9ff43131f") (:url . "github.com/sebastiw/distel-completion") (:keywords "erlang" "distel" "company"))]) (company-dict . [(20160528 53) ((emacs (24 4)) (company (0 8 12)) (parent-mode (2 3))) "A backend that emulates ac-source-dictionary" single ((:commit . "0589c2c3980a8f0df1705e3c0e5e075557eaac75") (:url . "https://github.com/hlissner/emacs-company-dict") (:keywords "company" "dictionary" "ac-source-dictionary"))]) (company-dcd . [(20170516 210) ((company (0 9)) (flycheck-dmd-dub (0 7)) (yasnippet (0 8)) (popwin (0 7)) (cl-lib (0 5)) (ivy (20160804 326))) "Company backend for Dlang using DCD." single ((:commit . "4832188a9e42287539a69c372fe1643166a6a7aa") (:url . "http://github.com/tsukimizake/company-dcd") (:keywords "languages"))]) (company-coq . [(20171202 1243) ((company-math (1 1)) (company (0 8 12)) (yasnippet (0 11 0)) (dash (2 12 1)) (cl-lib (0 5))) "A collection of extensions for Proof General's Coq mode" tar ((:commit . "dcad9c07ecbd90d261520ac09251eaa3480ea98a"))]) (company-childframe . [(20180118 1903) ((emacs (26 0)) (company (0 9 0))) "Use a child-frame as company candidate menu" single ((:commit . "8e23363066ad4fe3f55a1360663cdcd010a7b814") (:url . "https://github.com/company-mode/company-mode") (:keywords "abbrev" "convenience" "matching"))]) (company-cabal . [(20170917 617) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar ((:commit . "62112a7259e24bd6c08885629a185afe512b7d3d") (:url . "https://github.com/iquiw/company-cabal"))]) (company-c-headers . [(20170531 1330) ((emacs (24 1)) (company (0 8))) "Company mode backend for C/C++ header files" single ((:commit . "e959d43bebf0a524f7378669983a39ee1379cc21") (:keywords "development" "company"))]) (company-bibtex . [(20171104 2344) ((company (0 9 0)) (cl-lib (0 5)) (parsebib (1 0))) "Company completion for bibtex keys" single ((:commit . "225c6f5c0c070c94c8cdbbd452ea548cd94d76f4") (:url . "https://github.com/gbgar/company-bibtex") (:keywords "company-mode" "bibtex"))]) (company-axiom . [(20171024 1310) ((emacs (24)) (company (0 9)) (axiom-environment (20171021))) "A company-mode backend for the axiom-environment system" single ((:commit . "b4f0fa9cd013e107d2af8e2ebedff8a7f40be7b5") (:keywords "axiom" "openaxiom" "fricas" "axiom-environment"))]) (company-auctex . [(20161025 24) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Company-mode auto-completion for AUCTeX" single ((:commit . "d3727c9f5bb13c52b4a345bc8f895d3dbd9178b3") (:url . "https://github.com/alexeyr/company-auctex/"))]) (company-arduino . [(20160306 939) ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5)) (company-irony (0 1 0)) (company-c-headers (20140930)) (arduino-mode (1 0))) "company-mode for Arduino" single ((:commit . "d7e369702b8eee63e6dfdeba645ce28b6dc66fb1") (:url . "https://github.com/yuutayamada/company-arduino") (:keywords "convenience" "development" "company"))]) (company-ansible . [(20170430 53) ((emacs (24 4)) (company (0 8 12))) "A company back-end for ansible" tar ((:commit . "2c30c3bdb8316b27d5c1832b944cb146d00de456") (:url . "https://github.com/krzysztof-magosa/company-ansible") (:keywords "ansible"))]) (company-anaconda . [(20171222 342) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single ((:commit . "4519b1c9888b0d9665f0805e08362280a4945081") (:url . "https://github.com/proofit404/anaconda-mode"))]) (company . [(20180123 1315) ((emacs (24 3))) "Modular text completion framework" tar ((:commit . "d789f2643c11f7c53fc47ed9d9b271bb6f6718a3") (:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching"))]) (common-lisp-snippets . [(20170918 356) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar ((:commit . "cd46223fbc6ee99372a25ba455ffec4354895e45") (:url . "https://github.com/mrkkrp/common-lisp-snippets") (:keywords "snippets"))]) (commify . [(20161106 1534) ((s (1 9 0))) "Toggle grouping commas in numbers" single ((:commit . "78732c2fa6c1a10288b7436d7c561ec9ebdd41be") (:url . "https://github.com/ddoherty03/commify") (:keywords "convenience" "editing" "numbers" "grouping" "commas"))]) (commenter . [(20160219 827) ((emacs (24 4)) (let-alist (1 0 4))) "multiline-comment support package" single ((:commit . "6d1885419434ba779270c6fda0e30d390bb074bd") (:url . "https://github.com/yuutayamada/commenter") (:keywords "comment"))]) (comment-tags . [(20170910 1035) ((emacs (24 5))) "Highlight & navigate comment tags like 'TODO'." single ((:commit . "7d914097f0a03484af71e621db533737fc692f58") (:url . "https://github.com/vincekd/comment-tags") (:keywords "convenience" "comments" "tags"))]) (comment-dwim-2 . [(20170809 1354) nil "An all-in-one comment command to rule them all" single ((:commit . "8da8aba4cab4a0a1eef3aea2de219227526876e4") (:url . "https://github.com/remyferre/comment-dwim-2") (:keywords "convenience"))]) (commander . [(20140120 1052) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single ((:commit . "c93985dc318fe89e5a29abc21d19fb41e2fd14d2") (:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv"))]) (command-queue . [(20160328 1025) ((emacs (24 3))) "shell command queue" single ((:commit . "f327c6f852592229a755ec6de0c62c6aeafd6659") (:url . "https://github.com/Yuki-Inoue/command-queue"))]) (command-log-mode . [(20160412 2147) nil "log keyboard commands to buffer" single ((:commit . "af600e6b4129c8115f464af576505ea8e789db27") (:url . "https://github.com/lewang/command-log-mode") (:keywords "help"))]) (comint-intercept . [(20170317 528) ((emacs (24 3))) "Intercept input in comint-mode" single ((:commit . "a329abf01fa8e0c6b02b46b29bcb421a21120dc5") (:url . "https://github.com/hying-caritas/comint-intercept") (:keywords "processes" "terminals"))]) (column-enforce-mode . [(20171030 1200) nil "Highlight text that extends beyond a  column" single ((:commit . "2341a2b6a33d4b8b74c35062ec9cfe1bffd61944") (:url . "www.github.com/jordonbiondo/column-enforce-mode"))]) (colormaps . [(20171008 1524) ((emacs (25))) "Hex colormaps" single ((:commit . "19fbb64a6288d505b9cf45c9b5a3eed0bfb135e2") (:url . "https://github.com/lepisma/colormaps.el") (:keywords "tools"))]) (color-theme-x . [(20160924 854) ((cl-lib (0 5))) "convert color themes to X11 resource settings" single ((:commit . "7cba227f8bd4c82269405848550a4f4475057c65") (:url . "https://github.com/ajsquared/color-theme-x") (:keywords "convenience" "faces" "frames"))]) (color-theme-solarized . [(20171024 825) ((color-theme (6 5 5))) "Solarized themes for Emacs" tar ((:commit . "f3ca8902ea056fb8e46cb09f09c96294e31cd4ee"))]) (color-theme-sanityinc-tomorrow . [(20180122 1154) nil "A version of Chris Kempson's various Tomorrow themes" tar ((:commit . "0358ee25ba27741a41c62414785308b417cdc308"))]) (color-theme-sanityinc-solarized . [(20160429 1903) nil "A version of Ethan Schoonover's Solarized themes" tar ((:commit . "74a7065808f82dbdd9638ae33ed0e4f7a55da35c"))]) (color-theme-modern . [(20161219 344) ((emacs (24))) "Reimplement colortheme with Emacs 24 theme framework." tar ((:commit . "42a79266f1d7b473e9328e67a455e505e6c3eff5") (:url . "https://github.com/emacs-jp/replace-colorthemes/"))]) (color-theme-buffer-local . [(20170125 2201) ((color-theme (0))) "Install color-themes by buffer." single ((:commit . "e606dec66f16a06140b9aad625a4fd52bca4f936") (:url . "http://github.com/vic/color-theme-buffer-local") (:keywords "faces"))]) (color-theme-approximate . [(20140227 2036) nil "Makes Emacs theme works on terminal transparently" single ((:commit . "f54301ca39bc5d2ffb000f233f8114184a3e7d71"))]) (color-theme . [(20070910 1007) nil "install color themes" single ((:commit . "eeb07560b30aaf7934dfd21f5c2518a479905cd9") (:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?ColorTheme") (:keywords "faces"))]) (color-moccur . [(20141222 1635) nil "multi-buffer occur (grep) mode" single ((:commit . "4f1c59ffd1ccc2ab1a171cd6b721e8cb9e002fb7") (:url . "http://www.bookshelf.jp/elc/color-moccur.el") (:keywords "convenience"))]) (color-identifiers-mode . [(20170814 1121) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single ((:commit . "5750ee9e1ab8a6890381bb461982113b1eb98879") (:url . "https://github.com/ankurdave/color-identifiers-mode") (:keywords "faces" "languages"))]) (colonoscopy-theme . [(20170808 609) ((emacs (24 0))) "an Emacs 24 theme based on Colonoscopy (tmTheme)" single ((:commit . "64bbb322b13dae91ce9f1e3581f836f94f800ead") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (colemak-evil . [(20171015 1607) ((evil (20170323 1140))) "Colemak-friendly keybindings for Evil." single ((:commit . "192c779281ae1fbf2405dcdb55b3c5b2a1d0b3d1") (:url . "https://github.com/patbl/colemak-evil"))]) (coin-ticker . [(20170611 27) ((request (0 3 0)) (emacs (25))) "Show a cryptocurrency price ticker" single ((:commit . "9efab90fe4e6f29464af14e0d8fd1e20c0147b80") (:url . "https://github.com/eklitzke/coin-ticker-mode") (:keywords "news"))]) (coffee-mode . [(20170324 240) ((emacs (24 3))) "Major mode for CoffeeScript code" single ((:commit . "86ab8aae8662e8eff54d3013010b9c693b16eac5") (:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode"))]) (coffee-fof . [(20131012 530) ((coffee-mode (0 4 1))) "A coffee-mode configuration for `ff-find-other-file'." single ((:commit . "211529594bc074721c6cbc4edb73a63cc05f89ac") (:url . "http://github.com/yasuyk/coffee-fof") (:keywords "coffee-mode"))]) (codic . [(20150926 427) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar ((:commit . "52bbb6997ef4ab9fb7fea43bbfff7f04671aa557") (:url . "https://github.com/syohex/emacs-codic"))]) (codesearch . [(20171122 431) ((elog (0 1))) "Core support for managing codesearch tools" tar ((:commit . "4e6a2382c26d1218a4a007d31de2bab8ef9d2e7c") (:url . "https://github.com/abingham/emacs-codesearch") (:keywords "tools" "development" "search"))]) (codebug . [(20140929 1437) nil "Interact with codebug" single ((:commit . "ac0e4331ba94ccb5203fa492570e1ca6b90c3d52") (:url . "http://www.shanedowling.com/"))]) (code-library . [(20160426 518) ((gist (1 3 1))) "use org-mode to collect code snippets" single ((:commit . "32d59c5c845d6dbdda18f9bd1c03a58d55417fc5") (:keywords "lisp" "code"))]) (cobra-mode . [(20140116 1316) nil "Major mode for .NET-based Cobra language" single ((:commit . "acd6e53f6286af5176471d01f25257e5ddb6dd01") (:url . "http://github.com/Nekroze/cobra-mode") (:keywords "languages"))]) (cnfonts . [(20171205 111) ((emacs (24))) "A simple Chinese fonts config tool" tar ((:commit . "4583e30d5058773606b830072df38a038d40203a") (:url . "https://github.com/tumashu/cnfonts") (:keywords "convenience" "chinese" "font"))]) (cmm-mode . [(20150224 2346) nil "Major mode for C-- source code" single ((:commit . "c3ad514dff3eb30434f6b20d953276d4c00de1ee"))]) (cmd-to-echo . [(20161203 1333) ((emacs (24 4)) (s (1 11 0)) (shell-split-string (20151224 208))) "Show the output of long-running commands in the echo area" single ((:commit . "e0e874fc0e1ad6d291e39ed76023445297ad438a"))]) (cmake-project . [(20171121 315) nil "Integrates CMake build process with Emacs" single ((:commit . "d3f408f226eff3f77f7e00dd519f4efc78fd292d") (:url . "http://github.com/alamaison/emacs-cmake-project") (:keywords "c" "cmake" "languages" "tools"))]) (cmake-mode . [(20180104 1137) nil "major-mode for editing CMake sources" single ((:commit . "1345bdf1b6520a2f0c9891ad3c6fee00a6a5f18d"))]) (cmake-ide . [(20180122 1301) ((emacs (24 4)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0)) (s (1 11 0))) "Calls CMake to find out include paths and other compiler flags" single ((:commit . "21c1ca99393ea0160f0503a6adb8f3606d33926a") (:url . "http://github.com/atilaneves/cmake-ide") (:keywords "languages"))]) (cmake-font-lock . [(20170117 1225) ((cmake-mode (0 0))) "Advanced, type aware, highlight support for CMake" single ((:commit . "8be491b4b13338078e524e2fe6213c93e18a101e") (:url . "https://github.com/Lindydancer/cmake-font-lock") (:keywords "faces" "languages"))]) (cm-mode . [(20170203 1307) ((cl-lib (0 5))) "Minor mode for CriticMarkup" single ((:commit . "276d49c859822265070ae5dfbb403fd7d8d06436") (:keywords "text" "markdown"))]) (clues-theme . [(20161213 327) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single ((:commit . "abd61f2b7f3e98de58ca26e6d1230e70c6406cc7") (:url . "https://github.com/emacsfodder/emacs-clues-theme"))]) (cloud-to-butt-erc . [(20130627 1608) nil "Replace 'the cloud' with 'my butt'" single ((:commit . "6710c03d1bc91736435cbfe845924940cae34e5c") (:url . "http://www.github.com/leathekd/cloud-to-butt-erc"))]) (closure-lint-mode . [(20101118 1324) nil "minor mode for the Closure Linter" single ((:commit . "bc3d2fd5c35580bf1b8af43b12484c95a343b4b5") (:url . "https://github.com/r0man/closure-lint-mode") (:keywords "tools" "closure" "javascript" "lint" "flymake"))]) (closql . [(20171219 524) ((emacs (25 1)) (emacsql-sqlite (2 0 3))) "store EIEIO objects using EmacSQL" single ((:commit . "01cb892f6a457fbff857d924cebfdc77f69bd45d") (:url . "https://github.com/emacscollective/closql") (:keywords "extensions"))]) (clomacs . [(20180113 1550) ((emacs (24 3)) (cider (0 16 0)) (s (1 12 0)) (simple-httpd (1 4 6))) "Simplifies Emacs Lisp interaction with Clojure." single ((:commit . "38240d15e4929a3c9f3788815f9743a855926812") (:url . "https://github.com/clojure-emacs/clomacs") (:keywords "clojure" "interaction"))]) (clojure-snippets . [(20170713 2310) ((yasnippet (0 10 0))) "Yasnippets for clojure" tar ((:commit . "36207f9d8738851f5b686dfe0225ad0553bf8e68"))]) (clojure-quick-repls . [(20150814 36) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single ((:commit . "730311dd3ac4e0aceb0204f818b422017873467f") (:url . "https://github.com/symfrog/clojure-quick-repls") (:keywords "languages" "clojure" "cider" "clojurescript"))]) (clojure-mode-extra-font-locking . [(20180114 911) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:commit . "59e9247d64ca82d1e01bb21ee49df1220120fb0e") (:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp"))]) (clojure-mode . [(20180121 1011) ((emacs (24 4))) "Major mode for Clojure code" single ((:commit . "59e9247d64ca82d1e01bb21ee49df1220120fb0e") (:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp"))]) (clojure-cheatsheet . [(20161004 2328) ((helm (1 7 7)) (cider (0 9 0))) "The Clojure Cheatsheet for Emacs" single ((:commit . "57e877d9466934b5319989b542f93b42dffec9ae") (:url . "https://github.com/clojure-emacs/clojure-cheatsheet") (:keywords "clojure" "cider" "cheatsheet" "helm"))]) (clojars . [(20161109 1448) ((request-deferred (0 2 0))) "clojars.org search interface" single ((:commit . "8f4ca8a283d4e9acaab912bb7217ffb5800b01a7") (:url . "https://github.com/joshuamiller/clojars.el") (:keywords "docs" "help" "tools"))]) (clocker . [(20160125 1505) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single ((:commit . "4a4831ed4e42e18976edd16b844cb16cb78f3c17") (:keywords "org"))]) (cloc . [(20170728 1124) ((cl-lib (0 5))) "count lines of code over emacs buffers" single ((:commit . "f30f0472e465cc8d433d2473e9d3b8dfe2c94491") (:url . "https://github.com/cosmicexplorer/cloc-emacs") (:keywords "cloc" "count" "source" "code" "lines"))]) (clmemo . [(20160326 923) nil "Change Log MEMO" tar ((:commit . "846a81b984d71edf8278a4d9f9b886e44d5b8365") (:url . "https://github.com/ataka/clmemo") (:keywords "convenience"))]) (cljsbuild-mode . [(20160402 1000) nil "A minor mode for the ClojureScript 'lein cljsbuild' command" single ((:commit . "fa2315660cb3ce944b5e16c679dcf5afd6a97f4c") (:url . "http://github.com/kototama/cljsbuild-mode") (:keywords "clojure" "clojurescript" "leiningen" "compilation"))]) (cljr-helm . [(20160913 128) ((clj-refactor (0 13 0)) (helm-core (1 7 7)) (cl-lib (0 5))) "Wraps clojure refactor commands with helm" single ((:commit . "f2fc7b698a56e4a44d5dfbc6a55d77a93c0fa9a4") (:url . "https://github.com/philjackson/cljr-helm") (:keywords "helm" "clojure" "refactor"))]) (clj-refactor . [(20171117 317) ((emacs (24 4)) (s (1 8 0)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 6 1)) (cider (0 15 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of clojure refactoring functions" tar ((:commit . "408ab1f13b8d956dd8d2c839bea5197175ef5a93") (:keywords "convenience" "clojure" "cider"))]) (clips-mode . [(20170909 123) nil "Major mode for editing CLIPS code and REPL" tar ((:commit . "dd38e2822640a38f7d8bfec4f69d8dd24be27074"))]) (clippy . [(20161028 1254) ((pos-tip (1 0))) "Show tooltip with function documentation at point" single ((:commit . "ad4b5dba4cede6d4b21533186303d3d3e9a2510f") (:url . "https://github.com/Fuco1/clippy.el") (:keywords "docs"))]) (clipmon . [(20160926 329) nil "Clipboard monitor - watch system clipboard, add changes to kill ring/autoinsert" tar ((:commit . "3f985aa2a55fbfd8566425c90e1968998f57b8ee") (:url . "https://github.com/bburns/clipmon") (:keywords "convenience"))]) (cliphist . [(20171112 2138) ((emacs (24 3)) (ivy (0 9 0))) "Read data from clipboard managers at Linux and Mac" tar ((:commit . "e454254f8bd9dbaea28e95c786d7297a2d4e920a") (:url . "http://github.com/redguardtoo/cliphist") (:keywords "clipboard" "manager" "history"))]) (click-mode . [(20170105 20) ((emacs (24))) "Major mode for the Click Modular Router Project" single ((:commit . "3c31e65b0b8476a15a3e2394fa05477ce42ea790") (:url . "https://github.com/bmalehorn/click-mode") (:keywords "click" "router"))]) (clevercss . [(20131228 1755) nil "A major mode for editing CleverCSS files" single ((:commit . "b8a3c0dd674367c62b1a1ffec84d88fe0c0219bc") (:keywords "languages" "css"))]) (clear-text . [(20160406 1343) nil "Make you use clear text" tar ((:commit . "b50669b6077d6948f72cb3c649281d206e0c2f2b") (:url . "https://github.com/xuchunyang/clear-text.el") (:keywords "convenience"))]) (clean-buffers . [(20160529 1559) ((cl-lib (0 5))) "clean useless buffers" single ((:commit . "1be6c54e3095761b6b64bf749faae3dfce94e72a") (:keywords "convenience" "usability" "buffers"))]) (clean-aindent-mode . [(20171017 1343) nil "Simple indent and unindent, trims indent white-space" single ((:commit . "a97bcae8f43a9ff64e95473e4ef0d8bafe829211") (:url . "https://github.com/pmarinov/clean-aindent-mode") (:keywords "indentation" "whitespace" "backspace"))]) (clang-format . [(20171202 1318) ((cl-lib (0 3))) "Format code using clang-format" single ((:commit . "dee259662042ea4f7f339fd95970bb504e440cca") (:keywords "tools" "c"))]) (cl-lib-highlight . [(20140127 1312) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ((:commit . "fd1b308e6e989791d1df14438efa6b77d20f7c7e") (:url . "https://github.com/skeeto/cl-lib-highlight"))]) (cl-format . [(20160412 1745) nil "CL format routine." tar ((:commit . "4380cb8009c47cc6d9098b383082b93b1aefa460"))]) (circe-notifications . [(20180102 1518) ((emacs (24 4)) (circe (2 3)) (alert (1 2))) "Add desktop notifications to Circe." single ((:commit . "291149ac12877bbd062da993479d3533a26862b0") (:url . "https://github.com/eqyiel/circe-notifications"))]) (circe . [(20180105 1158) ((cl-lib (0 5))) "Client for IRC in Emacs" tar ((:commit . "9835ecb758c09400082eb8f1c0336eedbfed0134") (:url . "https://github.com/jorgenschaefer/circe"))]) (circadian . [(20171215 1403) ((emacs (24 4))) "Theme-switching based on daytime" single ((:commit . "bb49da54b2fb57524066e54ffee27cb9549ec925") (:url . "https://github.com/GuidoSchmidt/circadian") (:keywords "circadian" "themes"))]) (cinspect . [(20150715 1933) ((emacs (24)) (cl-lib (0 5)) (deferred (0 3 1)) (python-environment (0 0 2))) "Use cinspect to look at the CPython source of builtins and other C objects!" single ((:commit . "4e199a90f89b335cccda1518aa0963e0a1d4fbab") (:url . "https://github.com/inlinestyle/cinspect-mode") (:keywords "python"))]) (cil-mode . [(20160622 730) nil "Common Intermediate Language mode" single ((:commit . "a78a88ca9a66a82f069329a96e34b67478ae2d9b") (:url . "https://github.com/ForNeVeR/cil-mode") (:keywords "languages"))]) (ciel . [(20170330 526) ((emacs (24))) "A command that is clone of \"ci\" in vim." single ((:commit . "8c73f78d60ef52d3c395a9629963a63439b8a83e") (:url . "https://github.com/cs14095/ciel.el") (:keywords "convinience"))]) (cider-spy . [(20160313 740) ((emacs (24 4)) (cider (0 10 0)) (dash (2 5 0)) (cl-lib (0 5)) (noflet (0 0 15))) "Spy on CIDER to get info" single ((:commit . "0224608d240e9900e588b6df049c2a87c24fc936") (:url . "http://www.github.com/jonpither/cider-spy") (:keywords "languages" "clojure" "cider" "nrepl"))]) (cider-profile . [(20141120 625) ((cider (0 8 0))) "CIDER profiling support" single ((:commit . "9aa7e404f53f5136ac8d15301ce8ca2924785cb3") (:url . "http://github.com/thunknyc/nrepl-profile") (:keywords "cider" "clojure" "profiling"))]) (cider-hydra . [(20161018 2254) ((cider (0 14 0)) (hydra (0 13 0))) "Hydras for CIDER." single ((:commit . "6bb341143fe16f12be2262b2bcd003a246962676") (:url . "https://github.com/clojure-emacs/cider-hydra") (:keywords "convenience" "tools"))]) (cider-eval-sexp-fu . [(20160907 100) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexp." single ((:commit . "5687e7b33e17f2be40b036dac82da4a5bc6705fb") (:keywords "languages" "clojure" "cider"))]) (cider-decompile . [(20151121 2137) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" single ((:commit . "5d87035f3c3c14025e8f01c0c53d0ce2c8f56651") (:url . "http://www.github.com/clojure-emacs/cider-decompile") (:keywords "languages" "clojure" "cider"))]) (cider . [(20180122 2345) ((emacs (24 4)) (clojure-mode (5 6 0)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 7)) (seq (2 16))) "Clojure Interactive Development Environment that Rocks" tar ((:commit . "a34c8b088ef05a3626507180ef2b1daeed29e586") (:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider"))]) (chruby . [(20180114 852) ((cl-lib (0 5))) "Emacs integration for chruby" single ((:commit . "42bc6d521f832eca8e2ba210f30d03ad5529788f") (:url . "https://github.com/plexus/chruby.el") (:keywords "languages"))]) (chronos . [(20150602 829) nil "multiple simultaneous countdown / countup timers" tar ((:commit . "b360d9dae57aa553cf2a14ffa0756a51ad71de09") (:url . "http://github.com/dxknight/chronos") (:keywords "calendar"))]) (choice-program . [(20171004 931) ((emacs (25)) (cl-lib (1 0))) "parameter based program" tar ((:commit . "27607ec1fe241c58fbc1f861454a8e2ec1fd7b15") (:url . "https://github.com/plandes/choice-program") (:keywords "exec" "execution" "parameter" "option"))]) (chinese-yasdcv . [(20171014 1844) ((cl-lib (0 5)) (pyim (1 6 0))) "Yet another StarDict frontend" tar ((:commit . "5ab830daf1273d5a5cddcb94b56a9737f12d996f") (:url . "https://github.com/tumashu/chinese-yasdcv") (:keywords "convenience" "chinese" "dictionary"))]) (chinese-word-at-point . [(20170811 241) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single ((:commit . "8223d7439e005555b86995a005b225ae042f0538") (:url . "https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords "convenience" "chinese"))]) (chinese-wbim . [(20150623 2050) nil "Enable Wubi Input Method in Emacs." tar ((:commit . "57ff61ff3895d77335709d24b40cefc4d10b0095"))]) (chinese-number . [(20161007 2209) nil "Convert numbers between Arabic and Chinese formats" single ((:commit . "7311c2a0c5eea5f016a90d733dfe75144c302fb2") (:url . "https://github.com/zhcosin/chinese-number"))]) (chinese-conv . [(20170807 1428) ((cl-lib (0 5))) "Conversion between Chinese Characters with opencc or cconv" single ((:commit . "b56815bbb163d642e97fa73093b5a7e87cc32574") (:url . "https://github.com/gucong/emacs-chinese-conv"))]) (chicken-scheme . [(20141116 1139) nil "Scheme-mode extensions for Chicken Scheme" single ((:commit . "19b0b08b5592063e852cae094b394c7d1f923639") (:url . "http://github.com/dleslie/chicken-scheme"))]) (cherry-blossom-theme . [(20150621 2042) ((emacs (24 0))) "a soothing color theme for Emacs24." single ((:commit . "eea7653e00f35973857ee23b27bc2fae5e753e50") (:url . "https://github.com/inlinestyle/emacs-cherry-blossom-theme"))]) (chef-mode . [(20111121 700) nil "minor mode for editing an opscode chef repository" single ((:commit . "c333dd3f9229c4f35fe8c4495b21049ba730cc42") (:keywords "chef" "knife"))]) (cheerilee . [(20160313 1135) ((xelb (0 1))) "Toolkit library" tar ((:commit . "41bd81b5b0bb657241ceda5be6af5e07254d7376") (:keywords "tools"))]) (chee . [(20171123 1433) ((dash (2 12 1)) (s (1 10 0)) (f (0 18 2))) "Interface to chee using dired and image-dired" tar ((:commit . "669ff9ee429f24c3c2d03b83d9cb9aec5f86bb8b") (:url . "https://github.com/eikek/chee/tree/release/0.3.0/emacs"))]) (checkbox . [(20141116 1658) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single ((:commit . "335afa4404adf72973195a580458927004664d98") (:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience"))]) (cheatsheet . [(20170126 1350) ((emacs (24)) (cl-lib (0 5))) "create your own cheatsheet" single ((:commit . "e4f8e0110167ea16a17a74517d1f10cb7ff805b8") (:url . "http://github.com/darksmile/cheatsheet/") (:keywords "convenience" "usability"))]) (cheat-sh . [(20170802 418) ((emacs (24))) "Interact with cheat.sh" single ((:commit . "e90445124f3f145a047779e42d070a3c5e150f70") (:url . "https://github.com/davep/cheat-sh.el") (:keywords "docs" "help"))]) (chatwork . [(20170510 2142) nil "ChatWork client for Emacs" single ((:commit . "fea231d479f06bf40dbfcf45de143eecc9ed744c") (:url . "https://github.com/ataka/chatwork") (:keywords "web"))]) (charmap . [(20160309 146) nil "Unicode table for Emacs" single ((:commit . "bd4b3e466d7a9433cf35167e3a68ec74fe631bb2") (:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs"))]) (char-menu . [(20171231 2218) ((emacs (24 3)) (avy-menu (0 1))) "Create your own menu for fast insertion of arbitrary symbols" single ((:commit . "3235f8e3c88848ce10d25f84a5da39061fd35c0d") (:url . "https://github.com/mrkkrp/char-menu") (:keywords "convenience" "editing"))]) (chapel-mode . [(20160504 108) nil "a CC Mode for Chapel derived from derived-mode-ex.el" single ((:commit . "6e095edd7639f5f0a81e14d6412410b49466697e") (:keywords "chapel" "languages" "oop"))]) (change-inner . [(20150707 844) ((expand-region (0 7))) "Change contents based on semantic units" single ((:commit . "52c543a4b9808c0d15b565fcdf646c9779de33e8") (:keywords "convenience" "extensions"))]) (challenger-deep-theme . [(20171229 435) ((emacs (24))) "challenger-deep Theme" single ((:commit . "e0462b42218c94288f5c8a62f2b217bb8037995a") (:url . "https://github.com/challenger-deep-theme/emacs"))]) (cg . [(20171123 301) nil "major mode for editing Constraint Grammar files" single ((:commit . "e19f3bf60b9c8dbcff053b008fa3ace17fc073fe") (:url . "https://visl.sdu.dk/constraint_grammar.html") (:keywords "languages"))]) (cftag-mode . [(20170811 2240) ((emacs (25))) "Emacs mode for editing tag-based CFML files" single ((:commit . "86e77dcbb583191a3e755bdc29534f33d82bfc56") (:url . "https://github.com/am2605/cftag-mode"))]) (cframe . [(20170917 1509) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "customize a frame and fast switch size and positions" single ((:commit . "bb99672502046e87c8f029ce98c637f762a4fc54") (:url . "https://github.com/plandes/cframe") (:keywords "frame" "customize"))]) (cfml-mode . [(20170903 1949) ((emacs (25)) (mmm-mode (0 5 4)) (cftag-mode (1 0 0))) "Emacs mode for editing CFML files" single ((:commit . "86e77dcbb583191a3e755bdc29534f33d82bfc56") (:url . "https://github.com/am2605/cfml-mode"))]) (cff . [(20160118 1218) ((cl-lib (0 5)) (emacs (24))) "Search of the C/C++ file header by the source and vice versa" single ((:commit . "b6ab2a28e64ef06f281ec74cfe3114e450644dfa") (:url . "https://github.com/fourier/cff") (:keywords "find-file"))]) (cfengine-code-style . [(20171115 1308) nil "C code style for CFEngine project." single ((:commit . "a9223abdec4445fb47749b4093d5a29853787e94") (:url . "https://github.com/cfengine/core"))]) (ceylon-mode . [(20170806 919) ((emacs (25))) "Major mode for editing Ceylon source code" single ((:commit . "1267447a38648502627005bfad0a3aef3572ef7d") (:url . "https://github.com/lucaswerkmeister/ceylon-mode") (:keywords "languages" "ceylon"))]) (cerbere . [(20140418 715) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar ((:commit . "dd2105c372b469954e665a5aa0c3766b4922ce6a") (:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd"))]) (centimacro . [(20140306 627) nil "Assign multiple macros as global key bindings" single ((:commit . "1b97a9b558ed9c49d5da1bfbf29b2506575c2742") (:url . "https://github.com/abo-abo/centimacro") (:keywords "macros"))]) (centered-cursor-mode . [(20180112 755) nil "cursor stays vertically centered" single ((:commit . "319636448ffb7dba5fade3b2599ed9c1fd3bf8c8") (:url . "https://github.com/andre-r/centered-cursor-mode.el") (:keywords "convenience"))]) (celestial-mode-line . [(20171210 1045) ((emacs (24))) "Show lunar phase and sunrise/-set time in modeline" single ((:commit . "018b5eb215be58fbae971d9013599966eaa569dc") (:url . "https://github.com/ecraven/celestial-mode-line") (:keywords "extensions"))]) (celery . [(20170225 124) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single ((:commit . "51197d74f5eaa8ae09144af7663a2f4277f07d16") (:url . "https://github.com/ardumont/emacs-celery") (:keywords "celery" "convenience"))]) (cedit . [(20141231 814) nil "paredit-like commands for c-like languages" single ((:commit . "0878d851b6307c162bfbddd2bb02789e5e27bc2c") (:url . "http://hins11.yu-yake.com/"))]) (cdnjs . [(20161031 822) ((dash (2 13 0)) (deferred (0 4)) (f (0 17 2)) (pkg-info (0 5))) "A front end for http://cdnjs.com" single ((:commit . "ce19880d3ec3d81e6c665d0b1dfea99cc7a3f908") (:url . "https://github.com/yasuyk/cdnjs.el") (:keywords "tools"))]) (cdlatex . [(20140707 426) nil "Fast input methods for LaTeX environments and math" single ((:commit . "ff534912b93fc2c7a6b191b1c8d6d699a46bbb01") (:keywords "tex"))]) (cdb . [(20151205 543) nil "constant database (cdb) reader for Emacs Lisp" single ((:commit . "16d156562aef72f02ced58087335ed72d520d878") (:keywords "cdb"))]) (cd-compile . [(20141108 1157) nil "run compile in a specific directory" single ((:commit . "10284ccae86afda4a37b09ba90acd1e2efedec9f"))]) (ccc . [(20151205 543) nil "buffer local cursor color control library" single ((:commit . "16d156562aef72f02ced58087335ed72d520d878") (:url . "https://github.com/skk-dev/ddskk/blob/master/READMEs/README.ccc.org") (:keywords "cursor"))]) (cbm . [(20171116 440) ((cl-lib (0 5))) "Switch to similar buffers." single ((:commit . "5b41c936ba9f6d170309a85ffebc9939c1050b31") (:url . "http://github.com/akermu/cbm.el") (:keywords "buffers"))]) (catmacs . [(20170826 457) ((emacs (24))) "Simple CAT interface for Yaesu Transceivers." single ((:commit . "65d3e0563abe6ff9577202cf2278074d4130fbdd") (:url . "https://bitbucket.org/pymaximus/catmacs") (:keywords "comm" "hardware"))]) (caskxy . [(20140513 839) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single ((:commit . "dc18dcab7ed526070ab76de071c9c5272e6ac40e") (:url . "https://github.com/aki2o/caskxy") (:keywords "convenience"))]) (cask-package-toolset . [(20170921 1556) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar ((:commit . "2c74cd827e88c7f8360581a841e45f0b794510e7") (:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords "convenience" "tools"))]) (cask-mode . [(20160410 749) ((emacs (24 3))) "major mode for editing Cask files" single ((:commit . "7c6719d3bb4fe552958634bd5a11abc56681f3a7"))]) (cask . [(20180119 1906) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) "Cask: Project management for Emacs package development" tar ((:commit . "b273d184c62122107bc53c25331d5e08ef95573e") (:url . "http://github.com/cask/cask") (:keywords "speed" "convenience"))]) (caseformat . [(20160115 815) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (s (1 10 0))) "Format based letter case converter" single ((:commit . "92a31f6a7cae0b4e2af106cd6f2b0abe6c2d8921") (:url . "https://github.com/HKey/caseformat") (:keywords "convenience"))]) (caroline-theme . [(20160317 2220) ((emacs (24))) "A trip down to New Orleans..." single ((:commit . "222fd483db304509f9e422dc82883d808e023ceb") (:url . "https://github.com/xjackk/carolines-theme"))]) (cargo . [(20171218 855) ((emacs (24 3)) (rust-mode (0 2 0))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar ((:commit . "ba652e464ccdd0860fbc5d932c2ae86c9a31a200") (:keywords "tools"))]) (capture . [(20130828 944) nil "screencasting with \"avconv\" or \"ffmpeg\"" tar ((:commit . "1bb26060311da76767f70096218313fc93b0c806"))]) (caml . [(20171209 1232) nil "OCaml code editing commands for Emacs" tar ((:commit . "e797c5f01c0eb3a8a803efe43113ea4ae969b48b") (:url . "https://github.com/ocaml/ocaml/") (:keywords "ocaml"))]) (camcorder . [(20160404 2134) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single ((:commit . "b13d939990e6709492efefc0945798adc1c0fcb9") (:url . "http://github.com/Bruce-Connor/camcorder.el") (:keywords "multimedia" "screencast"))]) (calmer-forest-theme . [(20130925 2210) nil "Darkish theme with green/orange tint" single ((:commit . "87ba7bae389084d13fe3bc34e0c923017eda6ba0") (:url . "https://github.com/caldwell/calmer-forest-theme"))]) (calfw-org . [(20160302 1858) nil "calendar view for org-agenda" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar" "org"))]) (calfw-ical . [(20150703 119) nil "calendar view for ical format" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar"))]) (calfw-howm . [(20170703 1704) nil "calendar view for howm" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar"))]) (calfw-gcal . [(20120111 200) nil "edit Google calendar for calfw.el." tar ((:commit . "14aab20687d6cc9e6c5ddb9e11984c4e14c3d870") (:url . "https://github.com/myuhe/calfw-gcal.el") (:keywords "convenience" "calendar" "calfw.el"))]) (calfw-cal . [(20170320 506) nil "calendar view for emacs diary" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar"))]) (calfw . [(20180117 1645) nil "Calendar view framework on Emacs" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar"))]) (calendar-norway . [(20160827 1316) nil "Norwegian calendar" single ((:commit . "8501b2ee515e995f345365391b03f44c812cabdf") (:keywords "calendar" "norwegian" "localization"))]) (cal-china-x . [(20170122 1100) ((cl-lib (0 5))) "Chinese localization, lunar/horoscope/zodiac info and more..." tar ((:commit . "2e9f8e17969a32268fa1c69b500d28590338a98e") (:url . "https://github.com/xwl/cal-china-x"))]) (cakecrumbs . [(20180118 912) ((emacs (24 4))) "Show parents on header for HTML/Jade/Sass/Stylus" single ((:commit . "57888efc1ea983501d01d398e1147b1e7960a6a7") (:url . "https://github.com/kuanyui/cakecrumbs.el") (:keywords "languages" "html" "jade" "pug" "sass" "scss" "stylus"))]) (cake2 . [(20140626 542) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP2 Minor Mode" tar ((:commit . "caffb646c86333b8747cefeba070d57ac4fbaf00") (:url . "http://code.101000lab.org"))]) (cake-inflector . [(20140415 158) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single ((:commit . "a1d338ec4840b1b1bc14f7f9298c07e2c1d2d8fc") (:url . "https://github.com/k1LoW/emacs-cake-inflector"))]) (cake . [(20140603 2131) ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP Minor Mode" tar ((:commit . "a7c9f3bee71eb3865060123d4d98e5397c2f967e") (:url . "https://github.com/k1LoW/emacs-cake"))]) (cacoo . [(20120319 1659) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar ((:commit . "c9fa04fbe97639b24698709530361c2bb5f3273c"))]) (cache . [(20111019 1600) nil "implementation of a hash table whose key-value pairs expire" single ((:commit . "7499586b6c8224df9f5c5bc4dec96b008258d580"))]) (cabledolphin . [(20160204 138) ((emacs (24 4)) (seq (1 0))) "capture Emacs network traffic" single ((:commit . "fffc192cafa61558e924323d6da8166fe5f2a6f9") (:keywords "comm"))]) (c0-mode . [(20151110 1052) nil "Major mode for editing C0 files" tar ((:commit . "c214093c36864d6208fcb9e6a72413ed17ed5d60") (:url . "http://c0.typesafety.net/") (:keywords "c0" "languages"))]) (c-eldoc . [(20170917 1502) nil "helpful description of the arguments to C functions" single ((:commit . "79d09769362228058246f5e6fa183d121f7fb322") (:url . "http://github.com/nflath/c-eldoc"))]) (c-c-combo . [(20151223 1855) nil "Make stuff happen when you reach a target wpm" tar ((:commit . "a261a833499a7fdc29610863b3aafc74818770ba") (:url . "https://www.github.com/CestDiego/c-c-combo.el"))]) (button-lock . [(20150223 554) nil "Clickable text defined by regular expression" single ((:commit . "f9082feb329432fcf2ac49a95e64bed9fda24d58") (:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions"))]) (buttercup . [(20171029 1011) nil "Behavior-Driven Emacs Lisp Testing" tar ((:commit . "bbbf6924ff214b518718687ead96ceec92bdbaba"))]) (butler . [(20150811 1708) ((deferred (0 3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar ((:commit . "8ceb35737107572455cca9a61ff46b3ff78f1016"))]) (busybee-theme . [(20170719 228) nil "port of vim's mustang theme" single ((:commit . "66b2315b030582d0ebee605cf455d386d8c30fcd") (:url . "http://github.com/mswift42/busybee-theme"))]) (buster-snippets . [(20151125 210) ((yasnippet (0 8 0))) "Yasnippets for the Buster javascript testing framework" tar ((:commit . "bb8769dae132659858e74d52f3f4e8790399423a") (:keywords "snippets"))]) (buster-mode . [(20140928 513) nil "Minor mode to speed up development when writing tests with Buster.js" single ((:commit . "de6958ef8369400922618b8d1e99abfa91b97ac5") (:keywords "buster" "testing" "javascript"))]) (bury-successful-compilation . [(20150328 1728) nil "Bury the *compilation* buffer after successful compilation" single ((:commit . "52da2c07419beceab9b4d426d76adb3dcf2548d1") (:keywords "compilation"))]) (bundler . [(20160815 215) ((inf-ruby (2 1)) (cl-lib (0 5))) "Interact with Bundler from Emacs" single ((:commit . "f981f67c33b42243e57a78c358dffff70022b56b") (:url . "http://github.com/endofunky/bundler.el") (:keywords "bundler" "ruby"))]) (build-status . [(20171111 1147) ((cl-lib (0 5))) "Mode line build status indicator" single ((:commit . "ef44185d9dd748ea578d68398f3f729a8adb45b5") (:url . "http://github.com/sshaw/build-status") (:keywords "mode-line" "ci" "circleci" "travis-ci"))]) (build-helper . [(20161009 1055) ((projectile (0 9 0))) "Utilities to help build code" single ((:commit . "7a6fe71125a26ed1c492dab77cc688a7fe1d68ac") (:url . "http://github.com/afonso360/build-helper") (:keywords "convenience"))]) (bui . [(20171215 930) ((emacs (24 3)) (dash (2 11 0))) "Buffer interface library" tar ((:commit . "af1a237b4d1ed31780dd37bcbef51fc8ca9b0603") (:url . "https://github.com/alezost/bui.el") (:keywords "tools"))]) (bug-reference-github . [(20131202 1303) nil "Automatically set `bug-reference-url-format' in Github repositories." tar ((:commit . "6f693e1f659d9a75abea3f23e95946c7f67138cd") (:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools"))]) (bufshow . [(20130726 1138) ((emacs (24 1))) "A simple presentation tool for Emacs." single ((:commit . "d60a554e7239e6f7520d9c3436d5ecdbc9cf6957") (:url . "https://github.com/pjones/bufshow"))]) (buffer-watcher . [(20170913 139) ((f (0 16 2)) (cl-lib (0 5))) "Easily run shell scripts per filetype/directory when a buffer is saved" single ((:commit . "b32c67c8a5d724257d759f4c903d0dedc32246ef"))]) (buffer-utils . [(20140512 700) nil "Buffer-manipulation utility functions" single ((:commit . "685b13457e3a2085b7584e41365d2aa0779a1b6f") (:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions"))]) (buffer-sets . [(20170717 2040) ((cl-lib (0 5))) "Sets of Buffers for Buffer Management" single ((:commit . "4a4ccb0d6916c3e9fba737bb7b48e8aac921954e") (:url . "http://github.com/swflint/buffer-sets") (:keywords "buffer-management"))]) (buffer-move . [(20160615 1103) nil "easily swap buffers" single ((:commit . "cb517ecf8409b5fdcda472d7190c6021f0c49751") (:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience"))]) (buffer-manage . [(20170916 957) ((emacs (25)) (choice-program (0 3)) (dash (2 13 0))) "manage buffers" tar ((:commit . "4a0d526ca45264971796efe67c6e41d8aa659e4c") (:url . "https://github.com/plandes/buffer-manage") (:keywords "interactive" "buffer" "management"))]) (buffer-flip . [(20160811 713) ((key-chord (20150808))) "Use key-chord to cycle through buffers like Alt-Tab in Windows" single ((:commit . "386067141ca77848b266e068f8c6baf6b4c2ab5b") (:url . "https://github.com/killdash9/buffer-flip.el") (:keywords "convenience"))]) (buffer-buttons . [(20150106 639) nil "Define, save, and load code-safe buttons in files for emacs" single ((:commit . "2feb8494fa7863b98256bc85da670d74a3a8a975") (:url . "https://github.com/rpav/buffer-buttons"))]) (buckwalter . [(20180107 843) nil "Write arabic using Buckwalter transliteration" single ((:commit . "2aa5451c3682c268adebc6b1191a796466732f53") (:url . "https://github.com/joehakimrahme/buckwalter-arabic") (:keywords "arabic" "transliteration" "i18n"))]) (bubbleberry-theme . [(20141017 244) ((emacs (24 1))) "A theme based on LightTable for Emacs24" single ((:commit . "22e9adf4586414024e4592972022ec297321b320") (:url . "https://github.com/jasonm23/emacs-bubbleberry-theme"))]) (bts-github . [(20170401 549) ((bts (0 0 1)) (gh (0 8 2))) "A plugin of bts.el for GitHub" single ((:commit . "ef2cf9202dc2128e5efdb613bfde9276a8cd95ad") (:url . "https://github.com/aki2o/emacs-bts-github") (:keywords "convenience" "git" "github"))]) (bts . [(20151109 533) ((widget-mvc (0 0 2)) (log4e (0 3 0)) (yaxception (0 3 3)) (dash (2 9 0)) (s (1 9 0)) (pos-tip (0 4 5))) "A unified UI for various bug tracking systems" single ((:commit . "df42d58a36447697f93b56e69f5e700b2baef1f9") (:url . "https://github.com/aki2o/emacs-bts") (:keywords "convenience"))]) (btc-ticker . [(20151113 659) ((json (1 2)) (request (0 2 0))) "Shows latest bitcoin price" single ((:commit . "845235b545f070d0812cd1654cbaa4997565824f") (:keywords "news"))]) (bshell . [(20170903 1137) ((emacs (25)) (buffer-manage (0 5))) "manage and track multiple inferior shells" single ((:commit . "884a8b906617d305e9d5d2c3750618d2f86f9aed") (:url . "https://github.com/plandes/bshell") (:keywords "interactive" "shell" "management"))]) (browse-url-dwim . [(20140731 1222) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single ((:commit . "3d611dbb167c286109ac53995ad68286d87aafb9") (:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia"))]) (browse-kill-ring . [(20171219 1108) nil "interactively insert items from kill-ring" single ((:commit . "8debc43e41d7e51532698331c6f283905890b904") (:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience"))]) (browse-at-remote . [(20171115 210) ((f (0 17 2)) (s (1 9 0)) (cl-lib (0 5))) "Open github/gitlab/bitbucket/stash page from Emacs" single ((:commit . "31dcf77d7c89a12f230e2b2332585db2c44530ef") (:keywords "github" "gitlab" "bitbucket" "convenience"))]) (broadcast . [(20151204 1812) ((emacs (24 4))) "Links buffers together for simultaneous editing." single ((:commit . "f6f9cd2e0e3f8c31d6b8e7446c27eb0e50b25f16") (:url . "https://github.com/killdash9/broadcast.el") (:keywords "convenience" "frames" "link" "cursors"))]) (brainfuck-mode . [(20150113 42) ((langdoc (20130601 1450))) "Brainfuck mode for Emacs" single ((:commit . "36e69552bb3b97a4f888d362c59845651bd0d492") (:url . "https://github.com/tom-tan/brainfuck-mode/") (:keywords "brainfuck" "langdoc"))]) (bracketed-paste . [(20160407 1648) ((emacs (24 3))) "bracketed paste mode support within emacs -nw" single ((:commit . "843ce3bbb63d560face889e13a57a2f7543957d5") (:keywords "terminals"))]) (bpr . [(20170930 642) ((emacs (24))) "Background Process Runner" tar ((:commit . "314b0d6f69ff5a9c2d25a1ce5a2109d67d4d9bb3") (:url . "https://github.com/ilya-babanov/emacs-bpr") (:keywords "background" "async" "process" "management"))]) (bpe . [(20141228 1405) ((emacs (24 1))) "Blog from Org mode to Blogger" single ((:commit . "7b5b25f83506e6c9f4075d3803fa32404943a189") (:url . "https://github.com/yuutayamada/bpe") (:keywords "blogger" "blog"))]) (boxquote . [(20170802 417) ((cl-lib (0 5))) "Quote text with a semi-box." single ((:commit . "7e47e0e2853bc1215739b2e28f260e9eed93b2c5") (:url . "https://github.com/davep/boxquote.el") (:keywords "quoting"))]) (boron-theme . [(20170808 608) ((emacs (24 0))) "an Emacs 24 theme based on Boron (tmTheme)" single ((:commit . "87ae1a765e07429fec25d2f29b004f84b52d2e0a") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (borland-blue-theme . [(20160117 521) ((emacs (24 1))) "Blue/yellow theme based on old DOS Borland/Turbo C IDE" single ((:commit . "db74eefebbc89d3c62575f8f50b319e87b4a3470") (:url . "http://github.com/fourier/borland-blue-theme") (:keywords "themes"))]) (borg . [(20180117 339) ((emacs (26)) (dash (2 13)) (epkg (3 0)) (magit (2 11))) "assimilate Emacs packages as Git submodules" tar ((:commit . "454daf91e53e94292a59308c54b251fd83f99464") (:url . "https://github.com/emacscollective/borg") (:keywords "tools"))]) (boon . [(20180108 41) ((emacs (25 1)) (expand-region (0 10 0)) (dash (2 12 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar ((:commit . "836f25c5baa363691a8d31712d07248c0d9a49a7"))]) (bool-flip . [(20161215 739) ((emacs (24 3))) "flip the boolean under the point" single ((:commit . "f58a9a7b9ab875bcfbd57c8262697ae404eb4485") (:url . "http://github.com/michaeljb/bool-flip/") (:keywords "boolean" "convenience" "usability"))]) (boogie-friends . [(20171024 1955) ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (yasnippet (0 9 0 1)) (company (0 8 12))) "A collection of programming modes for Boogie, Dafny, and Z3 (SMTLIB v2)." tar ((:commit . "ff9903783013f3598b6f44c99d47b25c5cdbed00"))]) (bonjourmadame . [(20170919 434) nil "Say \"Hello ma'am!\"" single ((:commit . "d3df185fce78aefa689fded8e56a654f0fde4ac0"))]) (bongo . [(20171118 1842) ((cl-lib (0 5)) (emacs (24 1))) "play music with Emacs" tar ((:commit . "3d246be1e8d14865f5253567ab8fee5d4e9c470c"))]) (bog . [(20180113 759) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single ((:commit . "6ed4d3edbe771e586d873b826330f3ef23aa1611") (:url . "https://github.com/kyleam/bog") (:keywords "bib" "outlines"))]) (bnfc . [(20160605 1227) ((emacs (24 3))) "Define context-free grammars for the BNFC tool" single ((:commit . "1b58df1dd0cb9b81900632fb2843a03b94f56fdb") (:url . "https://github.com/jmitchell/bnfc-mode") (:keywords "languages" "tools"))]) (bm . [(20170815 1609) nil "Visible bookmarks in buffer." tar ((:commit . "b1bc10b1e9f01c48a7eedb9b08a22d05e7baed3c") (:url . "https://github.com/joodland/bm") (:keywords "bookmark" "highlight" "faces" "persistent"))]) (blog-minimal . [(20170311 555) ((ht (1 5)) (simple-httpd (1 4 6)) (mustache (0 22)) (s (1 11 0)) (org (9 0 3))) "a very simple static site generator based on org mode" tar ((:commit . "d679d74039ecc114b037800c8a94303265b9542a") (:url . "https://github.com/thiefuniverse/blog-minimal") (:keywords "blog" "org"))]) (blog-admin . [(20170923 709) ((ctable (0 1 1)) (s (1 10 0)) (f (0 17 3)) (names (20151201 0)) (cl-lib (0 5))) "Blog admin for emacs with hexo/org-page supported" tar ((:commit . "b5f2e1dad7d68ec903619f7280bb0bcb7e398a1e") (:keywords "tools" "blog" "org" "hexo" "org-page"))]) (blockdiag-mode . [(20160426 2224) ((emacs (24 3))) "Major mode for editing blockdiag files" single ((:commit . "f3b21ba433d60327cebd103ae4492200750e24a9") (:url . "https://github.com/xcezx/xdiag-mode"))]) (bln-mode . [(20170112 527) nil "binary line navigation minor mode for cursor movement in long lines" single ((:commit . "6c20b3269e88952c19ca9ad151221c7e2e27b465") (:url . "https://github.com/mgrachten/bln-mode") (:keywords "motion" "location" "cursor" "convenience"))]) (bliss-theme . [(20170808 607) ((emacs (24 0))) "an Emacs 24 theme based on Bliss (tmTheme)" single ((:commit . "c3cf6d8a666ab26909b7da158f9e94df71a5fbbf") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (blgrep . [(20150401 716) ((clmemo (20140321 715))) "Block grep" tar ((:commit . "605beda210610a5829750a987f5fcebea97af546") (:keywords "tools" "convenience"))]) (blackboard-theme . [(20161215 2256) ((emacs (24))) "TextMate Blackboard Theme" single ((:commit . "d8b984f2541bb86eb4363a2b4c94631e49843d4a") (:url . "https://github.com/don9z/blackboard-theme"))]) (blackboard-bold-mode . [(20160812 1906) ((cl-lib (0 5))) "Easily insert Unicode mathematical double-struck characters" single ((:commit . "5299cb064ba71baa3e331b8560bf8dd38cbbc4ed") (:url . "https://github.com/grettke/blackboard-bold-mode") (:keywords "unicode" "double struck" "blackboard bold" "math" "mathematical"))]) (bitlbee . [(20151202 1600) nil "Help get Bitlbee (http://www.bitlbee.org) up and running." single ((:commit . "3a92a4119e0c007df2c7dcf1b1c3a5f23ee40e05"))]) (bitbucket . [(20170404 2146) ((emacs (24)) (request (0 1 0)) (s (1 9 0))) "Bitbucket API wrapper" tar ((:commit . "5e663da1bd38a14c1ecf4d66a79d4321ac833bcf") (:url . "http://github.com/tjaartvdwalt/bitbucket.el/") (:keywords "bitbucket"))]) (bitbake . [(20160613 156) ((emacs (24 1)) (dash (2 6 0)) (mmm-mode (0 5 4)) (s (1 10 0))) "Running bitbake from emacs" single ((:commit . "4d9f0a4ffb7b9c6cd4d8271f1b429ca1bb7e9130") (:url . "https://github.com/canatella/bitbake-el") (:keywords "convenience"))]) (bison-mode . [(20160616 2252) nil "Major mode for editing bison, yacc and lex files." single ((:commit . "314af3b7af7eb897fd3932616cb8600a85228cea") (:keywords "bison-mode" "yacc-mode"))]) (birds-of-paradise-plus-theme . [(20130419 1429) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single ((:commit . "bb9f9d4ef7f7872a388ec4eee1253069adcadb6f") (:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes"))]) (bing-dict . [(20170604 1831) nil "Minimalists' English-Chinese Bing dictionary" single ((:commit . "d4b261739e53e8ed8fa5db3d3946de82c0ab8e34") (:url . "https://github.com/cute-jumper/bing-dict.el") (:keywords "extensions"))]) (bind-map . [(20161207 711) ((emacs (24 3))) "Bind personal keymaps in multiple locations" single ((:commit . "bf4181e3a41463684adfffc6c5c305b30480e30f") (:url . "https://github.com/justbur/emacs-bind-map"))]) (bind-key . [(20171210 2125) nil "A simple way to manage personal keybindings" single ((:commit . "05a4033b830bf52c596ceedea10b2cbd91f85fdb") (:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs"))]) (bind-chord . [(20171204 1210) ((bind-key (1 0)) (key-chord (0 6))) "key-chord binding helper for use-package-chords" single ((:commit . "05a4033b830bf52c596ceedea10b2cbd91f85fdb") (:url . "https://github.com/waymondo/use-package-chords") (:keywords "convenience" "tools" "extensions"))]) (binclock . [(20170802 416) ((cl-lib (0 5))) "Display the current time using a binary clock." single ((:commit . "87042230d7f3fe3e9a77fae0dbab7d8f7e7794ad") (:url . "https://github.com/davep/binclock.el") (:keywords "games" "time" "display"))]) (bifocal . [(20171004 1124) ((emacs (24 4))) "Split-screen scrolling for comint-mode buffers" single ((:commit . "a8b222b069a6bd64531b4780905989797bad8abe") (:url . "https://github.com/riscy/bifocal-mode") (:keywords "frames" "processes" "tools"))]) (bibtex-utils . [(20170817 1219) nil "Provides utilities for extending BibTeX mode" single ((:commit . "ed5ccce46c2088a28a2f0c49caa679d2f20567f0") (:url . "https://github.com/plantarum/bibtex-utils") (:keywords "bibtex"))]) (bibslurp . [(20151202 1546) ((s (1 6 0)) (dash (1 5 0))) "retrieve BibTeX entries from NASA ADS" single ((:commit . "aeba96368f2a06959e4fe945375ce2a54d34b189") (:url . "https://github.com/mkmcc/bibslurp") (:keywords "bibliography" "nasa ads"))]) (bibretrieve . [(20171125 727) ((auctex (11 87)) (emacs (24 3))) "Retrieve BibTeX entries from the internet" tar ((:commit . "da7b8c49e723e2327ab1d8625824389fb5324a80") (:url . "https://github.com/pzorin/bibretrieve") (:keywords "bibtex" "bibliography" "mathscinet" "arxiv" "zbmath"))]) (bibliothek . [(20180122 2021) ((emacs (24 4)) (pdf-tools (0 70)) (a (0 1 0 -3 4))) "Managing a digital library of PDFs" single ((:commit . "74bc667721d9e325989c9faadae0dce8ed22222b") (:url . "http://gkayaalp.com/emacs.html#bibliothek.el") (:keywords "tools"))]) (biblio-core . [(20160901 1115) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" single ((:commit . "a5a68fcf677f286f205f32dc7486f6c9f66aa6af") (:url . "http://github.com/cpitclaudel/biblio.el") (:keywords "bib" "tex" "convenience" "hypermedia"))]) (biblio . [(20161014 1604) ((emacs (24 3)) (biblio-core (0 2))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org" tar ((:commit . "a5a68fcf677f286f205f32dc7486f6c9f66aa6af"))]) (bfbuilder . [(20150924 950) ((cl-lib (0 3))) "A brainfuck development environment with interactive debugger" single ((:commit . "49560bdef131fa5672dab660e0c62376dbdcd906") (:url . "http://hins11.yu-yake.com/"))]) (bf-mode . [(20130403 742) nil "Browse file persistently on dired" single ((:commit . "7cc4d09aed64d9db6be95646f5f5067de68f8895") (:url . "https://github.com/emacs-jp/bf-mode") (:keywords "convenience"))]) (better-shell . [(20170215 1020) ((emacs (24 4))) "Better shell management" single ((:commit . "4ee06b8791f7363a19109d9ea6c5ee95ce998d33") (:url . "https://github.com/killdash9/better-shell") (:keywords "convenience"))]) (better-defaults . [(20170613 2104) nil "Fixing weird quirks and poor defaults" single ((:commit . "12d9e6dbf24a8a3369b19650d74471b17b27f78d") (:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience"))]) (bert . [(20131117 214) nil "BERT serialization library for Emacs" single ((:commit . "a3eec6980a725aa4abd2019e4c00246450260490") (:keywords "comm" "data"))]) (benchstat . [(20171013 2012) nil "proper benchmarking made simple" single ((:commit . "a5b67cf7972ca2bbc9f5bc6a0f521ab02b76d4f0") (:url . "https://github.com/Quasilyte/benchstat.el") (:keywords "lisp"))]) (benchmark-init . [(20150905 238) nil "Benchmarks Emacs require and load calls" tar ((:commit . "7a0f263282bbc86b01b662636306f22813082647") (:keywords "benchmark"))]) (beginend . [(20171003 548) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single ((:commit . "2762796b54c7fd8613b02c041b2b9afeb13eb9fa") (:url . "https://github.com/DamienCassou/beginend"))]) (beeminder . [(20160209 1903) ((org (7))) "Emacs interface for Beeminder" single ((:commit . "a4e159250bac89bc25ced8523a5eac2a951cd5b6") (:url . "http://www.philnewton.net/code/beeminder-el/") (:keywords "beeminder"))]) (beacon . [(20171017 1540) ((seq (2 14))) "Highlight the cursor whenever the window scrolls" single ((:commit . "729338b02a0e331a4faf475da9f54771a3470106") (:url . "https://github.com/Malabarba/beacon") (:keywords "convenience"))]) (bdo . [(20140126 101) nil "Do things to a browser page from Emacs. BETA!" tar ((:commit . "c96cb6aa9e97fa3491185c50dee0f77a13241010") (:keywords "development"))]) (bbyac . [(20171214 2054) ((browse-kill-ring (1 3)) (cl-lib (0 5))) "Type a little Bit, and Bang! You Are Completed." tar ((:commit . "b355c87723746dc61da464afba2adf9d4ece1db0") (:url . "https://github.com/baohaojun/bbyac") (:keywords "abbrev"))]) (bbdb2erc . [(20170221 554) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ((:commit . "15db2bd29df0f6ee32c499fdeffb960b6a7f97a0") (:keywords "irc" "contacts" "chat" "client" "internet"))]) (bbdb-vcard . [(20150713 1350) ((bbdb (3 0))) "vCard import/export for BBDB" tar ((:commit . "c3aafd4160854a38fd92afcdade32b9a13abe82c") (:url . "http://github.com/vgeddes/bbdb-vcard") (:keywords "data" "calendar" "mail" "news"))]) (bbdb-ext . [(20151220 1213) ((bbdb (2 36))) "Extra commands for BBDB" single ((:commit . "fee97b1b3faa83edaea00fbc5ad3cbca5e791a55") (:url . "https://github.com/vapniks/bbdb-ext") (:keywords "extensions"))]) (bbdb-csv-import . [(20180121 1649) ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) "import csv to bbdb version 3+" single ((:commit . "dbc2e0fe9e8ae65e494011044d905ae79b3cee3e") (:url . "https://gitlab.com/iankelling/bbdb-csv-import") (:keywords "csv" "util" "bbdb"))]) (bbdb . [(20180106 910) nil "The Insidious Big Brother Database for GNU Emacs" tar ((:commit . "f18720ff5cd963a0bf6fc0e41293e50c0172b8ae"))]) (bbdb- . [(20140221 1554) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single ((:commit . "2839e84c894de2513af41053e80a277a1b483d22") (:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail"))]) (bbcode-mode . [(20141103 1341) nil "Major mode for writing BBCode markup" single ((:commit . "b6ff1bfb8041b1435ebfc0a7d8e5e34eeb1b6aae") (:url . "https://github.com/ejmr/bbcode-mode"))]) (bazel-mode . [(20171226 1551) ((emacs (24 3))) "A major mode for editing Bazel files" single ((:commit . "6103da2dd9c9461e35a45fc0544ddf33410baa25") (:url . "https://github.com/codesuki/bazel-mode") (:keywords "languages" "bazel"))]) (bats-mode . [(20160513 2315) nil "Emacs mode for editing and running Bats tests" single ((:commit . "d519f7c89f5ae17dfc33400596df4564b478315f") (:url . "https://github.com/dougm/bats-mode") (:keywords "bats" "tests"))]) (basic-theme . [(20160817 127) ((emacs (24))) "Minimalistic light color theme" single ((:commit . "e2a855bd39f4b78296228d4b790f9123156f7d7e") (:url . "http://github.com/fgeller/basic-theme.el") (:keywords "theme" "basic" "minimal" "colors"))]) (basic-mode . [(20171204 1217) ((seq (2 20)) (emacs (24 3))) "major mode for editing BASIC code" single ((:commit . "b7e851f844e9a5264e44936d1675133b4c3ed39c") (:url . "https://github.com/dykstrom/basic-mode") (:keywords "basic" "languages"))]) (basic-c-compile . [(20170302 312) ((cl-lib (0 5)) (f (0 19 0))) "Quickly create a Makefile, compile and run C." single ((:commit . "0129786aeee50d7bb0020d9fc2b7508875d403e8") (:url . "https://github.com/nick96/basic-c-compile") (:keywords "c" "makefile" "compilation" "convenience"))]) (bash-completion . [(20170924 1021) nil "BASH completion for the shell buffer" single ((:commit . "31bc1c1c21691668c6cc16a46361490d5bec303a"))]) (base16-theme . [(20180114 1149) nil "Collection of themes built on combinations of 16 base colors" tar ((:commit . "3492ce6613e974a329c8773e09a615c28b48aa10") (:url . "https://github.com/belak/base16-emacs"))]) (bar-cursor . [(20160923 920) nil "package used to switch block cursor to a bar" single ((:commit . "afa1d4bc1937610cc30575d71aab85ea20ebf2ea") (:url . "https://github.com/ajsquared/bar-cursor") (:keywords "files"))]) (badwolf-theme . [(20161004 15) ((emacs (24))) "Bad Wolf color theme" single ((:commit . "ea01a3d9358e968f75e3ed15dec6a2a96ce3d9a1") (:url . "https://github.com/bkruczyk/badwolf-emacs") (:keywords "themes"))]) (badger-theme . [(20140716 1932) nil "A dark theme for Emacs 24." single ((:commit . "80fb9f8ace37b2e8807da639f7da499a53ffefd4") (:url . "https://github.com/ccann/badger-theme"))]) (backward-forward . [(20161228 2150) ((emacs (24 5))) "navigation backwards and forwards across marks" single ((:commit . "58489957a62a0da25dfb5df902624d2548d800b4") (:url . "https://gitlab.com/vancan1ty/emacs-backward-forward/tree/master") (:keywords "navigation" "convenience" "backward" "forward"))]) (backup-walker . [(20130720 816) nil "quickly traverse all backups of a file" single ((:commit . "934a4128c122972ac32bb9952addf279a60a94da") (:url . "https://github.com/lewang/backup-walker") (:keywords "backup"))]) (back-button . [(20150804 1304) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single ((:commit . "98d92984a740acd1547bd7ed05cca0affdb21c3e") (:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface"))]) (babel-repl . [(20160504 1501) ((emacs (24))) "Run babel REPL" single ((:commit . "e619c16e349a1ee7bd0ee0d7f3650d33bff73fc3") (:url . "https://github.com/hung-phan/babel-repl/") (:keywords "babel" "javascript" "es6"))]) (babel . [(20161122 2340) nil "interface to web translation services such as Babelfish" single ((:commit . "d4212e25fcbd22b8e38be13936f937a2963d34a9") (:url . "http://github.com/juergenhoetzel/babel") (:keywords "translation" "web"))]) (axiom-environment . [(20171111 1152) ((emacs (24 2))) "An environment for using Axiom/OpenAxiom/FriCAS" tar ((:commit . "b4f0fa9cd013e107d2af8e2ebedff8a7f40be7b5") (:keywords "axiom" "openaxiom" "fricas"))]) (aws-ec2 . [(20161007 1214) ((emacs (24 4)) (dash (2 12 1)) (tblui (0 1 0))) "Manage AWS EC2 instances" single ((:commit . "5601d4f268fc34b86a02ca90cde7d3771619a368") (:url . "https://github.com/Yuki-Inoue/aws.el"))]) (avy-zap . [(20160921 1444) ((avy (0 2 0))) "Zap to char using `avy'" single ((:commit . "6081738668ab726099ce1c711c580d9745dfaede") (:url . "https://github.com/cute-jumper/avy-zap") (:keywords "extensions"))]) (avy-migemo . [(20180104 624) ((emacs (24 4)) (avy (0 4 0)) (migemo (1 9))) "avy with migemo" tar ((:commit . "526494a2ae86b66a22848e5dc274480e3b4d04ca") (:url . "https://github.com/momomo5717/avy-migemo") (:keywords "avy" "migemo"))]) (avy-menu . [(20171231 2220) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" single ((:commit . "990cc94d708c923f761be083b3a57f6f844566c8") (:url . "https://github.com/mrkkrp/avy-menu") (:keywords "popup" "menu"))]) (avy-flycheck . [(20160720 800) ((emacs (24 1)) (flycheck (0 14)) (seq (1 11)) (avy (0 4 0))) "Jump to and fix syntax errors using `flycheck' with `avy' interface" single ((:commit . "5522f3bbbed1801d9278ed696ec0cbba38352985") (:url . "https://github.com/magicdirac/avy-flycheck") (:keywords "tools" "convenience" "avy" "flycheck"))]) (avy . [(20171230 220) ((emacs (24 1)) (cl-lib (0 5))) "Jump to arbitrary positions in visible text and select text quickly." single ((:commit . "34d3531a3cd35ae6b9e8dbc37343c027504fdcb0") (:url . "https://github.com/abo-abo/avy") (:keywords "point" "location"))]) (avk-emacs-themes . [(20180121 246) nil "Collection of avk themes" tar ((:commit . "7f1da34f0d74e5a922400b05fcfada5df1c0e3ce") (:url . "https://github.com/avkoval/avk-emacs-themes"))]) (avandu . [(20170101 1103) nil "Gateway to Tiny Tiny RSS" tar ((:commit . "f44588d8e747fa880411cb4542cc39962252b90a") (:keywords "net"))]) (autumn-light-theme . [(20150515 747) nil "A light color theme with muted, autumnal colors." single ((:commit . "1e3b2a43a3001e4a97a5ff073ba3f0d2ea3888f9") (:url . "http://github.com/aalpern/emacs-color-theme-autumn-light") (:keywords "color" "theme"))]) (autothemer . [(20170112 1324) ((dash (2 10 0)) (emacs (24)) (cl-lib (0 5))) "Conveniently define themes." single ((:commit . "8c467f57571c154129d660dfccebd151c998f2d9") (:url . "https://github.com/sebastiansturm/autothemer"))]) (autotetris-mode . [(20141114 846) ((cl-lib (0 5))) "automatically play tetris" single ((:commit . "dd490d5ad6d84bd964ab349484f6a2d05651ede1") (:url . "https://github.com/skeeto/autotetris-mode"))]) (autotest . [(20171128 1812) nil "ZenTest's autotest integration with emacs." single ((:commit . "c1b59448e103e32202423a56c873967033778a92") (:url . "https://github.com/zenspider/elisp/blob/master/autotest.el") (:keywords "testing" "ruby" "convenience"))]) (autopair . [(20160304 437) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ((:commit . "2b6d72bccb0ebba6e7e711528872b898b0c65b0a") (:url . "https://github.com/capitaomorte/autopair") (:keywords "convenience" "emulations"))]) (automargin . [(20131112 14) nil "add margins to windows not-splitted, and center them" single ((:commit . "4901d969ad69f5244e6300baab4ba04efed800c3") (:url . "http://hins11.yu-yake.com/"))]) (autodisass-llvm-bitcode . [(20150410 1825) nil "Automatically disassemble LLVM bitcode" tar ((:commit . "d2579e3a1427af2dc947c343e49eb3434078bf04"))]) (autodisass-java-bytecode . [(20151005 912) nil "Automatically disassemble Java bytecode" tar ((:commit . "3d61dbe266133c950b39e880f78d142751c7dc4c"))]) (autobookmarks . [(20171021 1532) ((dash (2 10 0)) (cl-lib (0 5))) "Save recently visited files and buffers" single ((:commit . "b40c69f2d1c419adad516bee81b07b99110e5cc3") (:keywords "files"))]) (auto-yasnippet . [(20160925 225) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single ((:commit . "d1ccfea87312c6dd8cf8501ab5b71b1d3d44d95b") (:url . "https://github.com/abo-abo/auto-yasnippet"))]) (auto-virtualenvwrapper . [(20170916 1304) ((cl-lib (0 6)) (s (1 10 0)) (virtualenvwrapper (0))) "Lightweight auto activate python virtualenvs" single ((:commit . "0f2cc8ea8f211c7b88f852ae6ffe677914652b92") (:keywords "python" "virtualenv" "tools"))]) (auto-virtualenv . [(20170125 1117) ((cl-lib (0 5)) (pyvenv (1 9)) (s (1 10 0))) "Auto activate python virtualenvs" single ((:commit . "3826db66b417788e2b2eb138717255b1f52a55c3") (:url . "http://github.com/marcwebbie/auto-virtualenv") (:keywords "python" "virtualenv" "tools"))]) (auto-sudoedit . [(20171227 156) ((emacs (24)) (f (0 19 0))) "auto sudo edit by tramp" single ((:commit . "5a6f7da018fbb880c4c51032b39d7628a478989c") (:url . "https://github.com/ncaq/auto-sudoedit"))]) (auto-shell-command . [(20160603 1938) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ((:commit . "454b75a07b663095334381d5bf5625c7f136f743") (:keywords "shell" "save" "async" "deferred" "auto"))]) (auto-save-buffers-enhanced . [(20161108 2310) nil "Automatically save buffers in a decent way" single ((:commit . "461e8c816c1b7c650be5f209078b381fe55da8c6"))]) (auto-read-only . [(20170305 2043) ((cl-lib (0 5))) "Automatically make the buffer to read-only" single ((:commit . "79654f8fc024f383ae7af05487c1345738236500") (:url . "https://github.com/zonuexe/auto-read-only.el") (:keywords "files" "convenience"))]) (auto-pause . [(20160426 516) ((emacs (24 4))) "Run processes which will be paused when Emacs is idle" single ((:commit . "a4d778de774ca3895542cb559a953e0d98657338") (:url . "https://github.com/lujun9972/auto-pause") (:keywords "convenience" "menu"))]) (auto-package-update . [(20170803 1005) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single ((:commit . "0b296970d09d7deb7f780cb041fcbc313d39aa5d") (:url . "http://github.com/rranelli/auto-package-update.el") (:keywords "package" "update"))]) (auto-org-md . [(20160923 708) ((org (8 0)) (emacs (24 4))) "export a markdown file automatically when you save an org-file" single ((:commit . "7604c06c1b2f1d01c2e88f114bb0d2d00f21dabb") (:url . "https://github.com/jamcha-aa/auto-org-md") (:keywords "org" "markdown"))]) (auto-minor-mode . [(20170917 1437) ((emacs (25))) "Enable minor modes by file name and contents" single ((:commit . "07ea9df59c5364d1938beef3dfbba24afd46c230") (:url . "https://github.com/joewreschnig/auto-minor-mode") (:keywords "convenience"))]) (auto-indent-mode . [(20171221 2106) nil "Auto indent Minor mode" tar ((:commit . "28069360a7f89ad0286fd6a53db550752ec58488") (:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation"))]) (auto-highlight-symbol . [(20130313 243) nil "Automatic highlighting current symbol minor mode" single ((:commit . "26573de912d760e04321b350897aea70958cee8b") (:url . "http://github.com/gennad/auto-highlight-symbol/raw/master/auto-highlight-symbol.el") (:keywords "highlight" "face" "match" "convenience"))]) (auto-dim-other-buffers . [(20170925 1208) nil "Makes non-current buffers less prominent" single ((:commit . "d1ee176652d7f5a77608e54175b7e67c31d41381") (:url . "https://github.com/mina86/auto-dim-other-buffers.el"))]) (auto-dictionary . [(20150410 910) nil "automatic dictionary switcher for flyspell" single ((:commit . "b364e08009fe0062cf0927d8a0582fad5a12b8e7") (:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp"))]) (auto-complete-sage . [(20160514 51) ((auto-complete (1 5 1)) (sage-shell-mode (0 1 0))) "An auto-complete source for sage-shell-mode." single ((:commit . "51b8e3905196d266e1f8aa47881189833151b398") (:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete"))]) (auto-complete-rst . [(20140225 144) ((auto-complete (1 4))) "Auto-complete extension for ReST and Sphinx" tar ((:commit . "4803ce41a96224e6fa54e6741a5b5f40ebed7351") (:url . "https://github.com/tkf/auto-complete-rst"))]) (auto-complete-pcmp . [(20140226 2251) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single ((:commit . "2595d3dab1ef3549271ca922f212928e9d830eec") (:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion"))]) (auto-complete-nxml . [(20140220 2058) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ((:commit . "ac7b09a23e45f9bd02affb31847263de4180163a") (:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml"))]) (auto-complete-exuberant-ctags . [(20140320 24) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single ((:commit . "ff6121ff8b71beb5aa606d28fd389c484ed49765") (:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags"))]) (auto-complete-distel . [(20160815 2300) ((auto-complete (1 4)) (distel-completion-lib (1 0 0))) "Erlang/distel completion backend for auto-complete-mode" single ((:commit . "2ba4eea51cecfa75cf62f58180460ee9ff43131f") (:url . "github.com/sebastiw/distel-completion") (:keywords "erlang" "distel" "auto-complete"))]) (auto-complete-clang-async . [(20130526 814) nil "Auto Completion source for clang for GNU Emacs" single ((:commit . "5d9c5cabbb6b31e0ac3637631c0c8b25184aa8b4") (:keywords "completion" "convenience"))]) (auto-complete-clang . [(20140409 52) ((auto-complete (1 3 1))) "Auto Completion source for clang for GNU Emacs" single ((:commit . "a195db1d0593b4fb97efe50885e12aa6764d998c") (:url . "https://github.com/brianjcj/auto-complete-clang") (:keywords "completion" "convenience"))]) (auto-complete-chunk . [(20140225 146) ((auto-complete (1 4))) "Auto-completion for dot.separated.words." single ((:commit . "a9aa77ffb84a1037984a7ce4dda25074272f13fe") (:url . "https://github.com/tkf/auto-complete-chunk"))]) (auto-complete-c-headers . [(20150911 2023) ((auto-complete (1 4))) "An auto-complete source for C/C++ header files" single ((:commit . "52fef720c6f274ad8de52bef39a343421006c511") (:keywords "c"))]) (auto-complete-auctex . [(20140223 958) ((yasnippet (0 6 1)) (auto-complete (1 4))) "auto-completion for auctex" single ((:commit . "855633f668bcc4b9408396742a7cb84e0c4a2f77"))]) (auto-complete . [(20170124 1845) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar ((:commit . "2e83566ddfa758c69afe50b8a1c62a66f47471e3"))]) (auto-compile . [(20180111 436) ((emacs (24 3)) (packed (2 0 0))) "automatically compile Emacs Lisp libraries" single ((:commit . "8d117868a0a091389d528428136e60f951e9c550") (:url . "https://github.com/emacscollective/auto-compile") (:keywords "compile" "convenience" "lisp"))]) (auto-auto-indent . [(20131106 1103) ((es-lib (0 1)) (cl-lib (1 0))) "Indents code as you type" single ((:commit . "0139378577f936d34b20276af6f022fb457af490") (:url . "https://github.com/sabof/auto-auto-indent"))]) (auto-async-byte-compile . [(20160915 2154) nil "Automatically byte-compile when saved" single ((:commit . "8681e74ddb8481789c5dbb3cafabb327db4c4484") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/auto-async-byte-compile.el") (:keywords "lisp" "convenience"))]) (auth-password-store . [(20171109 1045) ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) "Integrate auth-source with password-store" single ((:commit . "05e51a7b01cc9b1cec4fd8b51d999e0e59bfffbb") (:keywords "pass" "password-store" "auth-source" "username" "password" "login"))]) (aurel . [(20170114 137) ((emacs (24 3)) (bui (1 1 0)) (dash (2 11 0))) "Search, get info, vote for and download AUR packages" single ((:commit . "fc7ad208f43f8525f84a18941c9b55f956df8961") (:url . "https://github.com/alezost/aurel") (:keywords "tools"))]) (audio-notes-mode . [(20170611 1459) nil "Play audio notes synced from somewhere else." single ((:commit . "fa38350829c7e97257efc746a010471d33748a68") (:url . "http://github.com/Bruce-Connor/audio-notes-mode") (:keywords "hypermedia" "convenience"))]) (auctex-lua . [(20151121 810) ((auctex (11 86)) (lua-mode (20130419))) "Lua editing support for AUCTeX" single ((:commit . "799cd8ac10c96991bb63d9aa60528ae5d8c786b5") (:url . "http://github.com/vermiculus/auctex-lua") (:keywords "latex" "lua"))]) (auctex-latexmk . [(20170618 936) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single ((:commit . "4d353522650d7685acbf1d38f7dbc504f734bd84") (:url . "https://github.com/tom-tan/auctex-latexmk/") (:keywords "tex"))]) (atomic-chrome . [(20171116 2332) ((emacs (24 3)) (let-alist (1 0 4)) (websocket (1 4))) "Edit Chrome text area with Emacs using Atomic Chrome" single ((:commit . "7dd8a45ebccb9b5bbbfd2e822bd914b38dad6008") (:url . "https://github.com/alpha22jp/atomic-chrome") (:keywords "chrome" "edit" "textarea"))]) (atom-one-dark-theme . [(20180116 1024) nil "Atom One Dark color theme" single ((:commit . "fbe026c64f53bf5afa27c55fda6118d45cea7d5e") (:url . "https://github.com/jonathanchu/atom-one-dark-theme"))]) (atom-dark-theme . [(20170710 1612) nil "An Emacs port of the Atom Dark theme from Atom.io." single ((:commit . "7fb37fd953e417acbcf7dd3f36e3167bed9bc887") (:url . "https://github.com/whitlockjc/atom-dark-theme-emacs") (:keywords "themes" "atom" "dark"))]) (async-await . [(20170208 350) ((emacs (25)) (promise (1 0))) "Async/Await" single ((:commit . "56ab90e4019ed1f81fd4ad9e8701b5cec7ffa795") (:url . "https://github.com/chuntaro/emacs-async-await") (:keywords "async" "await" "convenience"))]) (async . [(20180119 533) nil "Asynchronous processing in Emacs" tar ((:commit . "15bcbf6beae65d7606f0655711159ca56f050c6b") (:keywords "async") (:url . "https://github.com/jwiegley/emacs-async"))]) (assess . [(20170504 657) ((emacs (24 1)) (m-buffer (0 15))) "Test support functions" tar ((:commit . "e5b0415126c6bd24bd220759ff04220d963a0195"))]) (asn1-mode . [(20170728 1926) ((emacs (24 3)) (s (1 10 0))) "ASN.1/GDMO mode for GNU Emacs" single ((:commit . "d5d4a8259daf708411699bcea85d322f18beb972") (:url . "https://github.com/kawabata/asn1-mode/") (:keywords "languages" "processes" "tools"))]) (asilea . [(20150105 725) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single ((:commit . "2aab1cc63b64ef08d12e84fd7ba5c94065f6039f") (:url . "https://github.com/Fanael/asilea"))]) (arview . [(20160419 1409) nil "extract and view archives in the temporary directory" single ((:commit . "5437b4221b64b238c273a651d4792c577dba6d45") (:url . "https://github.com/afainer/arview") (:keywords "files"))]) (artbollocks-mode . [(20170523 2122) nil "Improve your writing (especially about art)" single ((:commit . "4a907e470bf345b88c3802c1241ce2b8cf4123ee") (:url . "https://github.com/sachac/artbollocks-mode"))]) (arjen-grey-theme . [(20170522 1347) nil "A soothing dark grey theme" single ((:commit . "4cd0be72b65d42390e2105cfdaa408a1ead8d8d1") (:url . "https://github.com/credmp/arjen-grey") (:keywords "faces"))]) (ariadne . [(20131117 911) ((bert (0 1))) "Ariadne plugin for Emacs" single ((:commit . "6fe401c7f996bcbc2f685e7971324c6f5e5eaf15") (:keywords "comm" "convenience" "processes"))]) (aria2 . [(20141107 1517) ((emacs (24 4))) "Control aria2c commandline tool from Emacs" single ((:commit . "3c54254e424c6c8b4eb0d8e7c4907b094c27a3f0") (:url . "https://bitbucket.org/ukaszg/aria2-mode") (:keywords "download" "bittorrent" "aria2"))]) (arduino-mode . [(20151017 2335) nil "Major mode for the Arduino language" single ((:commit . "3e2bad4569ad26e929e6db2cbcff0d6d36812698") (:keywords "languages" "arduino"))]) (archive-rpm . [(20171016 112) ((emacs (24 4))) "RPM and CPIO support for archive-mode" tar ((:commit . "e2fac6c018c19001f1f28e7c80721724684f8941"))]) (archive-region . [(20140201 1542) nil "Move region to archive file instead of killing" single ((:commit . "0d357d4c42a6a248c457f358f81b20fd20fede2f") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/archive-region.el") (:keywords "languages"))]) (arch-packer . [(20170730 621) ((emacs (25 1)) (s (1 11 0)) (async (1 9 2)) (dash (2 12 0))) "Arch Linux package management frontend" single ((:commit . "940e96f7d357c6570b675a0f942181c787f1bfd7") (:url . "https://github.com/brotzeitmacher/arch-packer"))]) (apt-sources-list . [(20171004 1143) ((emacs (24 4))) "Mode for editing APT source.list files" single ((:commit . "842c3896f660295e4c16938aa1fd195e5d377460") (:url . "https://git.korewanetadesu.com/apt-sources-list.git"))]) (apropospriate-theme . [(20171010 1420) nil "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." tar ((:commit . "b4d5a2fedec176d3562943668609766fab0b23ff") (:keywords "color" "theme") (:url . "https://github.com/waymondo/apropospriate-theme"))]) (aproject . [(20150605 206) nil "Basic project framework for Emacs" tar ((:commit . "3c7d23c341862dfd77fd0a64775df12ddb44ab54") (:url . "https://github.com/vietor/aproject") (:keywords "environment" "project"))]) (applescript-mode . [(20090320 2332) nil "major mode for editing AppleScript source" single ((:commit . "8f888cd80af1e0902b5609143facd3051bc94892") (:keywords "languages" "tools"))]) (apples-mode . [(20110120 2018) nil "Major mode for editing and executing AppleScript code" tar ((:commit . "83a9ab0d6ba82496e2f7df386909b1a55701fccb") (:keywords "applescript" "languages"))]) (apiwrap . [(20180119 1941) ((emacs (25))) "api-wrapping macros" single ((:commit . "62c170856047792dc5879cd5b54ab523f09ab186") (:url . "https://github.com/vermiculus/apiwrap.el") (:keywords "tools" "maint" "convenience"))]) (apib-mode . [(20170520 658) ((markdown-mode (2 1))) "Major mode for API Blueprint files" single ((:commit . "6cc7c6f21b8e415b1718bb6a07ab2182e9e9dde6") (:url . "http://github.com/w-vi/apib-mode") (:keywords "tools" "api-blueprint"))]) (apel . [(20170122 1458) nil "APEL (A Portable Emacs Library) provides support for portable Emacs Lisp programs" tar ((:commit . "339eb28ffae3165255a79de9b1fd362f43cd37c3"))]) (apache-mode . [(20170711 913) nil "major mode for editing Apache configuration files" single ((:commit . "0906559e0cb2997405d98ea6b2195954e3935d3b") (:keywords "languages" "faces"))]) (aozora-view . [(20140310 617) nil "Aozora Bunko text Emacs viewer." tar ((:commit . "b0390616d19e45f15f9a2f5d5688274831e721fd") (:url . "https://github.com/kawabata/aozora-view") (:keywords "text"))]) (anzu . [(20161017 907) ((emacs (24 3))) "Show number of matches in mode-line while searching" single ((:commit . "e6c56ca8b23ac433f7be58b6f3f50801dd4164e4") (:url . "https://github.com/syohex/emacs-anzu"))]) (anything-tramp . [(20171224 601) ((emacs (24 3)) (anything (1 0))) "Tramp with anything for ssh and docker and vagrant" single ((:commit . "7364472a8e9ddaafdff7ad004c7a2bad42da9d92") (:url . "https://github.com/masasam/emacs-anything-tramp"))]) (anything-sage . [(20141005 413) ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) "An anything extension for sage-shell-mode." single ((:commit . "370b4248935dd4527127954788a028399644f578") (:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything"))]) (anything-replace-string . [(20140317 336) ((anything (1 3 9))) "`replace-string' and `query-replace' `anything.el' interface" single ((:commit . "1962f24243d6013bcef7e8d23136277d42e13130") (:url . "http://code.101000lab.org"))]) (anything-prosjekt . [(20140129 4) ((prosjekt (0 3)) (anything (0))) "Anything integration for prosjekt." single ((:commit . "a864a8be5842223043702395f311e3350c28e9db") (:url . "https://github.com/abingham/prosjekt"))]) (anything-milkode . [(20140518 743) ((milkode (0 3)) (anything (1 3 9))) "Command line search with Milkode" single ((:commit . "d6b2be13a351c41793e9cc13c1320953939d3ac9") (:keywords "milkode" "anything" "search" "grep" "jump" "keyword"))]) (anything-git-grep . [(20130608 1940) ((anything (1 3 9))) "anything for git grep" tar ((:commit . "6ee26e68bb8ec23ffacf5c5f9698c451a4bc905c") (:url . "https://github.com/mechairoi/anything-git-grep") (:keywords "anything" "git"))]) (anything-git-files . [(20130609 243) ((anything (1 3 9))) "anything for git files" single ((:commit . "efeec4f8001e2a95f36a9c31181bb30f7561015c") (:keywords "anything" "git"))]) (anything-exuberant-ctags . [(20140316 1637) ((anything (1 3 9))) "Exuberant ctags anything.el interface" single ((:commit . "8ed688fd526751e044435bb77135f5315c8167e5") (:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags"))]) (anything . [(20170125 1710) nil "open anything / QuickSilver-like candidate-selection framework" tar ((:commit . "9e2259fc779eef1a3e947e74cc7d301d1cea0ca6") (:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines"))]) (anyins . [(20131229 241) nil "Insert content at multiple places from shell command or kill-ring" single ((:commit . "83844c17ac9b5b6c7655ee556b75689e4c8ea663") (:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular"))]) (anybar . [(20160816 721) nil "Control AnyBar from Emacs" single ((:commit . "7a0743e0d31bcb36ab1bb2e351f3e7139c422ac5") (:keywords "anybar"))]) (anx-api . [(20140208 714) nil "Interact with the AppNexus API from Emacs." single ((:commit . "b2411ebc966ac32c3ffc61bc22bf183834df0fa0") (:keywords "convenience" "json" "rest" "api" "appnexus"))]) (anti-zenburn-theme . [(20180121 353) nil "Low-contrast Zenburn-inverted theme" single ((:commit . "c80cc51bb1aaf11dd53b9d08e01d61bc9b32622f") (:url . "https://github.com/m00natic/anti-zenburn-theme"))]) (ant . [(20160211 743) nil "helpers for compiling with ant" single ((:commit . "510b5a3f57ee4b2855422d88d359a28922c1ab70") (:keywords "compilation" "ant" "java"))]) (ansible-vault . [(20170111 1318) ((emacs (24 3))) "Minor mode for editing ansible vault files" single ((:commit . "71d1df3b1c2d1569b6c3091a9d54baf2ebc7019d") (:url . "http://github.com/zellio/ansible-vault-mode") (:keywords "ansible" "ansible-vault" "tools"))]) (ansible-doc . [(20160924 124) ((emacs (24 3))) "Ansible documentation Minor Mode" single ((:commit . "86083a7bb2ed0468ca64e52076b06441a2f8e9e0") (:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help"))]) (ansible . [(20170926 1951) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:commit . "9da54a2a426dca259ec9c2a8a60fb58e954be5bc") (:url . "http://101000lab.org"))]) (ansi . [(20150703 126) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single ((:commit . "12b4c5d91b3da1902838f421e5af6d40e2cd57dd") (:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi"))]) (annoying-arrows-mode . [(20161023 2346) ((cl-lib (0 5))) "Ring the bell if using arrows too much" single ((:commit . "3c42e9807d7696da2da2a21b63beebf9cdb3f5dc"))]) (annotate-depth . [(20160520 1340) nil "Annotate buffer if indentation depth is beyond threshold." single ((:commit . "fcb24fa36287250e40d195590c4ca4a8a696277b") (:url . "https://github.com/netromdk/annotate-depth") (:keywords "convenience"))]) (annotate . [(20171110 2336) nil "annotate files without changing them" single ((:commit . "dedbd9e5d5286f1ca8ad73e489d408a20f06156c") (:url . "https://github.com/bastibe/annotate.el"))]) (anki-editor . [(20180121 2040) ((emacs (25))) "Create Anki Cards in Org-mode" single ((:commit . "01776197ec408bf9efe0b2001dfd87dfc16a074d") (:url . "https://github.com/louietan/anki-editor"))]) (angular-snippets . [(20140513 2223) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar ((:commit . "af5ae0a4a8603b040446c28afcf6ca01a8b4bd7b"))]) (angular-mode . [(20151201 1327) nil "Major mode for Angular.js" tar ((:commit . "8720cde86af0f1859ccc8580571e8d0ad1c52cff") (:url . "https://github.com/omouse/angularjs-mode") (:keywords "languages" "javascript"))]) (angry-police-captain . [(20120829 552) nil "Show quote from http://theangrypolicecaptain.com in the minibuffer" single ((:commit . "d11931c5cb63368dcc4a48797962428cca6d3e9d") (:keywords "games" "web" "fun"))]) (android-mode . [(20170323 115) nil "Minor mode for Android application development" single ((:commit . "f274da87429617b0b9c5889d46b36de64d982da4") (:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes"))]) (anaphora . [(20140728 1536) nil "anaphoric macros providing implicit temp variables" single ((:commit . "ed99ad4502e6fccde76050496984c6454676a410") (:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions"))]) (anaconda-mode . [(20171223 1118) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single ((:commit . "e72e9beeb8c80acfee4d85748464d1c5147946ad") (:url . "https://github.com/proofit404/anaconda-mode"))]) (amx . [(20170923 835) ((emacs (24 4))) "Alternative M-x with extra features." single ((:commit . "88ab7ccb2a88b5cd3ecc4d703ae9373df3e4971c") (:url . "http://github.com/DarwinAwardWinner/amx/") (:keywords "convenience" "usability"))]) (ample-zen-theme . [(20150119 1354) nil "AmpleZen Theme for Emacs 24" single ((:commit . "b277bb7abd4b6624e8d59f02474b79af50a007bd") (:url . "https://github.com/mjwall/ample-zen") (:keywords "theme" "dark" "emacs 24"))]) (ample-theme . [(20180115 627) nil "Calm Dark Theme for Emacs" tar ((:commit . "64845a6b67627e897dd42d8302c25c03ddce2aee") (:url . "https://github.com/jordonbiondo/ample-theme") (:keywords "theme" "dark"))]) (ample-regexps . [(20151023 300) nil "ample regular expressions for Emacs" tar ((:commit . "cbe91e148cac1ee8e223874dc956ed4cf607f046") (:keywords "regexps" "extensions" "tools"))]) (amd-mode . [(20180111 602) ((emacs (25)) (projectile (20161008 47)) (s (1 9 0)) (f (0 16 2)) (seq (2 16)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single ((:commit . "01fd19e0d635ccaf8e812364d8720733f2e84126") (:keywords "javascript" "amd" "projectile"))]) (all-the-icons-ivy . [(20170508 25) ((emacs (24 4)) (all-the-icons (2 4 0)) (ivy (0 8 0))) "Shows icons while using ivy and counsel" single ((:commit . "5357bccddfd30580d5859f3794248efb86a8a054") (:keywords "faces"))]) (all-the-icons-gnus . [(20180108 153) ((emacs (24 4)) (dash (2 12 0)) (all-the-icons (3 1 0))) "Shows icons for in Gnus" single ((:commit . "61830f1da0f8ad8e9235133f5470daeb50d2de41") (:keywords "mail" "tools"))]) (all-the-icons-dired . [(20170418 1431) ((emacs (24 4)) (all-the-icons (2 2 0))) "Shows icons for each file in dired mode" single ((:commit . "980b7747d6c4a7992a1ec56afad908956db0a519") (:keywords "files" "icons" "dired"))]) (all-the-icons . [(20171011 324) ((emacs (24 3)) (font-lock+ (0)) (memoize (1 0 1))) "A library for inserting Developer icons" tar ((:commit . "b93707e3a3a7a4968b3e212b890edfe265dcd57d") (:url . "https://github.com/domtronn/all-the-icons.el") (:keywords "convenient" "lisp"))]) (all-ext . [(20170114 1805) ((all (1 0))) "M-x all with helm-swoop/anything/multiple-cursors/line-number" single ((:commit . "9f4ef84a147cf4e0af6ef45826d6cb3558db6b88") (:url . "https://github.com/rubikitch/all-ext") (:keywords "all" "search" "replace" "anything" "helm" "helm-swoop" "occur"))]) (align-cljlet . [(20160112 1301) ((clojure-mode (1 11 5))) "Space align various Clojure forms" single ((:commit . "602d72a7ad52788a0265e3c6da519464a98166b8") (:url . "https://github.com/gstamp/align-cljlet"))]) (alert . [(20180122 1242) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single ((:commit . "103d34c83fe77e46a6976dcaba3db678199e0c9c") (:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message"))]) (alect-themes . [(20180113 1316) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar ((:commit . "b30158d5d9e43318fa0e4a211d81fe4b2495c027") (:url . "https://github.com/alezost/alect-themes") (:keywords "color" "theme"))]) (alda-mode . [(20171103 1548) ((emacs (24 0))) "An Alda major mode" single ((:commit . "ea0d3a25ca2b45d08c510ad55b3d8a5374b2ec43") (:url . "http://github.com/jgkamat/alda-mode") (:keywords "alda" "highlight"))]) (alchemist . [(20171029 2307) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4)) (s (1 11 0))) "Elixir tooling integration into Emacs" tar ((:commit . "4beb4c9ceee0534a36f7669aa35fcbdfd6bef7b7") (:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist"))]) (airplay . [(20130212 426) ((request (20130110 2144)) (simple-httpd (1 4 1)) (deferred (0 3 1))) "Airplay bindings to Emacs" tar ((:commit . "bd690aafcae3a887946e1bba8327597932d964ad") (:url . "https://github.com/gongo/airplay-el") (:keywords "appletv" "airplay"))]) (airline-themes . [(20170623 958) ((powerline (2 3))) "vim-airline themes for emacs powerline" tar ((:commit . "0c0f8efbeaefa49ef04c0c4405b1ef79ecc5433e") (:url . "http://github.com/AnthonyDiGirolamo/airline-themes") (:keywords "evil" "mode-line" "powerline" "airline" "themes"))]) (ahungry-theme . [(20171103 2238) ((emacs (24))) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." single ((:commit . "9ec7fca8002b213c7eee1168258e36a683190d18") (:url . "https://github.com/ahungry/color-theme-ahungry") (:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme"))]) (ahk-mode . [(20160320 1521) ((emacs (24 3))) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single ((:commit . "9cfc4840507f6cc8016fdede84ad90df53285359") (:url . "https://github.com/ralesi/ahk-mode") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation"))]) (ahg . [(20171123 201) nil "Alberto's Emacs interface for Mercurial (Hg)" single ((:url . "https://bitbucket.org/agriggio/ahg"))]) (aggressive-indent . [(20171012 1107) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:commit . "1d7185d27020c3e91a7da21800716079297938ac") (:url . "https://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools"))]) (aggressive-fill-paragraph . [(20170902 705) ((dash (2 10 0))) "A mode to automatically keep paragraphs filled" single ((:commit . "bcbc63d1c93cd8dc5bf2fc6eb4988fa76375c631") (:url . "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode") (:keywords "fill-paragraph" "automatic" "comments"))]) (ag . [(20180102 1441) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single ((:commit . "d00aa65ec2da6944f1ed81da440ad7a9024cfbf0"))]) (afternoon-theme . [(20140104 1059) ((emacs (24 1))) "Dark color theme with a deep blue background" single ((:commit . "89b1d778a1f8b385775c122f2bd1c62f0fbf931a") (:url . "http://github.com/osener/emacs-afternoon-theme") (:keywords "themes"))]) (aes . [(20171028 2323) nil "Implementation of AES" single ((:commit . "b7d5da89c3443292e4f0b1c9d254d459933cf5af") (:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools"))]) (adoc-mode . [(20160314 1430) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ((:commit . "745884359a1b8826ede2c4cfd2f0b5478953ac40") (:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc"))]) (addressbook-bookmark . [(20171107 2234) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single ((:commit . "4f560af8397a46772e4b39f74f44a9ec9309a224") (:url . "https://github.com/thierryvolpiatto/addressbook-bookmark"))]) (add-node-modules-path . [(20170914 1912) nil "Add node_modules to your exec-path" single ((:commit . "d9266c0e2707a3cd3ecddbbc1e378b9eb56e06c0") (:url . "https://github.com/codesuki/add-node-modules-path") (:keywords "javascript" "node" "node_modules" "eslint"))]) (add-hooks . [(20171216 1723) nil "Functions for setting multiple hooks" single ((:commit . "1845137703461fc44bd77cf24014ba58f19c369d") (:url . "https://github.com/nickmccurdy/add-hooks") (:keywords "lisp"))]) (adafruit-wisdom . [(20180107 1521) ((emacs (24))) "Get/display adafruit.com quotes" single ((:commit . "f637f1b7cb397d4b993a20e94687663f6f09c615") (:url . "https://github.com/gonewest818/adafruit-wisdom.el") (:keywords "games"))]) (actionscript-mode . [(20160820 1731) nil "A simple mode for editing Actionscript 3 files" single ((:commit . "39287f00465559a58df1ea71a9dc5b15d4ac882a") (:keywords "language" "modes"))]) (ack-menu . [(20150504 1322) ((mag-menu (0 1 0))) "A menu-based front-end for ack" single ((:commit . "f77be93a4697926ecf3195a355eb69580f695f4d") (:url . "https://github.com/chumpage/ack-menu") (:keywords "tools" "matching" "convenience"))]) (achievements . [(20150530 1126) ((keyfreq (0 0 3))) "Achievements for emacs usage." tar nil]) (ace-window . [(20180123 1111) ((avy (0 2 0))) "Quickly switch windows." single ((:commit . "208ea2a4e809f0c91caf3354b44a8f4a4f1cbb73") (:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location"))]) (ace-popup-menu . [(20171231 2215) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" single ((:commit . "7b8ad628a058d32c420f7615927a34a5d51a7ad3") (:url . "https://github.com/mrkkrp/ace-popup-menu") (:keywords "convenience" "popup" "menu"))]) (ace-pinyin . [(20170430 2326) ((avy (0 2 0)) (pinyinlib (0 1 0))) "Jump to Chinese characters using avy or ace-jump-mode" single ((:commit . "a9df88c1e6a32a4f4895acbb8c45383693c494c1") (:url . "https://github.com/cute-jumper/ace-pinyin") (:keywords "extensions"))]) (ace-mc . [(20160408 1737) ((ace-jump-mode (1 0)) (multiple-cursors (1 0)) (dash (2 10 0))) "Add multiple cursors quickly using ace jump" single ((:commit . "b106bf6a6c78c3e026fbe9a99a34d6239adce4fd") (:url . "https://github.com/mm--/ace-mc") (:keywords "motion" "location" "cursor"))]) (ace-link . [(20180101 1328) ((avy (0 4 0))) "Quickly follow links" single ((:commit . "43d224546a2a557857294a8e3d13c4fe63508e03") (:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links" "avy"))]) (ace-jump-zap . [(20170717 1149) ((ace-jump-mode (1 0)) (dash (2 10 0))) "Character zapping, `ace-jump-mode` style" single ((:commit . "52b5d4c6c73bd0fc833a0dcb4e803a5287d8cae8") (:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions"))]) (ace-jump-mode . [(20140616 115) nil "a quick cursor location minor mode for emacs" single ((:commit . "8351e2df4fbbeb2a4003f2fb39f46d33803f3dac") (:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor"))]) (ace-jump-helm-line . [(20160918 1136) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single ((:commit . "1483055255df3f8ae349f7520f05b1e43ea3ed37") (:url . "https://github.com/cute-jumper/ace-jump-helm-line") (:keywords "extensions"))]) (ace-jump-buffer . [(20171031 850) ((avy (0 4 0)) (dash (2 4 0))) "fast buffer switching extension to `avy'" single ((:commit . "ae5be0415c823f7bb66833aa4af2180d4cf99cef") (:url . "https://github.com/waymondo/ace-jump-buffer"))]) (ace-isearch . [(20170506 12) ((emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy, helm-swoop and swiper" single ((:commit . "0502f95e333c8059a678745e5a112542965661d1") (:url . "https://github.com/tam17aki/ace-isearch"))]) (ace-flyspell . [(20170308 2109) ((avy (0 4 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single ((:commit . "538d4f8508d305262ba0228dfe7c819fb65b53c9") (:url . "https://github.com/cute-jumper/ace-flyspell") (:keywords "extensions"))]) (ac-sly . [(20170728 327) ((sly (1 0 0 -3)) (auto-complete (1 4)) (cl-lib (0 5))) "An auto-complete source using sly completions" single ((:commit . "bf69c687c4ecf1994349d20c182e9b567399912e") (:url . "https://github.com/qoocku/ac-sly"))]) (ac-slime . [(20171027 1400) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single ((:commit . "6c80cb602ddad46486288f94ad7546396c6e4b1a") (:url . "https://github.com/purcell/ac-slime"))]) (ac-skk . [(20141229 1719) ((auto-complete (1 3 1)) (ddskk (16 0 50)) (tinysegmenter (0)) (cl-lib (0 5))) "auto-complete-mode source for DDSKK a.k.a Japanese input method" single ((:commit . "d25a265930430d080329789fb253d786c01dfa24") (:url . "https://github.com/myuhe/ac-skk.el") (:keywords "convenience" "auto-complete"))]) (ac-rtags . [(20170522 2154) ((auto-complete (1 4 0)) (rtags (2 10))) "auto-complete back-end for RTags" single ((:commit . "53e74892e8bd15baa4d1bd1d640dcabcba9667ee") (:url . "http://rtags.net"))]) (ac-racer . [(20170114 9) ((emacs (24 3)) (auto-complete (1 5 0)) (racer (0 0 2))) "auto-complete source of racer" single ((:commit . "4408c2d652dec0432e20c05e001db8222d778c6b") (:url . "https://github.com/syohex/emacs-ac-racer"))]) (ac-php-core . [(20180111 116) ((emacs (24)) (dash (1)) (php-mode (1)) (xcscope (1)) (s (1)) (f (0 17 0)) (popup (0 5 0))) "gen tags for php" tar ((:commit . "b9f455d863d3e92fcf32eaa722447c6d62ee1297") (:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense"))]) (ac-php . [(20171201 134) ((ac-php-core (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0))) "auto-completion source for php" single ((:commit . "b9f455d863d3e92fcf32eaa722447c6d62ee1297") (:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense"))]) (ac-octave . [(20171122 943) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single ((:commit . "6d09b94a86f43de84c60e9a699b5e1be61c0f138") (:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion"))]) (ac-mozc . [(20150227 819) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single ((:commit . "4c6c8be4701010d9362184437c0f783e0335c631") (:url . "https://github.com/igjit/ac-mozc"))]) (ac-math . [(20141116 1327) ((auto-complete (1 4)) (math-symbol-lists (1 0))) "Auto-complete sources for input of mathematical symbols and latex tags" single ((:commit . "c012a8f620a48cb18db7d78995035d65eae28f11") (:url . "https://github.com/vitoshka/ac-math") (:keywords "latex" "auto-complete" "unicode" "symbols"))]) (ac-js2 . [(20140906 442) ((js2-mode (20090723)) (skewer-mode (1 4))) "Auto-complete source for Js2-mode, with navigation" tar ((:commit . "721c482e1d4a08f4a29a74437257d573e8f69969") (:url . "https://github.com/ScottyB/ac-js2"))]) (ac-ispell . [(20151031 1926) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single ((:commit . "22bace7387e9012002a6a444922f75f9913077b0") (:url . "https://github.com/syohex/emacs-ac-ispell"))]) (ac-inf-ruby . [(20131115 350) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ((:commit . "ee53fc9c61950da9a96df3ff5ef186f9a9faf151") (:keywords "languages" "tools"))]) (ac-html-csswatcher . [(20151208 1313) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single ((:commit . "b0f3e7e1a3fe49e88b6eb6432377232fc715f221") (:url . "https://github.com/osv/ac-html-csswatcher") (:keywords "html" "css" "less" "auto-complete"))]) (ac-html-bootstrap . [(20160302 901) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar ((:commit . "481e6e441cd566554ce71cd8cb28c9e7ebb1c24b") (:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "bootstrap" "cssx"))]) (ac-html-angular . [(20151224 2319) ((web-completion-data (0 1))) "auto complete angular15 data for `ac-html' and `company-web'" tar ((:commit . "6bafe09afe03112ca4183d58461c1a6f6c2b3c67") (:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "angular"))]) (ac-html . [(20151005 31) ((auto-complete (1 4)) (s (1 9)) (f (0 17)) (dash (2 10))) "auto complete source for html tags and attributes" tar ((:commit . "668154cba123c321d1b07c2dc8b26d14092253b8") (:url . "https://github.com/cheunghy/ac-html") (:keywords "html" "auto-complete" "slim" "haml" "jade"))]) (ac-helm . [(20160318 1933) ((helm (1 6 3)) (auto-complete (1 4 0)) (popup (0 5 0)) (cl-lib (0 5))) "Helm interface for auto-complete" single ((:commit . "baf2b1e04bcffa835084389c0fab415f26efbf32") (:keywords "completion" "convenience" "helm"))]) (ac-haskell-process . [(20150423 702) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:commit . "0362d4323511107ec70e7165cb612f3ab01b712f") (:keywords "languages"))]) (ac-geiser . [(20130928 2347) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar ((:commit . "502d18a8a0bd4b5fdd495a99299ba2a632c5cd9a"))]) (ac-etags . [(20161001 807) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ((:commit . "7983e631c226fe0fa53af3b2d56bf4eca3d785ce") (:url . "https://github.com/syohex/emacs-ac-etags"))]) (ac-emoji . [(20150823 11) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar ((:commit . "40a639764eb654f1b4bb705c817b66032a26ff2b") (:url . "https://github.com/syohex/emacs-ac-emoji"))]) (ac-emmet . [(20131015 858) ((emmet-mode (1 0 2)) (auto-complete (1 4))) "auto-complete sources for emmet-mode's snippets" single ((:commit . "88f24876ee3b759978d4614a758280b5d512d543") (:url . "https://github.com/yasuyk/ac-emmet") (:keywords "completion" "convenience" "emmet"))]) (ac-emacs-eclim . [(20170924 1339) ((eclim (0 3)) (auto-complete (1 5))) "auto-complete source for eclim" single ((:commit . "4f27d04c30a026f24c0ff18c3a7d36e3fb5b57a5"))]) (ac-dcd . [(20170323 601) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single ((:commit . "1614aa624252e3445b0392c8a9b7197084f3e422") (:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages"))]) (ac-clang . [(20171209 240) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar ((:commit . "f11f17382646e13a0c794821ed5efe1692f96652") (:url . "https://github.com/yaruopooner/ac-clang") (:keywords "completion" "convenience" "intellisense"))]) (ac-cider . [(20161006 19) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single ((:commit . "d8670939bbf88079263d5ace2b8bc04cf325be36") (:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment"))]) (ac-capf . [(20151031 1917) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single ((:commit . "17571dba0a8f98111f2ab758e9bea285b263781b") (:url . "https://github.com/syohex/emacs-ac-capf"))]) (ac-cake2 . [(20140320 8) ((cake2 (1 1 2)) (auto-complete (1 4 0))) "CakePHP 2 Minor Mode auto-complete.el source" single ((:commit . "ffbb679c0d5c261b05abde06d8d1d1e5d5990b6a") (:url . "http://code.101000lab.org"))]) (ac-cake . [(20140315 929) ((cake (1 4 2)) (auto-complete (1 4 0))) "CakePHP Minor Mode auto-complete.el source" single ((:commit . "f34c9e3ba8cb962e4708c8f53b623e1922500176") (:url . "http://code.101000lab.org"))]) (ac-c-headers . [(20151021 134) ((auto-complete (1 3 1))) "auto-complete source for C headers" single ((:commit . "de13a1d35b311e6601556d8ef163de102057deea") (:url . "http://hins11.yu-yake.com/"))]) (ac-anaconda . [(20160221 1123) ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) "Anaconda sources for auto-complete-mode" single ((:commit . "94f66b4d4bf0fd9683ee77511833b1eceace0462") (:url . "https://github.com/proofit404/ac-anaconda"))]) (ac-alchemist . [(20150907 2356) ((auto-complete (1 5 0)) (alchemist (1 5 0)) (cl-lib (0 5))) "auto-complete source for alchemist" single ((:commit . "b1891c3d41aed83f61d78a609ea97be5cc2758d9") (:url . "https://github.com/syohex/emacs-ac-alchemist"))]) (abyss-theme . [(20170808 645) ((emacs (24))) "A dark theme with contrasting colours." single ((:commit . "18791c6e8d9cc2b4815c9f08627a2e94fc0eeb14") (:url . "https://github.com/mgrbyte/emacs-abyss-theme") (:keywords "theme" "dark" "contrasting colours"))]) (abl-mode . [(20170604 1309) nil "Python TDD minor mode" single ((:commit . "9aff997fe7b4caded60150a832e3704ac55e69e5") (:url . "http://github.com/afroisalreadyinu/abl-mode"))]) (abgaben . [(20171118 2246) ((pdf-tools (0 80)) (f (0 19 0)) (s (1 11 0))) "review and correct assignments received by mail" single ((:commit . "20d14830f07d66e2a04bcad1498a4a6fbf4b4451") (:url . "http://arne.chark.eu/") (:keywords "mail" "outlines" "convenience"))]) (abc-mode . [(20171020 319) nil "Major mode for editing abc music files" single ((:commit . "238deedeb6c90df168045552eb463cfae9e1f88f") (:keywords "local" "docs"))]) (aa-edit-mode . [(20170118 1920) ((emacs (24 3)) (navi2ch (2 0 0))) "Major mode for editing AA(S_JIS Art) and .mlt file" single ((:commit . "1dd801225b7ad3c23ad09698f5e77f0df7012a65") (:keywords "wp" "text" "shiftjis" "mlt" "yaruo"))]) (a . [(20170720 553) ((emacs (25))) "Associative data structure functions" single ((:commit . "d50b953cb0a7402107cdd6275cff9d31d09835a3") (:url . "https://github.com/plexus/a.el") (:keywords "lisp"))]) (@ . [(20140707 520) ((queue (0 1)) (emacs (24))) "multiple-inheritance prototype-based objects DSL" tar ((:commit . "114dfe3761bf0c9dd89f794106c3a6a436ed06cc") (:url . "https://github.com/skeeto/at-el"))]) (4clojure . [(20131014 1507) ((json (1 2)) (request (0 2 0))) "Open and evaluate 4clojure.com questions" single ((:commit . "3cdfd356c24cd3518397d29ae833f56a4d20b4ca") (:keywords "languages" "data"))]) (2048-game . [(20151026 1233) nil "play 2048 in Emacs" single ((:url . "https://bitbucket.org/zck/2048.el"))]) (0xc . [(20170125 1953) ((emacs (24 4)) (s (1 11 0))) "Base conversion made easy" single ((:commit . "31890af88234e4e098f1c340a5990515b934c7f7") (:url . "http://github.com/AdamNiederer/0xc") (:keywords "base" "conversion"))]) (0blayout . [(20161007 2307) nil "Layout grouping with ease" single ((:commit . "873732ddb99a3ec18845a37467ee06bce4e61d87") (:url . "https://github.com/etu/0blayout") (:keywords "convenience" "window-management"))]))
