;;; package-build-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from package-build.el

(autoload 'package-build-archive "package-build" "\
Build a package archive for the package named NAME.
If DUMP-ARCHIVE-CONTENTS is non-nil, the updated archive contents
are subsequently dumped.

(fn NAME &optional DUMP-ARCHIVE-CONTENTS)" t)
(autoload 'package-build--package "package-build" "\
Build the package version specified by RCP.
Return the archive entry for the package and store the package
in `package-build-archive-dir'.

(fn RCP)")
(autoload 'package-build-all "package-build" "\
Build a package for each of the available recipes.
If `package-build-predicate-function' is non-nil, then only
packages for which that returns non-nil are build." t)
(register-definition-prefixes "package-build" '("package-build-"))


;;; Generated autoloads from package-build-badges.el

(register-definition-prefixes "package-build-badges" '("package-build--write-melpa-badge-image"))


;;; Generated autoloads from package-recipe.el

(register-definition-prefixes "package-recipe" '("package-"))


;;; Generated autoloads from package-recipe-mode.el

(autoload 'package-build-create-recipe "package-recipe-mode" "\
Create a new recipe for the package named NAME using FETCHER.

(fn NAME FETCHER)" t)
(autoload 'package-build-current-recipe "package-recipe-mode" "\
Build archive for the recipe defined in the current buffer." t)
(register-definition-prefixes "package-recipe-mode" '("package-build-minor-mode"))

;;; End of scraped data

(provide 'package-build-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; package-build-autoloads.el ends here
