;;; password-store-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from password-store.el

(autoload 'password-store-edit "password-store" "\
Edit password for ENTRY.

(fn ENTRY)" t)
(autoload 'password-store-get "password-store" "\
Return password for ENTRY.

Returns the first line of the password data.  When CALLBACK is
non-`NIL', call CALLBACK with the first line instead.

(fn ENTRY &optional CALLBACK)")
(autoload 'password-store-get-field "password-store" "\
Return FIELD for ENTRY.
FIELD is a string, for instance \"url\".  When CALLBACK is
non-`NIL', call it with the line associated to FIELD instead.  If
FIELD equals to symbol secret, then this function reduces to
`password-store-get'.

(fn ENTRY FIELD &optional CALLBACK)")
(autoload 'password-store-clear "password-store" "\
Clear secret in the kill ring.

Optional argument FIELD, a symbol or a string, describes the
stored secret to clear; if nil, then set it to 'secret.  Note,
FIELD does not affect the function logic; it is only used to
display the message:

(message \"Field %s cleared from kill ring and system clipboard.\" field).

(fn &optional FIELD)" t)
(autoload 'password-store-copy "password-store" "\
Add password for ENTRY into the kill ring.

Clear previous password from the kill ring.  Pointer to the kill
ring is stored in `password-store-kill-ring-pointer'.  Password
is cleared after `password-store-time-before-clipboard-restore'
seconds.

(fn ENTRY)" t)
(autoload 'password-store-copy-field "password-store" "\
Add FIELD for ENTRY into the kill ring.

Clear previous secret from the kill ring.  Pointer to the kill
ring is stored in `password-store-kill-ring-pointer'.  Secret
field is cleared after
`password-store-time-before-clipboard-restore' seconds.  If FIELD
equals to symbol secret, then this function reduces to
`password-store-copy'.

(fn ENTRY FIELD)" t)
(autoload 'password-store-init "password-store" "\
Initialize new password store and use GPG-ID for encryption.

Separate multiple IDs with spaces.

(fn GPG-ID)" t)
(autoload 'password-store-insert "password-store" "\
Insert a new ENTRY containing PASSWORD.

(fn ENTRY PASSWORD)" t)
(autoload 'password-store-generate "password-store" "\
Generate a new password for ENTRY with PASSWORD-LENGTH.

Default PASSWORD-LENGTH is `password-store-password-length'.

(fn ENTRY &optional PASSWORD-LENGTH)" t)
(autoload 'password-store-generate-no-symbols "password-store" "\
Generate a new password without symbols for ENTRY with PASSWORD-LENGTH.

Default PASSWORD-LENGTH is `password-store-password-length'.

(fn ENTRY &optional PASSWORD-LENGTH)" t)
(autoload 'password-store-remove "password-store" "\
Remove ENTRY.

(fn ENTRY)" t)
(autoload 'password-store-rename "password-store" "\
Rename ENTRY to NEW-ENTRY.

(fn ENTRY NEW-ENTRY)" t)
(autoload 'password-store-version "password-store" "\
Show version of `password-store-executable'." t)
(autoload 'password-store-url "password-store" "\
Load URL for ENTRY.

(fn ENTRY)" t)
(register-definition-prefixes "password-store" '("password-store-"))

;;; End of scraped data

(provide 'password-store-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; password-store-autoloads.el ends here
