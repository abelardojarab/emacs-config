;;; counsel-gtags-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from counsel-gtags.el

(autoload 'counsel-gtags-find-definition "counsel-gtags" "\
Search for TAGNAME definition in tag database.
Prompt for TAGNAME if not given.

(fn TAGNAME)" t)
(autoload 'counsel-gtags-find-reference "counsel-gtags" "\
Search for TAGNAME reference in tag database.
Prompt for TAGNAME if not given.

(fn TAGNAME)" t)
(autoload 'counsel-gtags-find-symbol "counsel-gtags" "\
Search for TAGNAME symbol in tag database.
Prompt for TAGNAME if not given.

(fn TAGNAME)" t)
(autoload 'counsel-gtags-find-reference-other-window "counsel-gtags" "\
Search for TAGNAME reference in tag database in other window.
Prompt for TAGNAME if not given.

(fn TAGNAME)" t)
(autoload 'counsel-gtags-find-symbol-other-window "counsel-gtags" "\
Search for TAGNAME symbol in tag database in other window.
Prompt for TAGNAME if not given.

(fn TAGNAME)" t)
(autoload 'counsel-gtags-find-file "counsel-gtags" "\
Search/narrow for FILENAME among tagged files.

(fn &optional FILENAME)" t)
(autoload 'counsel-gtags-go-backward "counsel-gtags" "\
Go to previous position in context stack." t)
(autoload 'counsel-gtags-go-forward "counsel-gtags" "\
Go to next position in context stack." t)
(autoload 'counsel-gtags-create-tags "counsel-gtags" "\
Create tag database in ROOTDIR.
LABEL is passed as the value for the environment variable GTAGSLABEL.
Prompt for ROOTDIR and LABEL if not given.  This command is asynchronous.

(fn ROOTDIR LABEL)" t)
(autoload 'counsel-gtags-update-tags "counsel-gtags" "\
Update tag database for current file.
Changes in other files are ignored.  With a prefix argument, update
tags for all files.  With two prefix arguments, generate new tag
database in prompted directory." t)
(autoload 'counsel-gtags-mode "counsel-gtags" "\
Minor mode of counsel-gtags.

  If `counsel-gtags-update-tags' is non-nil, the tag files are updated
  after saving buffer.

This is a minor mode.  If called interactively, toggle the
`Counsel-Gtags mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `counsel-gtags-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "counsel-gtags" '("counsel-gtags-"))

;;; End of scraped data

(provide 'counsel-gtags-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; counsel-gtags-autoloads.el ends here
