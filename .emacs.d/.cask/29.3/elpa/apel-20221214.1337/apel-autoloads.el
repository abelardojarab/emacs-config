;;; apel-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from alist.el

(autoload 'put-alist "alist" "\
Set cdr of an element (KEY . ...) in ALIST to VALUE and return ALIST.
If there is no such element, create a new pair (KEY . VALUE) and
return a new alist whose car is the new pair and cdr is ALIST.

(fn KEY VALUE ALIST)")
(autoload 'del-alist "alist" "\
Delete an element whose car equals KEY from ALIST.
Return the modified ALIST.

(fn KEY ALIST)")
(autoload 'set-alist "alist" "\
Set cdr of an element (KEY . ...) in the alist bound to SYMBOL to VALUE.

(fn SYMBOL KEY VALUE)")
(autoload 'remove-alist "alist" "\
Delete an element whose car equals KEY from the alist bound to SYMBOL.

(fn SYMBOL KEY)")
(autoload 'modify-alist "alist" "\
Store elements in the alist MODIFIER in the alist DEFAULT.
Return the modified alist.

(fn MODIFIER DEFAULT)")
(autoload 'set-modified-alist "alist" "\
Store elements in the alist MODIFIER in an alist bound to SYMBOL.
If SYMBOL is not bound, set it to nil at first.

(fn SYMBOL MODIFIER)")
(autoload 'vassoc "alist" "\
Search AVLIST for an element whose first element equals KEY.
AVLIST is a list of vectors.
See also `assoc'.

(fn KEY AVLIST)")


;;; Generated autoloads from apel-ver.el

(register-definition-prefixes "apel-ver" '("apel-version"))


;;; Generated autoloads from broken.el

(register-definition-prefixes "broken" '("broken-facility" "check-broken-facility" "if-broken" "unless-broken" "when-broken"))


;;; Generated autoloads from calist.el

(register-definition-prefixes "calist" '("calist-" "ctree-" "define-calist-field-match-method" "find-calist-package" "in-calist-package" "make-calist-package" "use-calist-package"))


;;; Generated autoloads from emu.el

(register-definition-prefixes "emu" '("char-" "insert-binary-file-contents" "mouse-button-" "running-"))


;;; Generated autoloads from filename.el

(register-definition-prefixes "filename" '("filename-" "poly-funcall" "replace-as-filename"))


;;; Generated autoloads from install.el

(register-definition-prefixes "install" '("compile-elisp-module" "install-"))


;;; Generated autoloads from inv-23.el

(register-definition-prefixes "inv-23" '("disable-invisible" "enable-invisible" "end-of-invisible" "invisible-region" "next-visible-point" "visible-region"))


;;; Generated autoloads from mcharset.el

(register-definition-prefixes "mcharset" '("charsets-to-mime-charset" "default-mime-charset-" "find-mime-charset-by-charsets"))


;;; Generated autoloads from mcs-20.el

(register-definition-prefixes "mcs-20" '("default-mime-charset" "detect-mime-charset-" "mime-charset-" "widget-mime-charset-" "write-region-as-mime-charset"))


;;; Generated autoloads from mcs-e20.el

(register-definition-prefixes "mcs-e20" '("charsets-mime-charset-alist" "coding-system-to-mime-charset" "decode-mime-charset-" "encode-mime-charset-" "mime-charset-list"))


;;; Generated autoloads from mule-caesar.el

(register-definition-prefixes "mule-caesar" '("mule-caesar-region"))


;;; Generated autoloads from path-util.el

(autoload 'add-path "path-util" "\
Add PATH to `load-path' if it exists under `default-load-path'
directories and it does not exist in `load-path'.

You can use following PATH styles:
	load-path relative: \"PATH/\"
			(it is searched from `default-load-path')
	home directory relative: \"~/PATH/\" \"~USER/PATH/\"
	absolute path: \"/HOO/BAR/BAZ/\"

You can specify following OPTIONS:
	\\='all-paths	search from `load-path'
			instead of `default-load-path'
	\\='append		add PATH to the last of `load-path'

(fn PATH &rest OPTIONS)")
(autoload 'add-latest-path "path-util" "\
Add latest path matched by PATTERN to `load-path'
if it exists under `default-load-path' directories
and it does not exist in `load-path'.

If optional argument ALL-PATHS is specified, it is searched from all
of load-path instead of default-load-path.

(fn PATTERN &optional ALL-PATHS)")
(autoload 'get-latest-path "path-util" "\
Return latest directory in default-load-path
which is matched to regexp PATTERN.
If optional argument ALL-PATHS is specified,
it is searched from all of load-path instead of default-load-path.

(fn PATTERN &optional ALL-PATHS)")
(autoload 'file-installed-p "path-util" "\
Return absolute-path of FILE if FILE exists in PATHS.
If PATHS is omitted, `load-path' is used.

(fn FILE &optional PATHS)")
(defvar exec-suffix-list '("") "\
*List of suffixes for executable.")
(autoload 'exec-installed-p "path-util" "\
Return absolute-path of FILE if FILE exists in PATHS.
If PATHS is omitted, `exec-path' is used.
If suffixes is omitted, `exec-suffix-list' is used.

(fn FILE &optional PATHS SUFFIXES)")
(autoload 'module-installed-p "path-util" "\
Return t if module is provided or exists in PATHS.
If PATHS is omitted, `load-path' is used.

(fn MODULE &optional PATHS)")
(register-definition-prefixes "path-util" '("default-load-path"))


;;; Generated autoloads from pces-20.el

(register-definition-prefixes "pces-20" '("as-binary-" "find-file-noselect-as-" "insert-file-contents-as-" "open-network-stream-as-binary" "save-buffer-as-" "write-region-as-"))


;;; Generated autoloads from pces-e20.el

(register-definition-prefixes "pces-e20" '("find-coding-system" "set-process-input-coding-system"))


;;; Generated autoloads from poe.el

(register-definition-prefixes "poe" '("buffer-file-type" "cancel-undo-boundary" "character-to-event" "event-to-character" "find-face" "next-command-event" "rem" "save-selected-frame"))


;;; Generated autoloads from poem.el

(register-definition-prefixes "poem" '("char-" "int-char"))


;;; Generated autoloads from poem-e20.el

(register-definition-prefixes "poem-e20" '("find-non-ascii-charset-" "fontset-pixel-size"))


;;; Generated autoloads from poem-e20_3.el

(register-definition-prefixes "poem-e20_3" '("char-" "looking-at-as-unibyte" "sset" "string-to-"))


;;; Generated autoloads from product.el

(register-definition-prefixes "product" '("product-"))


;;; Generated autoloads from pym.el

(register-definition-prefixes "pym" '("def-edebug-spec" "defalias-maybe" "defconst-maybe" "defmacro-maybe" "defsubst-maybe" "defun-maybe" "defvar-maybe" "subr-fboundp"))


;;; Generated autoloads from richtext.el

(autoload 'richtext-encode "richtext" "\


(fn FROM TO)")
(autoload 'richtext-decode "richtext" "\


(fn FROM TO)")
(register-definition-prefixes "richtext" '("richtext-"))


;;; Generated autoloads from static.el

(register-definition-prefixes "static" '("static-"))

;;; End of scraped data

(provide 'apel-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; apel-autoloads.el ends here
