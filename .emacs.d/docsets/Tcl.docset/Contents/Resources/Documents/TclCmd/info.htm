<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>info manual page - Tcl Built-In Commands</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.6.0/Tk8.6.0 Documentation</a> <small>&gt;</small> <a href="contents.htm">Tcl Commands, version 8.6.0</a> <small>&gt;</small> info</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../ItclCmd/contents.htm">[incr Tcl] Package Commands</A> | <A HREF="../Sqlite3Cmd/contents.htm">SQLite Package Commands</A> | <A HREF="../TdbcCmd/contents.htm">TDBC Package Commands</A> | <A HREF="../TdbcmysqlCmd/contents.htm">tdbc::mysql Package Commands</A> | <A HREF="../TdbcodbcCmd/contents.htm">tdbc::odbc Package Commands</A> | <A HREF="../TdbcpostgresCmd/contents.htm">tdbc::postgres Package Commands</A> | <A HREF="../Tdbcsqlite3Cmd/contents.htm">tdbc::sqlite3 Package Commands</A> | <A HREF="../ThreadCmd/contents.htm">Thread Package Commands</A> | <A HREF="../TclLib/contents.htm">Tcl C API</A> | <A HREF="../TkLib/contents.htm">Tk C API</A> | <A HREF="../ItclLib/contents.htm">[incr Tcl] Package C API</A> | <A HREF="../TdbcLib/contents.htm">TDBC Package C API</A></H3>
<DL>
<DD><A HREF="info.htm#M2" NAME="L779">NAME</A>
<DL><DD>info &mdash; Return information about the state of the Tcl interpreter</DD></DL>
<DD><A HREF="info.htm#M3" NAME="L780">SYNOPSIS</A>
<DL>
</DL>
<DD><A HREF="info.htm#M4" NAME="L781">DESCRIPTION</A>
<DL class="description">
<DD><A HREF="info.htm#M5" NAME="L782"><B>info args </B><I>procname</I></A>
<DD><A HREF="info.htm#M6" NAME="L783"><B>info body </B><I>procname</I></A>
<DD><A HREF="info.htm#M7" NAME="L784"><B>info class</B><I> subcommand class</I> ?<I>arg ...</I></A>
<DD><A HREF="info.htm#M8" NAME="L785"><B>info cmdcount</B></A>
<DD><A HREF="info.htm#M9" NAME="L786"><B>info commands </B>?<I>pattern</I>?</A>
<DD><A HREF="info.htm#M10" NAME="L787"><B>info complete </B><I>command</I></A>
<DD><A HREF="info.htm#M11" NAME="L788"><B>info coroutine</B></A>
<DD><A HREF="info.htm#M12" NAME="L789"><B>info default </B><I>procname arg varname</I></A>
<DD><A HREF="info.htm#M13" NAME="L790"><B>info errorstack </B>?<I>interp</I>?</A>
<DD><A HREF="info.htm#M14" NAME="L791"><B>info exists </B><I>varName</I></A>
<DD><A HREF="info.htm#M15" NAME="L792"><B>info frame</B> ?<I>number</I>?</A>
<DL class="description">
<DD><A HREF="info.htm#M16" NAME="L793"><B>type</B></A>
<DL class="description">
<DD><A HREF="info.htm#M17" NAME="L794"><B>source</B></A>
<DD><A HREF="info.htm#M18" NAME="L795"><B>proc</B></A>
<DD><A HREF="info.htm#M19" NAME="L796"><B>eval</B></A>
<DD><A HREF="info.htm#M20" NAME="L797"><B>precompiled</B></A>
</DL>
<DD><A HREF="info.htm#M21" NAME="L798"><B>line</B></A>
<DD><A HREF="info.htm#M22" NAME="L799"><B>file</B></A>
<DD><A HREF="info.htm#M23" NAME="L800"><B>cmd</B></A>
<DD><A HREF="info.htm#M24" NAME="L801"><B>proc</B></A>
<DD><A HREF="info.htm#M25" NAME="L802"><B>lambda</B></A>
<DD><A HREF="info.htm#M26" NAME="L803"><B>level</B></A>
</DL>
<DD><A HREF="info.htm#M27" NAME="L804"><B>info functions </B>?<I>pattern</I>?</A>
<DD><A HREF="info.htm#M28" NAME="L805"><B>info globals </B>?<I>pattern</I>?</A>
<DD><A HREF="info.htm#M29" NAME="L806"><B>info hostname</B></A>
<DD><A HREF="info.htm#M30" NAME="L807"><B>info level</B> ?<I>number</I>?</A>
<DD><A HREF="info.htm#M31" NAME="L808"><B>info library</B></A>
<DD><A HREF="info.htm#M32" NAME="L809"><B>info loaded </B>?<I>interp</I>?</A>
<DD><A HREF="info.htm#M33" NAME="L810"><B>info locals </B>?<I>pattern</I>?</A>
<DD><A HREF="info.htm#M34" NAME="L811"><B>info nameofexecutable</B></A>
<DD><A HREF="info.htm#M35" NAME="L812"><B>info object</B><I> subcommand object</I> ?<I>arg ...</I></A>
<DD><A HREF="info.htm#M36" NAME="L813"><B>info patchlevel</B></A>
<DD><A HREF="info.htm#M37" NAME="L814"><B>info procs </B>?<I>pattern</I>?</A>
<DD><A HREF="info.htm#M38" NAME="L815"><B>info script</B> ?<I>filename</I>?</A>
<DD><A HREF="info.htm#M39" NAME="L816"><B>info sharedlibextension</B></A>
<DD><A HREF="info.htm#M40" NAME="L817"><B>info tclversion</B></A>
<DD><A HREF="info.htm#M41" NAME="L818"><B>info vars</B> ?<I>pattern</I>?</A>
</DL>
<DD><A HREF="info.htm#M42" NAME="L819">CLASS INTROSPECTION</A>
<DL class="class introspection">
<DD><A HREF="info.htm#M43" NAME="L820"><B>info class call</B><I> class method</I></A>
<DD><A HREF="info.htm#M44" NAME="L821"><B>info class constructor</B><I> class</I></A>
<DD><A HREF="info.htm#M45" NAME="L822"><B>info class definition</B><I> class method</I></A>
<DD><A HREF="info.htm#M46" NAME="L823"><B>info class destructor</B><I> class</I></A>
<DD><A HREF="info.htm#M47" NAME="L824"><B>info class filters</B><I> class</I></A>
<DD><A HREF="info.htm#M48" NAME="L825"><B>info class forward</B><I> class method</I></A>
<DD><A HREF="info.htm#M49" NAME="L826"><B>info class instances</B><I> class</I> ?<I>pattern</I>?</A>
<DD><A HREF="info.htm#M50" NAME="L827"><B>info class methods</B><I> class</I> ?<I>options...</I>?</A>
<DL class="class introspection">
<DD><A HREF="info.htm#M51" NAME="L828"><B>-all</B></A>
<DD><A HREF="info.htm#M52" NAME="L829"><B>-private</B></A>
</DL>
<DD><A HREF="info.htm#M53" NAME="L830"><B>info class methodtype</B><I> class method</I></A>
<DD><A HREF="info.htm#M54" NAME="L831"><B>info class mixins</B><I> class</I></A>
<DD><A HREF="info.htm#M55" NAME="L832"><B>info class subclasses</B><I> class</I> ?<I>pattern</I>?</A>
<DD><A HREF="info.htm#M56" NAME="L833"><B>info class superclasses</B><I> class</I></A>
<DD><A HREF="info.htm#M57" NAME="L834"><B>info class variables</B><I> class</I></A>
</DL>
<DD><A HREF="info.htm#M58" NAME="L835">OBJECT INTROSPECTION</A>
<DL class="object introspection">
<DD><A HREF="info.htm#M59" NAME="L836"><B>info object call</B><I> object method</I></A>
<DD><A HREF="info.htm#M60" NAME="L837"><B>info object class</B><I> object</I> ?<I>className</I>?</A>
<DD><A HREF="info.htm#M61" NAME="L838"><B>info object definition</B><I> object method</I></A>
<DD><A HREF="info.htm#M62" NAME="L839"><B>info object filters</B><I> object</I></A>
<DD><A HREF="info.htm#M63" NAME="L840"><B>info object forward</B><I> object method</I></A>
<DD><A HREF="info.htm#M64" NAME="L841"><B>info object isa</B><I> category object</I> ?<I>arg</I>?</A>
<DL class="object introspection">
<DD><A HREF="info.htm#M65" NAME="L842"><B>info object isa class</B><I> object</I></A>
<DD><A HREF="info.htm#M66" NAME="L843"><B>info object isa metaclass</B><I> object</I></A>
<DD><A HREF="info.htm#M67" NAME="L844"><B>info object isa mixin</B><I> object class</I></A>
<DD><A HREF="info.htm#M68" NAME="L845"><B>info object isa object</B><I> object</I></A>
<DD><A HREF="info.htm#M69" NAME="L846"><B>info object isa typeof</B><I> object class</I></A>
</DL>
<DD><A HREF="info.htm#M70" NAME="L847"><B>info object methods</B><I> object</I> ?<I>option...</I>?</A>
<DL class="object introspection">
<DD><A HREF="info.htm#M71" NAME="L848"><B>-all</B></A>
<DD><A HREF="info.htm#M72" NAME="L849"><B>-private</B></A>
</DL>
<DD><A HREF="info.htm#M73" NAME="L850"><B>info object methodtype</B><I> object method</I></A>
<DD><A HREF="info.htm#M74" NAME="L851"><B>info object mixins</B><I> object</I></A>
<DD><A HREF="info.htm#M75" NAME="L852"><B>info object namespace</B><I> object</I></A>
<DD><A HREF="info.htm#M76" NAME="L853"><B>info object variables</B><I> object</I></A>
<DD><A HREF="info.htm#M77" NAME="L854"><B>info object vars</B><I> object</I> ?<I>pattern</I>?</A>
</DL>
<DD><A HREF="info.htm#M78" NAME="L855">EXAMPLES</A>
<DD><A HREF="info.htm#M79" NAME="L856">EXAMPLES WITH OBJECTS</A>
<DD><A HREF="info.htm#M80" NAME="L857">SEE ALSO</A>
<DD><A HREF="info.htm#M81" NAME="L858">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
info &mdash; Return information about the state of the Tcl interpreter
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>info </B><I>option </I>?<I>arg arg ...</I>?<BR>
<H3><A NAME="M4">DESCRIPTION</A></H3>
This command provides information about various internals of the Tcl
interpreter.
The legal <I>option</I>s (which may be abbreviated) are:
<P>
<DL class="description">
<DT><A NAME="M5"><B>info args </B><I>procname</I></A><DD>
Returns a list containing the names of the arguments to procedure
<I>procname</I>, in order.  <I>Procname</I> must be the name of a
Tcl command procedure.
<P><DT><A NAME="M6"><B>info body </B><I>procname</I></A><DD>
Returns the body of procedure <I>procname</I>.  <I>Procname</I> must be
the name of a Tcl command procedure.
<P><DT><A NAME="M7"><B>info class</B><I> subcommand class</I> ?<I>arg ...</I></A><DD>
Returns information about the class, <I>class</I>. The <I>subcommand</I>s are
described in <B><A HREF="#M42">CLASS INTROSPECTION</A></B> below.
<P><DT><A NAME="M8"><B>info cmdcount</B></A><DD>
Returns a count of the total number of commands that have been invoked
in this interpreter.
<P><DT><A NAME="M9"><B>info commands </B>?<I>pattern</I>?</A><DD>
If <I>pattern</I> is not specified,
returns a list of names of all the Tcl commands visible
(i.e. executable without using a qualified name) to the current namespace,
including both the built-in commands written in C and
the command procedures defined using the <B><A HREF="../TclCmd/proc.htm">proc</A></B> command.
If <I>pattern</I> is specified,
only those names matching <I>pattern</I> are returned.
Matching is determined using the same rules as for <B><A HREF="../TclCmd/string.htm">string match</A></B>.
<I>pattern</I> can be a qualified name like <B>Foo::print*</B>.
That is, it may specify a particular namespace
using a sequence of namespace names separated by double colons (<B>::</B>),
and may have pattern matching special characters
at the end to specify a set of commands in that namespace.
If <I>pattern</I> is a qualified name,
the resulting list of command names has each one qualified with the name
of the specified namespace, and only the commands defined in the named
namespace are returned.
<P><DT><A NAME="M10"><B>info complete </B><I>command</I></A><DD>
Returns 1 if <I>command</I> is a complete Tcl command in the sense of
having no unclosed quotes, braces, brackets or array element names.
If the command does not appear to be complete then 0 is returned.
This command is typically used in line-oriented input environments
to allow users to type in commands that span multiple lines;  if the
command is not complete, the script can delay evaluating it until additional
lines have been typed to complete the command.
<P><DT><A NAME="M11"><B>info coroutine</B></A><DD>
Returns the name of the currently executing <B><A HREF="../TclCmd/coroutine.htm">coroutine</A></B>, or the empty
string if either no coroutine is currently executing, or the current coroutine
has been deleted (but has not yet returned or yielded since deletion).
<P><DT><A NAME="M12"><B>info default </B><I>procname arg varname</I></A><DD>
<I>Procname</I> must be the name of a Tcl command procedure and <I>arg</I>
must be the name of an argument to that procedure.  If <I>arg</I>
does not have a default value then the command returns <B>0</B>.
Otherwise it returns <B>1</B> and places the default value of <I>arg</I>
into variable <I>varname</I>.
<P><DT><A NAME="M13"><B>info errorstack </B>?<I>interp</I>?</A><DD>
Returns, in a form that is programmatically easy to parse, the function names
and arguments at each level from the call stack of the last error in the given
<I>interp</I>, or in the current one if not specified.
<P>
This form is an even-sized list alternating tokens and parameters. Tokens are
currently either <B>CALL</B>, <B>UP</B>, or <B>INNER</B>, but other values may be
introduced in the future. <B>CALL</B> indicates a procedure call, and its
parameter is the corresponding <B>info level</B> <B>0</B>. <B>UP</B> indicates a
shift in variable frames generated by <B><A HREF="../TclCmd/uplevel.htm">uplevel</A></B> or similar, and applies to
the previous <B>CALL</B> item. Its parameter is the level offset. <B>INNER</B>
identifies the
&#8220;inner context&#8221;,
which is the innermost atomic command or bytecode instruction that raised the
error, along with its arguments when available. While <B>CALL</B> and <B>UP</B>
allow to follow complex call paths, <B>INNER</B> homes in on the offending
operation in the innermost procedure call, even going to sub-expression
granularity.
<P>This information is also present in the <B>-errorstack</B> entry of the
options dictionary returned by 3-argument <B><A HREF="../TclCmd/catch.htm">catch</A></B>; <B>info errorstack</B>
is a convenient way of retrieving it for uncaught errors at top-level in an
interactive <B><A HREF="../UserCmd/tclsh.htm">tclsh</A></B>.
<P><DT><A NAME="M14"><B>info exists </B><I>varName</I></A><DD>
Returns <B>1</B> if the variable named <I>varName</I> exists in the
current context (either as a global or local variable) and has been
defined by being given a value, returns <B>0</B> otherwise.
<P><DT><A NAME="M15"><B>info frame</B> ?<I>number</I>?</A><DD>
This command provides access to all frames on the stack, even those
hidden from <B>info level</B>. If <I>number</I> is not specified, this
command returns a number giving the frame level of the command. This
is 1 if the command is invoked at top-level. If <I>number</I> is
specified, then the result is a dictionary containing the location
information for the command at the <I>number</I>ed level on the stack.
<P>
If <I>number</I> is positive (&gt; 0) then it selects a particular stack
level (1 refers to the outer-most active command, 2 to the command it
called, and so on, up to the current frame level which refers to
<B>info frame</B> itself); otherwise it gives a level relative to the
current command (0 refers to the current command, i.e., <B>info
frame</B> itself, -1 to its caller, and so on).
<P>
This is similar to how <B>info level</B> works, except that this
subcommand reports all frames, like <B><A HREF="../TclCmd/source.htm">source</A></B>d scripts,
<B><A HREF="../TclCmd/eval.htm">eval</A></B>s, <B><A HREF="../TclCmd/uplevel.htm">uplevel</A></B>s, etc.
<P>
Note that for nested commands, like
&#8220;foo [bar [x]]&#8221;,
only
&#8220;x&#8221;
will be seen by an <B>info frame</B> invoked within
&#8220;x&#8221;.
This is the same as for <B>info level</B> and error stack traces.
<P>
The result dictionary may contain the keys listed below, with the
specified meanings for their values:
<P>
<DL class="description">
<DT><A NAME="M16"><B>type</B></A><DD>
This entry is always present and describes the nature of the location
for the command. The recognized values are <B><A HREF="../TclCmd/source.htm">source</A></B>, <B><A HREF="../TclCmd/proc.htm">proc</A></B>,
<B><A HREF="../TclCmd/eval.htm">eval</A></B>, and <B>precompiled</B>.
<P>
<DL class="description">
<DT><A NAME="M17"><B>source</B></A><DD>
means that the command is found in a script loaded by the <B><A HREF="../TclCmd/source.htm">source</A></B>
command.
<P><DT><A NAME="M18"><B>proc</B></A><DD>
means that the command is found in dynamically created procedure body.
<P><DT><A NAME="M19"><B>eval</B></A><DD>
means that the command is executed by <B><A HREF="../TclCmd/eval.htm">eval</A></B> or <B><A HREF="../TclCmd/uplevel.htm">uplevel</A></B>.
<P><DT><A NAME="M20"><B>precompiled</B></A><DD>
means that the command is found in a pre-compiled script (loadable by
the package <B>tbcload</B>), and no further information will be
available.
<P></DL>
<P><DT><A NAME="M21"><B>line</B></A><DD>
This entry provides the number of the line the command is at inside of
the script it is a part of. This information is not present for type
<B>precompiled</B>. For type <B><A HREF="../TclCmd/source.htm">source</A></B> this information is counted
relative to the beginning of the file, whereas for the last two types
the line is counted relative to the start of the script.
<P><DT><A NAME="M22"><B>file</B></A><DD>
This entry is present only for type <B><A HREF="../TclCmd/source.htm">source</A></B>. It provides the
normalized path of the file the command is in.
<P><DT><A NAME="M23"><B>cmd</B></A><DD>
This entry provides the string representation of the command. This is
usually the unsubstituted form, however for commands which are a
canonically-constructed list (e.g., as produced by the <B><A HREF="../TclCmd/list.htm">list</A></B> command)
executed by <B><A HREF="../TclCmd/eval.htm">eval</A></B> it is the substituted form as they have no other
string representation. Care is taken that the canonicality property of
the latter is not spoiled.
<P><DT><A NAME="M24"><B>proc</B></A><DD>
This entry is present only if the command is found in the body of a
regular Tcl procedure. It then provides the name of that procedure.
<P><DT><A NAME="M25"><B>lambda</B></A><DD>
This entry is present only if the command is found in the body of an
anonymous Tcl procedure, i.e. a lambda. It then provides the entire
definition of the lambda in question.
<P><DT><A NAME="M26"><B>level</B></A><DD>
This entry is present only if the queried frame has a corresponding
frame returned by <B>info level</B>. It provides the index of this
frame, relative to the current level (0 and negative numbers).
<P></DL>
<P>
A thing of note is that for procedures statically defined in files the
locations of commands in their bodies will be reported with type
<B><A HREF="../TclCmd/source.htm">source</A></B> and absolute line numbers, and not as type
<B><A HREF="../TclCmd/proc.htm">proc</A></B>. The same is true for procedures nested in statically
defined procedures, and literal eval scripts in files or statically
defined procedures.
<P>
In contrast, procedure definitions and <B><A HREF="../TclCmd/eval.htm">eval</A></B> within a dynamically
<B><A HREF="../TclCmd/eval.htm">eval</A></B>uated environment count line numbers relative to the start of
their script, even if they would be able to count relative to the
start of the outer dynamic script. That type of number usually makes
more sense.
<P>
A different way of describing this behaviour is that file based
locations are tracked as deeply as possible, and where this is not
possible the lines are counted based on the smallest possible
<B><A HREF="../TclCmd/eval.htm">eval</A></B> or procedure body, as that scope is usually easier to find
than any dynamic outer scope.
<P>The syntactic form <B>{*}</B> is handled like <B><A HREF="../TclCmd/eval.htm">eval</A></B>. I.e. if it
is given a literal list argument the system tracks the line number
within the list words as well, and otherwise all line numbers are
counted relative to the start of each word (smallest scope)
<P><DT><A NAME="M27"><B>info functions </B>?<I>pattern</I>?</A><DD>
If <I>pattern</I> is not specified, returns a list of all the math
functions currently defined.
If <I>pattern</I> is specified, only those functions whose name matches
<I>pattern</I> are returned.  Matching is determined using the same
rules as for <B><A HREF="../TclCmd/string.htm">string match</A></B>.
<P><DT><A NAME="M28"><B>info globals </B>?<I>pattern</I>?</A><DD>
If <I>pattern</I> is not specified, returns a list of all the names
of currently-defined global variables.
Global variables are variables in the global namespace.
If <I>pattern</I> is specified, only those names matching <I>pattern</I>
are returned.  Matching is determined using the same rules as for
<B><A HREF="../TclCmd/string.htm">string match</A></B>.
<P><DT><A NAME="M29"><B>info hostname</B></A><DD>
Returns the name of the computer on which this invocation is being
executed.
Note that this name is not guaranteed to be the fully qualified domain
name of the host.  Where machines have several different names (as is
common on systems with both TCP/IP (DNS) and NetBIOS-based networking
installed,) it is the name that is suitable for TCP/IP networking that
is returned.
<P><DT><A NAME="M30"><B>info level</B> ?<I>number</I>?</A><DD>
If <I>number</I> is not specified, this command returns a number
giving the stack level of the invoking procedure, or 0 if the
command is invoked at top-level.  If <I>number</I> is specified,
then the result is a list consisting of the name and arguments for the
procedure call at level <I>number</I> on the stack.  If <I>number</I>
is positive then it selects a particular stack level (1 refers
to the top-most active procedure, 2 to the procedure it called, and
so on); otherwise it gives a level relative to the current level
(0 refers to the current procedure, -1 to its caller, and so on).
See the <B><A HREF="../TclCmd/uplevel.htm">uplevel</A></B> command for more information on what stack
levels mean.
<P><DT><A NAME="M31"><B>info library</B></A><DD>
Returns the name of the library directory in which standard Tcl
scripts are stored.
This is actually the value of the <B><A HREF="../TclCmd/tclvars.htm">tcl_library</A></B>
variable and may be changed by setting <B><A HREF="../TclCmd/tclvars.htm">tcl_library</A></B>.
See the <B><A HREF="../TclCmd/tclvars.htm">tclvars</A></B> manual entry for more information.
<P><DT><A NAME="M32"><B>info loaded </B>?<I>interp</I>?</A><DD>
Returns a list describing all of the packages that have been loaded into
<I>interp</I> with the <B><A HREF="../TclCmd/load.htm">load</A></B> command.
Each list element is a sub-list with two elements consisting of the
name of the file from which the package was loaded and the name of
the package.
For statically-loaded packages the file name will be an empty string.
If <I>interp</I> is omitted then information is returned for all packages
loaded in any interpreter in the process.
To get a list of just the packages in the current interpreter, specify
an empty string for the <I>interp</I> argument.
<P><DT><A NAME="M33"><B>info locals </B>?<I>pattern</I>?</A><DD>
If <I>pattern</I> is not specified, returns a list of all the names
of currently-defined local variables, including arguments to the
current procedure, if any.
Variables defined with the <B><A HREF="../TclCmd/global.htm">global</A></B>, <B><A HREF="../TclCmd/upvar.htm">upvar</A></B>  and
<B><A HREF="../TclCmd/variable.htm">variable</A></B> commands will not be returned.
If <I>pattern</I> is specified, only those names matching <I>pattern</I>
are returned.  Matching is determined using the same rules as for
<B><A HREF="../TclCmd/string.htm">string match</A></B>.
<P><DT><A NAME="M34"><B>info nameofexecutable</B></A><DD>
Returns the full path name of the binary file from which the application
was invoked.  If Tcl was unable to identify the file, then an empty
string is returned.
<P><DT><A NAME="M35"><B>info object</B><I> subcommand object</I> ?<I>arg ...</I></A><DD>
Returns information about the object, <I>object</I>. The <I>subcommand</I>s are
described in <B><A HREF="#M58">OBJECT INTROSPECTION</A></B> below.
<P><DT><A NAME="M36"><B>info patchlevel</B></A><DD>
Returns the value of the global variable <B>tcl_patchLevel</B>; see
the <B><A HREF="../TclCmd/tclvars.htm">tclvars</A></B> manual entry for more information.
<P><DT><A NAME="M37"><B>info procs </B>?<I>pattern</I>?</A><DD>
If <I>pattern</I> is not specified, returns a list of all the
names of Tcl command procedures in the current namespace.
If <I>pattern</I> is specified,
only those procedure names in the current namespace
matching <I>pattern</I> are returned.
Matching is determined using the same rules as for
<B><A HREF="../TclCmd/string.htm">string match</A></B>.
If <I>pattern</I> contains any namespace separators, they are used to
select a namespace relative to the current namespace (or relative to
the global namespace if <I>pattern</I> starts with <B>::</B>) to match
within; the matching pattern is taken to be the part after the last
namespace separator.
<P><DT><A NAME="M38"><B>info script</B> ?<I>filename</I>?</A><DD>
If a Tcl script file is currently being evaluated (i.e. there is a
call to <B><A HREF="../TclLib/Eval.htm">Tcl_EvalFile</A></B> active or there is an active invocation
of the <B><A HREF="../TclCmd/source.htm">source</A></B> command), then this command returns the name
of the innermost file being processed.  If <I>filename</I> is specified,
then the return value of this command will be modified for the
duration of the active invocation to return that name.  This is
useful in virtual file system applications.
Otherwise the command returns an empty string.
<P><DT><A NAME="M39"><B>info sharedlibextension</B></A><DD>
Returns the extension used on this platform for the names of files
containing shared libraries (for example, <B>.so</B> under Solaris).
If shared libraries are not supported on this platform then an empty
string is returned.
<P><DT><A NAME="M40"><B>info tclversion</B></A><DD>
Returns the value of the global variable <B><A HREF="../TclCmd/tclvars.htm">tcl_version</A></B>; see
the <B><A HREF="../TclCmd/tclvars.htm">tclvars</A></B> manual entry for more information.
<P><DT><A NAME="M41"><B>info vars</B> ?<I>pattern</I>?</A><DD>
If <I>pattern</I> is not specified,
returns a list of all the names of currently-visible variables.
This includes locals and currently-visible globals.
If <I>pattern</I> is specified, only those names matching <I>pattern</I>
are returned.  Matching is determined using the same rules as for
<B><A HREF="../TclCmd/string.htm">string match</A></B>.
<I>pattern</I> can be a qualified name like <B>Foo::option*</B>.
That is, it may specify a particular namespace
using a sequence of namespace names separated by double colons (<B>::</B>),
and may have pattern matching special characters
at the end to specify a set of variables in that namespace.
If <I>pattern</I> is a qualified name,
the resulting list of variable names
has each matching namespace variable qualified with the name
of its namespace.
Note that a currently-visible variable may not yet
&#8220;exist&#8221;
if it has not
been set (e.g. a variable declared but not set by <B><A HREF="../TclCmd/variable.htm">variable</A></B>).
<P></DL>
<H4><A NAME="M42">CLASS INTROSPECTION</A></H4>
The following <I>subcommand</I> values are supported by <B>info class</B>:
<P>
<DL class="class introspection">
<DT><A NAME="M43"><B>info class call</B><I> class method</I></A><DD>
Returns a description of the method implementations that are used to provide a
stereotypical instance of <I>class</I>'s implementation of <I>method</I>
(stereotypical instances being objects instantiated by a class without having
any object-specific definitions added). This consists of a list of lists of
four elements, where each sublist consists of a word that describes the
general type of method implementation (being one of <B>method</B> for an
ordinary method, <B>filter</B> for an applied filter, and <B><A HREF="../TclCmd/unknown.htm">unknown</A></B> for a
method that is invoked as part of unknown method handling), a word giving the
name of the particular method invoked (which is always the same as
<I>method</I> for the <B>method</B> type, and
&#8220;<B><A HREF="../TclCmd/unknown.htm">unknown</A></B>&#8221;
for the <B><A HREF="../TclCmd/unknown.htm">unknown</A></B> type), a word giving the fully qualified name of the
class that defined the method, and a word describing the type of method
implementation (see <B>info class methodtype</B>).
<P>
Note that there is no inspection of whether the method implementations
actually use <B><A HREF="../TclCmd/next.htm">next</A></B> to transfer control along the call chain.
<P><DT><A NAME="M44"><B>info class constructor</B><I> class</I></A><DD>
This subcommand returns a description of the definition of the constructor of
class <I>class</I>. The definition is described as a two element list; the first
element is the list of arguments to the constructor in a form suitable for
passing to another call to <B><A HREF="../TclCmd/proc.htm">proc</A></B> or a method definition, and the second
element is the body of the constructor. If no constructor is present, this
returns the empty list.
<P><DT><A NAME="M45"><B>info class definition</B><I> class method</I></A><DD>
This subcommand returns a description of the definition of the method named
<I>method</I> of class <I>class</I>. The definition is described as a two element
list; the first element is the list of arguments to the method in a form
suitable for passing to another call to <B><A HREF="../TclCmd/proc.htm">proc</A></B> or a method definition, and
the second element is the body of the method.
<P><DT><A NAME="M46"><B>info class destructor</B><I> class</I></A><DD>
This subcommand returns the body of the destructor of class <I>class</I>. If no
destructor is present, this returns the empty string.
<P><DT><A NAME="M47"><B>info class filters</B><I> class</I></A><DD>
This subcommand returns the list of filter methods set on the class.
<P><DT><A NAME="M48"><B>info class forward</B><I> class method</I></A><DD>
This subcommand returns the argument list for the method forwarding called
<I>method</I> that is set on the class called <I>class</I>.
<P><DT><A NAME="M49"><B>info class instances</B><I> class</I> ?<I>pattern</I>?</A><DD>
This subcommand returns a list of instances of class <I>class</I>. If the
optional <I>pattern</I> argument is present, it constrains the list of returned
instances to those that match it according to the rules of <B><A HREF="../TclCmd/string.htm">string match</A></B>.
<P><DT><A NAME="M50"><B>info class methods</B><I> class</I> ?<I>options...</I>?</A><DD>
This subcommand returns a list of all public (i.e. exported) methods of the
class called <I>class</I>. Any of the following <I>option</I>s may be
specified, controlling exactly which method names are returned:
<P>
<DL class="class introspection">
<DT><A NAME="M51"><B>-all</B></A><DD>
If the <B>-all</B> flag is given, the list of methods will include those
methods defined not just by the class, but also by the class's superclasses
and mixins.
<P><DT><A NAME="M52"><B>-private</B></A><DD>
If the <B>-private</B> flag is given, the list of methods will also include
the private (i.e. non-exported) methods of the class (and superclasses and
mixins, if <B>-all</B> is also given).
<P></DL>
<P><DT><A NAME="M53"><B>info class methodtype</B><I> class method</I></A><DD>
This subcommand returns a description of the type of implementation used for
the method named <I>method</I> of class <I>class</I>. When the result is
<B>method</B>, further information can be discovered with <B>info class
definition</B>, and when the result is <B>forward</B>, further information can
be discovered with <B>info class forward</B>.
<P><DT><A NAME="M54"><B>info class mixins</B><I> class</I></A><DD>
This subcommand returns a list of all classes that have been mixed into the
class named <I>class</I>.
<P><DT><A NAME="M55"><B>info class subclasses</B><I> class</I> ?<I>pattern</I>?</A><DD>
This subcommand returns a list of direct subclasses of class <I>class</I>. If
the optional <I>pattern</I> argument is present, it constrains the list of
returned classes to those that match it according to the rules of
<B><A HREF="../TclCmd/string.htm">string match</A></B>.
<P><DT><A NAME="M56"><B>info class superclasses</B><I> class</I></A><DD>
This subcommand returns a list of direct superclasses of class <I>class</I> in
inheritance precedence order.
<P><DT><A NAME="M57"><B>info class variables</B><I> class</I></A><DD>
This subcommand returns a list of all variables that have been declared for
the class named <I>class</I> (i.e. that are automatically present in the
class's methods, constructor and destructor).
<P></DL>
<H4><A NAME="M58">OBJECT INTROSPECTION</A></H4>
The following <I>subcommand</I> values are supported by <B>info object</B>:
<P>
<DL class="object introspection">
<DT><A NAME="M59"><B>info object call</B><I> object method</I></A><DD>
Returns a description of the method implementations that are used to provide
<I>object</I>'s implementation of <I>method</I>.  This consists of a list of
lists of four elements, where each sublist consists of a word that describes
the general type of method implementation (being one of <B>method</B> for an
ordinary method, <B>filter</B> for an applied filter, and <B><A HREF="../TclCmd/unknown.htm">unknown</A></B> for a
method that is invoked as part of unknown method handling), a word giving the
name of the particular method invoked (which is always the same as
<I>method</I> for the <B>method</B> type, and
&#8220;<B><A HREF="../TclCmd/unknown.htm">unknown</A></B>&#8221;
for the <B><A HREF="../TclCmd/unknown.htm">unknown</A></B> type), a word giving what defined the method (the fully
qualified name of the class, or the literal string <B>object</B> if the method
implementation is on an instance), and a word describing the type of method
implementation (see <B>info object methodtype</B>).
<P>
Note that there is no inspection of whether the method implementations
actually use <B><A HREF="../TclCmd/next.htm">next</A></B> to transfer control along the call chain.
<P><DT><A NAME="M60"><B>info object class</B><I> object</I> ?<I>className</I>?</A><DD>
If <I>className</I> is unspecified, this subcommand returns class of the
<I>object</I> object. If <I>className</I> is present, this subcommand returns a
boolean value indicating whether the <I>object</I> is of that class.
<P><DT><A NAME="M61"><B>info object definition</B><I> object method</I></A><DD>
This subcommand returns a description of the definition of the method named
<I>method</I> of object <I>object</I>. The definition is described as a two
element list; the first element is the list of arguments to the method in a
form suitable for passing to another call to <B><A HREF="../TclCmd/proc.htm">proc</A></B> or a method definition,
and the second element is the body of the method.
<P><DT><A NAME="M62"><B>info object filters</B><I> object</I></A><DD>
This subcommand returns the list of filter methods set on the object.
<P><DT><A NAME="M63"><B>info object forward</B><I> object method</I></A><DD>
This subcommand returns the argument list for the method forwarding called
<I>method</I> that is set on the object called <I>object</I>.
<P><DT><A NAME="M64"><B>info object isa</B><I> category object</I> ?<I>arg</I>?</A><DD>
This subcommand tests whether an object belongs to a particular category,
returning a boolean value that indicates whether the <I>object</I> argument
meets the criteria for the category. The supported categories are:
<P>
<DL class="object introspection">
<DT><A NAME="M65"><B>info object isa class</B><I> object</I></A><DD>
This returns whether <I>object</I> is a class (i.e. an instance of
<B><A HREF="../TclCmd/class.htm">oo::class</A></B> or one of its subclasses).
<P><DT><A NAME="M66"><B>info object isa metaclass</B><I> object</I></A><DD>
This returns whether <I>object</I> is a class that can manufacture classes
(i.e. is <B><A HREF="../TclCmd/class.htm">oo::class</A></B> or a subclass of it).
<P><DT><A NAME="M67"><B>info object isa mixin</B><I> object class</I></A><DD>
This returns whether <I>class</I> is directly mixed into <I>object</I>.
<P><DT><A NAME="M68"><B>info object isa object</B><I> object</I></A><DD>
This returns whether <I>object</I> really is an object.
<P><DT><A NAME="M69"><B>info object isa typeof</B><I> object class</I></A><DD>
This returns whether <I>class</I> is the type of <I>object</I> (i.e. whether
<I>object</I> is an instance of <I>class</I> or one of its subclasses, whether
direct or indirect).
<P></DL>
<P><DT><A NAME="M70"><B>info object methods</B><I> object</I> ?<I>option...</I>?</A><DD>
This subcommand returns a list of all public (i.e. exported) methods of the
object called <I>object</I>. Any of the following <I>option</I>s may be
specified, controlling exactly which method names are returned:
<P>
<DL class="object introspection">
<DT><A NAME="M71"><B>-all</B></A><DD>
If the <B>-all</B> flag is given, the list of methods will include those
methods defined not just by the object, but also by the object's class and
mixins, plus the superclasses of those classes.
<P><DT><A NAME="M72"><B>-private</B></A><DD>
If the <B>-private</B> flag is given, the list of methods will also include
the private (i.e. non-exported) methods of the object (and classes, if
<B>-all</B> is also given).
<P></DL>
<P><DT><A NAME="M73"><B>info object methodtype</B><I> object method</I></A><DD>
This subcommand returns a description of the type of implementation used for
the method named <I>method</I> of object <I>object</I>. When the result is
<B>method</B>, further information can be discovered with <B>info object
definition</B>, and when the result is <B>forward</B>, further information can
be discovered with <B>info object forward</B>.
<P><DT><A NAME="M74"><B>info object mixins</B><I> object</I></A><DD>
This subcommand returns a list of all classes that have been mixed into the
object named <I>object</I>.
<P><DT><A NAME="M75"><B>info object namespace</B><I> object</I></A><DD>
This subcommand returns the name of the internal namespace of the object named
<I>object</I>.
<P><DT><A NAME="M76"><B>info object variables</B><I> object</I></A><DD>
This subcommand returns a list of all variables that have been declared for
the object named <I>object</I> (i.e. that are automatically present in the
object's methods).
<P><DT><A NAME="M77"><B>info object vars</B><I> object</I> ?<I>pattern</I>?</A><DD>
This subcommand returns a list of all variables in the private namespace of
the object named <I>object</I>. If the optional <I>pattern</I> argument is
given, it is a filter (in the syntax of a <B><A HREF="../TclCmd/string.htm">string match</A></B> glob pattern)
that constrains the list of variables returned. Note that this is different
from the list returned by <B>info object variables</B>; that can include
variables that are currently unset, whereas this can include variables that
are not automatically included by any of <I>object</I>'s methods (or those of
its class, superclasses or mixins).
<P></DL>
<H3><A NAME="M78">EXAMPLES</A></H3>
This command prints out a procedure suitable for saving in a Tcl
script:
<P>
<PRE>proc printProc {procName} {
    set result [list proc $procName]
    set formals {}
    foreach var [<B>info args</B> $procName] {
        if {[<B>info default</B> $procName $var def]} {
            lappend formals [list $var $def]
        } else {
            # Still need the list-quoting because variable
            # names may properly contain spaces.
            lappend formals [list $var]
        }
    }
    puts [lappend result $formals [<B>info body</B> $procName]]
}</PRE>
<H4><A NAME="M79">EXAMPLES WITH OBJECTS</A></H4>
Every object necessarily knows what its class is; this information is
trivially extractable through introspection:
<P>
<PRE>oo::class create c
c create o
puts [<B>info object class</B> o]
                     <I><font size="+1">&#8594;</font> prints &quot;::c&quot;</I>
puts [<B>info object class</B> c]
                     <I><font size="+1">&#8594;</font> prints &quot;::oo::class&quot;</I></PRE>
<P>
The introspection capabilities can be used to discover what class implements a
method and get how it is defined. This procedure illustrates how:
<P>
<PRE>proc getDef {obj method} {
    foreach inf [<B>info object call</B> $obj $method] {
        lassign $inf calltype name locus methodtype
        # Assume no forwards or filters, and hence no $calltype
        # or $methodtype checks...
        if {$locus eq &quot;object&quot;} {
            return [<B>info object definition</B> $obj $name]
        } else {
            return [<B>info class definition</B> $locus $name]
        }
    }
    error &quot;no definition for $method&quot;
}</PRE>
<P>
This is an alternate way of looking up the definition; it is implemented by
manually scanning the list of methods up the inheritance tree. This code
assumes that only single inheritance is in use, and that there is no complex
use of mixed-in classes (in such cases, using <B>info object call</B> as above
is the simplest way of doing this by far):
<P>
<PRE>proc getDef {obj method} {
    if {$method in [<B>info object methods</B> $obj]} {
        # Assume no forwards
        return [<B>info object definition</B> $obj $method]
    }
    set cls [<B>info object class</B> $obj]
    while {$method ni [<B>info class methods</B> $cls]} {
        # Assume the simple case
        set cls [lindex [<B>info class superclass</B> $cls] 0]
        if {$cls eq &quot;&quot;} {
            error &quot;no definition for $method&quot;
        }
    }
    # Assume no forwards
    return [<B>info class definition</B> $cls $method]
}</PRE>
<H3><A NAME="M80">SEE ALSO</A></H3>
<B><A HREF="../TclCmd/global.htm">global</A></B>, <B><A HREF="../TclCmd/class.htm">oo::class</A></B>, <B><A HREF="../TclCmd/define.htm">oo::define</A></B>, <B><A HREF="../TclCmd/object.htm">oo::object</A></B>, <B><A HREF="../TclCmd/proc.htm">proc</A></B>, <B><A HREF="../TclCmd/self.htm">self</A></B>
<H3><A NAME="M81">KEYWORDS</A></H3>
<A href="../Keywords/C.htm#command">command</A>, <A href="../Keywords/I.htm#information">information</A>, <A href="../Keywords/I.htm#interpreter">interpreter</A>, <A href="../Keywords/I.htm#introspection">introspection</A>, <A href="../Keywords/L.htm#level">level</A>, <A href="../Keywords/N.htm#namespace">namespace</A>, <A href="../Keywords/O.htm#object">object</A>, <A href="../Keywords/P.htm#procedure">procedure</A>, <A href="../Keywords/V.htm#variable">variable</A>
<div class="copy">Copyright &copy; 1993 The Regents of the University of California.
Copyright &copy; 1994-1997 Sun Microsystems, Inc.
Copyright &copy; 1993-1997 Bell Labs Innovations for Lucent Technologies
Copyright &copy; 1998-2000 Ajuba Solutions
Copyright &copy; 2007-2012 Donal K. Fellows
</div>
</BODY></HTML>
