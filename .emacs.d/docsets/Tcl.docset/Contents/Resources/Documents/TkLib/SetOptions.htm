<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>Tk_SetOptions manual page - Tk Library Procedures</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.6.0/Tk8.6.0 Documentation</a> <small>&gt;</small> <a href="contents.htm">Tk C API, version 8.6.0</a> <small>&gt;</small> SetOptions</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../ItclCmd/contents.htm">[incr Tcl] Package Commands</A> | <A HREF="../Sqlite3Cmd/contents.htm">SQLite Package Commands</A> | <A HREF="../TdbcCmd/contents.htm">TDBC Package Commands</A> | <A HREF="../TdbcmysqlCmd/contents.htm">tdbc::mysql Package Commands</A> | <A HREF="../TdbcodbcCmd/contents.htm">tdbc::odbc Package Commands</A> | <A HREF="../TdbcpostgresCmd/contents.htm">tdbc::postgres Package Commands</A> | <A HREF="../Tdbcsqlite3Cmd/contents.htm">tdbc::sqlite3 Package Commands</A> | <A HREF="../ThreadCmd/contents.htm">Thread Package Commands</A> | <A HREF="../TclLib/contents.htm">Tcl C API</A> | <A HREF="../TkLib/contents.htm">Tk C API</A> | <A HREF="../ItclLib/contents.htm">[incr Tcl] Package C API</A> | <A HREF="../TdbcLib/contents.htm">TDBC Package C API</A></H3>
<DL>
<DD><A HREF="SetOptions.htm#M2" NAME="L552">NAME</A>
<DL><DD>Tk_CreateOptionTable, Tk_DeleteOptionTable, Tk_InitOptions, Tk_SetOptions, Tk_FreeSavedOptions, Tk_RestoreSavedOptions, Tk_GetOptionValue, Tk_GetOptionInfo, Tk_FreeConfigOptions, Tk_Offset &mdash; process configuration options</DD></DL>
<DD><A HREF="SetOptions.htm#M3" NAME="L553">SYNOPSIS</A>
<DL>
<DD><B>#include &lt;tk.h&gt;</B>
<DD>Tk_OptionTable
<DD><B>Tk_CreateOptionTable(</B><I>interp, templatePtr</I><B>)</B>
<DD><B>Tk_DeleteOptionTable(</B><I>optionTable</I><B>)</B>
<DD>int
<DD><B>Tk_InitOptions(</B><I>interp, recordPtr, optionTable, tkwin</I><B>)</B>
<DD>int
<DD><B>Tk_SetOptions(</B><I>interp, recordPtr, optionTable, objc, objv, tkwin, savePtr, maskPtr</I><B>)</B>
<DD><B>Tk_FreeSavedOptions(</B><I>savedPtr</I><B>)</B>
<DD><B>Tk_RestoreSavedOptions(</B><I>savedPtr</I><B>)</B>
<DD>Tcl_Obj *
<DD><B>Tk_GetOptionValue(</B><I>interp, recordPtr, optionTable, namePtr, tkwin</I><B>)</B>
<DD>Tcl_Obj *
<DD><B>Tk_GetOptionInfo(</B><I>interp, recordPtr, optionTable, namePtr, tkwin</I><B>)</B>
<DD><B>Tk_FreeConfigOptions(</B><I>recordPtr, optionTable, tkwin</I><B>)</B>
<DD>int
<DD><B>Tk_Offset(</B><I>type, field</I><B>)</B>
</DL>
<DD><A HREF="SetOptions.htm#M4" NAME="L554">ARGUMENTS</A>
<DL class="arguments">
</DL>
<DD><A HREF="SetOptions.htm#M5" NAME="L555">DESCRIPTION</A>
<DD><A HREF="SetOptions.htm#M6" NAME="L556">TEMPLATES</A>
<DL class="templates">
<DD><A HREF="SetOptions.htm#M7" NAME="L557"><B>TK_OPTION_ANCHOR</B></A>
<DD><A HREF="SetOptions.htm#M8" NAME="L558"><B>TK_OPTION_BITMAP</B></A>
<DD><A HREF="SetOptions.htm#M9" NAME="L559"><B>TK_OPTION_BOOLEAN</B></A>
<DD><A HREF="SetOptions.htm#M10" NAME="L560"><B>TK_OPTION_BORDER</B></A>
<DD><A HREF="SetOptions.htm#M11" NAME="L561"><B>TK_OPTION_COLOR</B></A>
<DD><A HREF="SetOptions.htm#M12" NAME="L562"><B>TK_OPTION_CURSOR</B></A>
<DD><A HREF="SetOptions.htm#M13" NAME="L563"><B>TK_OPTION_CUSTOM</B></A>
<DD><A HREF="SetOptions.htm#M14" NAME="L564"><B>TK_OPTION_DOUBLE</B></A>
<DD><A HREF="SetOptions.htm#M15" NAME="L565"><B>TK_OPTION_END</B></A>
<DD><A HREF="SetOptions.htm#M16" NAME="L566"><B>TK_OPTION_FONT</B></A>
<DD><A HREF="SetOptions.htm#M17" NAME="L567"><B>TK_OPTION_INT</B></A>
<DD><A HREF="SetOptions.htm#M18" NAME="L568"><B>TK_OPTION_JUSTIFY</B></A>
<DD><A HREF="SetOptions.htm#M19" NAME="L569"><B>TK_OPTION_PIXELS</B></A>
<DD><A HREF="SetOptions.htm#M20" NAME="L570"><B>TK_OPTION_RELIEF</B></A>
<DD><A HREF="SetOptions.htm#M21" NAME="L571"><B>TK_OPTION_STRING</B></A>
<DD><A HREF="SetOptions.htm#M22" NAME="L572"><B>TK_OPTION_STRING_TABLE</B></A>
<DD><A HREF="SetOptions.htm#M23" NAME="L573"><B>TK_OPTION_SYNONYM</B></A>
<DD><A HREF="SetOptions.htm#M24" NAME="L574"><B>TK_OPTION_WINDOW</B></A>
</DL>
<DD><A HREF="SetOptions.htm#M25" NAME="L575">STORAGE MANAGEMENT ISSUES</A>
<DD><A HREF="SetOptions.htm#M26" NAME="L576">OBJOFFSET VS. INTERNALOFFSET</A>
<DD><A HREF="SetOptions.htm#M27" NAME="L577">CUSTOM OPTION TYPES</A>
<DL class="custom option types">
<DD><A HREF="SetOptions.htm#M28" NAME="L578"><I>clientData</I></A>
<DD><A HREF="SetOptions.htm#M29" NAME="L579"><I>interp</I></A>
<DD><A HREF="SetOptions.htm#M30" NAME="L580"><I>Tkwin</I></A>
<DD><A HREF="SetOptions.htm#M31" NAME="L581"><I>valuePtr</I></A>
<DD><A HREF="SetOptions.htm#M32" NAME="L582"><I>recordPtr</I></A>
<DD><A HREF="SetOptions.htm#M33" NAME="L583"><I>internalOffset</I></A>
<DD><A HREF="SetOptions.htm#M34" NAME="L584"><I>saveInternalPtr</I></A>
<DD><A HREF="SetOptions.htm#M35" NAME="L585"><I>flags</I></A>
</DL>
<DD><A HREF="SetOptions.htm#M36" NAME="L586">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
Tk_CreateOptionTable, Tk_DeleteOptionTable, Tk_InitOptions, Tk_SetOptions, Tk_FreeSavedOptions, Tk_RestoreSavedOptions, Tk_GetOptionValue, Tk_GetOptionInfo, Tk_FreeConfigOptions, Tk_Offset &mdash; process configuration options
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>#include &lt;tk.h&gt;</B><BR>
Tk_OptionTable<BR>
<B>Tk_CreateOptionTable(</B><I>interp, templatePtr</I><B>)</B><BR>
<B>Tk_DeleteOptionTable(</B><I>optionTable</I><B>)</B><BR>
int<BR>
<B>Tk_InitOptions(</B><I>interp, recordPtr, optionTable, tkwin</I><B>)</B><BR>
int<BR>
<B>Tk_SetOptions(</B><I>interp, recordPtr, optionTable, objc, objv, tkwin, savePtr, maskPtr</I><B>)</B><BR>
<B>Tk_FreeSavedOptions(</B><I>savedPtr</I><B>)</B><BR>
<B>Tk_RestoreSavedOptions(</B><I>savedPtr</I><B>)</B><BR>
<A HREF="../TclLib/Object.htm">Tcl_Obj</A> *<BR>
<B>Tk_GetOptionValue(</B><I>interp, recordPtr, optionTable, namePtr, tkwin</I><B>)</B><BR>
<A HREF="../TclLib/Object.htm">Tcl_Obj</A> *<BR>
<B>Tk_GetOptionInfo(</B><I>interp, recordPtr, optionTable, namePtr, tkwin</I><B>)</B><BR>
<B>Tk_FreeConfigOptions(</B><I>recordPtr, optionTable, tkwin</I><B>)</B><BR>
int<BR>
<B>Tk_Offset(</B><I>type, field</I><B>)</B><BR>
<H3><A NAME="M4">ARGUMENTS</A></H3>
<DL class="arguments">
<DT><A HREF="../TclLib/Interp.htm">Tcl_Interp</A> <B>*interp</B> (in)<DD>
A Tcl interpreter.  Most procedures use this only for returning error
messages; if it is NULL then no error messages are returned.  For
<B>Tk_CreateOptionTable</B> the value cannot be NULL; it gives the
interpreter in which the option table will be used.
<P><DT>const Tk_OptionSpec <B>*templatePtr</B> (in)<DD>
Points to an array of static information that describes the configuration
options that are supported.  Used to build a Tk_OptionTable.  The information
pointed to by this argument must exist for the lifetime of the Tk_OptionTable.
<P><DT>Tk_OptionTable <B>optionTable</B> (in)<DD>
Token for an option table.  Must have been returned by a previous call
to <B>Tk_CreateOptionTable</B>.
<P><DT>char <B>*recordPtr</B> (in/out)<DD>
Points to structure in which values of configuration options are stored;
fields of this record are modified by procedures such as <B>Tk_SetOptions</B>
and read by procedures such as <B>Tk_GetOptionValue</B>.
<P><DT><A HREF="../TkLib/WindowId.htm">Tk_Window</A> <B>tkwin</B> (in)<DD>
For options such as <B>TK_OPTION_COLOR</B>, this argument indicates
the window in which the option will be used.  If <I>optionTable</I> uses
no window-dependent options, then a NULL value may be supplied for
this argument.
<P><DT>int <B>objc</B> (in)<DD>
Number of values in <I>objv</I>.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*const objv[]</B> (in)<DD>
Command-line arguments for setting configuring options.
<P><DT>Tk_SavedOptions <B>*savePtr</B> (out)<DD>
If not NULL, the structure pointed to by this argument is filled
in with the old values of any options that were modified and old
values are restored automatically if an error occurs in <B>Tk_SetOptions</B>.
<P><DT>int <B>*maskPtr</B> (out)<DD>
If not NULL, the word pointed to by <I>maskPtr</I> is filled in with the
bit-wise OR of the <I>typeMask</I> fields for the options that
were modified.
<P><DT>Tk_SavedOptions <B>*savedPtr</B> (in/out)<DD>
Points to a structure previously filled in by <B>Tk_SetOptions</B> with
old values of modified options.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*namePtr</B> (in)<DD>
The value of this object is the name of a particular option.  If NULL
is passed to <B>Tk_GetOptionInfo</B> then information is returned for
all options.  Must not be NULL when <B>Tk_GetOptionValue</B> is called.
<P><DT>type name <B>type</B> (in)<DD>
The name of the type of a record.
<P><DT>field name <B>field</B> (in)<DD>
The name of a field in records of type <I>type</I>.
<P></DL>
<H3><A NAME="M5">DESCRIPTION</A></H3>
These procedures handle most of the details of parsing configuration
options such as those for Tk widgets.  Given a description of what
options are supported, these procedures handle all the details of
parsing options and storing their values into a C structure associated
with the widget or object. The procedures were designed primarily for
widgets in Tk, but they can also be used for other kinds of objects that
have configuration options.  In the rest of this manual page
&#8220;widget&#8221;
will be used to refer to the object whose options are being managed; in
practice the object may not actually be a widget.  The term
&#8220;widget record&#8221;
is used to refer to the C-level structure in
which information about a particular widget or object is stored.
<P>
Note: the easiest way to learn how to use these procedures is to
look at a working example.  In Tk, the simplest example is the code
that implements the button family of widgets, which is in <B>tkButton.c</B>.
Other examples are in <B>tkSquare.c</B> and <B>tkMenu.c</B>.
<P>
In order to use these procedures, the code that implements the widget
must contain a static array of Tk_OptionSpec structures. This is a
template that describes the various options supported by that class of
widget; there is a separate template for each kind of widget.  The
template contains information such as the name of each option, its type,
its default value, and where the value of the option is stored in the
widget record.  See TEMPLATES below for more detail.
<P>
In order to process configuration options efficiently, the static
template must be augmented with additional information that is available
only at runtime.  The procedure <B>Tk_CreateOptionTable</B> creates this
dynamic information from the template and returns a Tk_OptionTable token
that describes both the static and dynamic information.  All of the
other procedures, such as <B>Tk_SetOptions</B>, take a Tk_OptionTable
token as argument.  Typically, <B>Tk_CreateOptionTable</B> is called the
first time that a widget of a particular class is created and the
resulting Tk_OptionTable is used in the future for all widgets of that
class.  A Tk_OptionTable may be used only in a single interpreter, given
by the <I>interp</I> argument to <B>Tk_CreateOptionTable</B>.  When an
option table is no longer needed <B>Tk_DeleteOptionTable</B> should be
called to free all of its resources.  All of the option tables
for a Tcl interpreter are freed automatically if the interpreter is deleted.
<P>
<B>Tk_InitOptions</B> is invoked when a new widget is created to set
the default values for all of the widget's configuration options.
<B>Tk_InitOptions</B> is passed a token for an option table (<I>optionTable</I>)
and a pointer to a widget record (<I>recordPtr</I>), which is the C
structure that holds information about this widget. <B>Tk_InitOptions</B>
uses the information in the option table to
choose an appropriate default for each option, then it stores the default
value directly into the widget record, overwriting any information that
was already present in the widget record.  <B>Tk_InitOptions</B> normally
returns <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>.  If an error occurred while setting the default values
(e.g., because a default value was erroneous) then <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> is returned
and an error message is left in <I>interp</I>'s result if <I>interp</I>
is not NULL.
<P>
<B>Tk_SetOptions</B> is invoked to modify configuration options based
on information specified in a Tcl command.  The command might be one that
creates a new widget, or a command that modifies options on an existing
widget.  The <I>objc</I> and <I>objv</I> arguments describe the
values of the arguments from the Tcl command.  <I>Objv</I> must contain
an even number of objects: the first object of each pair gives the name of
an option and the second object gives the new value for that option.
<B>Tk_SetOptions</B> looks up each name in <I>optionTable</I>, checks that
the new value of the option conforms to the type in <I>optionTable</I>,
and stores the value of the option into the widget record given by
<I>recordPtr</I>.  <B>Tk_SetOptions</B> normally returns <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>.  If
an error occurred (such as an unknown option name or an illegal option
value) then <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> is returned and an error message is left in
<I>interp</I>'s result if <I>interp</I> is not NULL.
<P>
<B>Tk_SetOptions</B> has two additional features.  First, if the
<I>maskPtr</I> argument is not NULL then it points to an integer
value that is filled in with information about the options that were
modified.  For each option in the template passed to
<B>Tk_CreateOptionTable</B> there is a <I>typeMask</I> field.  The
bits of this field are defined by the code that implements the widget;
for example, each bit might correspond to a particular configuration option.
Alternatively, bits might be used functionally.  For example, one bit might
be used for redisplay: all options that affect the widget's display, such
that changing the option requires the widget to be redisplayed, might have
that bit set.  Another bit might indicate that the geometry of the widget
must be recomputed, and so on.  <B>Tk_SetOptions</B> OR's together the
<I>typeMask</I> fields from all the options that were modified and returns
this value at *<I>maskPtr</I>; the caller can then use this information
to optimize itself so that, for example, it does not redisplay the widget
if the modified options do not affect the widget's appearance.
<P>
The second additional feature of <B>Tk_SetOptions</B> has to do with error
recovery.  If an error occurs while processing configuration options, this
feature makes it possible to restore all the configuration options to their
previous values.  Errors can occur either while processing options in
<B>Tk_SetOptions</B> or later in the caller.  In many cases the caller does
additional processing after <B>Tk_SetOptions</B> returns; for example, it
might use an option value to set a trace on a variable and may detect
an error if the variable is an array instead of a scalar.  Error recovery
is enabled by passing in a non-NULL value for the <I>savePtr</I> argument
to <B>Tk_SetOptions</B>; this should be a pointer to an uninitialized
Tk_SavedOptions structure on the caller's stack.  <B>Tk_SetOptions</B>
overwrites the structure pointed to by <I>savePtr</I> with information
about the old values of any options modified by the procedure.
If <B>Tk_SetOptions</B> returns successfully, the
caller uses the structure in one of two ways.  If the caller completes
its processing of the new options without any errors, then it must pass
the structure to <B>Tk_FreeSavedOptions</B> so that the old values can be
freed.  If the caller detects an error in its processing of the new
options, then it should pass the structure to <B>Tk_RestoreSavedOptions</B>,
which will copy the old values back into the widget record and free
the new values.
If <B>Tk_SetOptions</B> detects an error then it automatically restores
any options that had already been modified and leaves *<I>savePtr</I> in
an empty state: the caller need not call either <B>Tk_FreeSavedOptions</B> or
<B>Tk_RestoreSavedOptions</B>.
If the <I>savePtr</I> argument to <B>Tk_SetOptions</B> is NULL then
<B>Tk_SetOptions</B> frees each old option value immediately when it sets a new
value for the option.  In this case, if an error occurs in the third
option, the old values for the first two options cannot be restored.
<P>
<B>Tk_GetOptionValue</B> returns the current value of a configuration option
for a particular widget.  The <I>namePtr</I> argument contains the name of
an option; <B>Tk_GetOptionValue</B> uses <I>optionTable</I>
to lookup the option and extract its value from the widget record
pointed to by <I>recordPtr</I>, then it returns an object containing
that value.  If an error occurs (e.g., because <I>namePtr</I> contains an
unknown option name) then NULL is returned and an error message is left
in <I>interp</I>'s result unless <I>interp</I> is NULL.
<P>
<B>Tk_GetOptionInfo</B> returns information about configuration options in
a form suitable for <B>configure</B> widget commands.  If the <I>namePtr</I>
argument is not NULL, it points to an object that gives the name of a
configuration option; <B>Tk_GetOptionInfo</B> returns an object containing
a list with five elements, which are the name of the option, the name and
class used for the option in the option database, the default value for
the option, and the current value for the option.  If the <I>namePtr</I>
argument is NULL, then <B>Tk_GetOptionInfo</B> returns information about
all options in the form of a list of lists; each sublist describes one
option.  Synonym options are handled differently depending on whether
<I>namePtr</I> is NULL: if <I>namePtr</I> is NULL then the sublist for
each synonym option has only two elements, which are the name of the
option and the name of the other option that it refers to; if <I>namePtr</I>
is non-NULL and names a synonym option then the object returned
is the five-element list
for the other option that the synonym refers to.  If an error occurs
(e.g., because <I>namePtr</I> contains an unknown option name) then NULL
is returned and an error message is left in <I>interp</I>'s result unless
<I>interp</I> is NULL.
<P>
<B>Tk_FreeConfigOptions</B> must be invoked when a widget is deleted.
It frees all of the resources associated with any of the configuration
options defined in <I>recordPtr</I> by <I>optionTable</I>.
<P>
The <B>Tk_Offset</B> macro is provided as a safe way of generating the
<I>objOffset</I> and <I>internalOffset</I> values for entries in
Tk_OptionSpec structures.  It takes two arguments: the name of a type
of record, and the name of a field in that record. It returns the byte
offset of the named field in records of the given type.
<H3><A NAME="M6">TEMPLATES</A></H3>
The array of Tk_OptionSpec structures passed to <B>Tk_CreateOptionTable</B>
via its <I>templatePtr</I> argument describes the configuration options
supported by a particular class of widgets.  Each structure specifies
one configuration option and has the following fields:
<PRE>typedef struct {
    Tk_OptionType <I>type</I>;
    const char *<I>optionName</I>;
    const char *<I>dbName</I>;
    const char *<I>dbClass</I>;
    const char *<I>defValue</I>;
    int <I>objOffset</I>;
    int <I>internalOffset</I>;
    int <I>flags</I>;
    const void *<I>clientData</I>;
    int <I>typeMask</I>;
} <B>Tk_OptionSpec</B>;</PRE>
The <I>type</I> field indicates what kind of configuration option this is
(e.g. <B>TK_OPTION_COLOR</B> for a color value, or <B>TK_OPTION_INT</B> for
an integer value).  <I>Type</I> determines how the
value of the option is parsed (more on this below).
The <I>optionName</I> field is a string such as <B>-font</B> or <B>-bg</B>;
it is the name used for the option in Tcl commands and passed to
procedures via the <I>objc</I> or <I>namePtr</I> arguments.
The <I>dbName</I> and <I>dbClass</I> fields are used by <B>Tk_InitOptions</B>
to look up a default value for this option in the option database; if
<I>dbName</I> is NULL then the option database is not used by
<B>Tk_InitOptions</B> for this option.  The <I>defValue</I> field
specifies a default value for this configuration option if no
value is specified in the option database.  The <I>objOffset</I> and
<I>internalOffset</I> fields indicate where to store the value of this
option in widget records (more on this below); values for the <I>objOffset</I>
and <I>internalOffset</I> fields should always be generated with the
<B>Tk_Offset</B> macro.
The <I>flags</I> field contains additional information
to control the processing of this configuration option (see below
for details).
<I>ClientData</I> provides additional type-specific data needed
by certain types.  For instance, for <B>TK_OPTION_COLOR</B> types,
<I>clientData</I> is a string giving the default value to use on
monochrome displays.  See the descriptions of the different types
below for details.
The last field, <I>typeMask</I>, is used by <B>Tk_SetOptions</B> to
return information about which options were modified; see the description
of <B>Tk_SetOptions</B> above for details.
<P>
When <B>Tk_InitOptions</B> and <B>Tk_SetOptions</B> store the value of an
option into the widget record, they can do it in either of two ways.
If the <I>objOffset</I> field of the Tk_OptionSpec is greater than
or equal to zero, then the value of the option is stored as a
(<A HREF="../TclLib/Object.htm">Tcl_Obj</A> *) at the location in the widget record given by <I>objOffset</I>.
If the <I>internalOffset</I> field of the Tk_OptionSpec is
greater than or equal to zero, then the value of the option is stored
in a type-specific internal form at the location in the widget record
given by <I>internalOffset</I>.  For example, if the option's type is
<B>TK_OPTION_INT</B> then the internal form is an integer.  If the
<I>objOffset</I> or <I>internalOffset</I> field is negative then the
value is not stored in that form.  At least one of the offsets must be
greater than or equal to zero.
<P>
The <I>flags</I> field consists of one or more bits ORed together.  At
present only a single flag is supported: <B>TK_OPTION_NULL_OK</B>.  If
this bit is set for an option then an empty string will be accepted as
the value for the option and the resulting internal form will be a
NULL pointer, a zero value, or <B>None</B>, depending on the type of
the option.  If the flag is not set then empty strings will result
in errors.
<B>TK_OPTION_NULL_OK</B> is typically used to allow a
feature to be turned off entirely, e.g. set a cursor value to
<B>None</B> so that a window simply inherits its parent's cursor.
Not all option types support the <B>TK_OPTION_NULL_OK</B>
flag; for those that do, there is an explicit indication of that fact
in the descriptions below.
<P>
The <I>type</I> field of each Tk_OptionSpec structure determines
how to parse the value of that configuration option. The
legal value for <I>type</I>, and the corresponding actions, are
described below.  If the type requires a <I>tkwin</I> value to be
passed into procedures like <B>Tk_SetOptions</B>, or if it uses
the <I>clientData</I> field of the Tk_OptionSpec, then it is indicated
explicitly; if not mentioned, the type requires neither <I>tkwin</I>
nor <I>clientData</I>.
<P>
<DL class="templates">
<DT><A NAME="M7"><B>TK_OPTION_ANCHOR</B></A><DD>
The value must be a standard anchor position such as <B>ne</B> or
<B>center</B>.  The internal form is a <A HREF="../TkLib/GetAnchor.htm">Tk_Anchor</A> value like the ones
returned by <B><A HREF="../TkLib/GetAnchor.htm">Tk_GetAnchorFromObj</A></B>.
<P><DT><A NAME="M8"><B>TK_OPTION_BITMAP</B></A><DD>
The value must be a standard Tk bitmap name. The internal form is a
Pixmap token like the ones returned by <B><A HREF="../TkLib/GetBitmap.htm">Tk_AllocBitmapFromObj</A></B>.
This option type requires <I>tkwin</I> to be supplied to procedures
such as <B>Tk_SetOptions</B>, and it supports the <B>TK_OPTION_NULL_OK</B> flag.
<P><DT><A NAME="M9"><B>TK_OPTION_BOOLEAN</B></A><DD>
The value must be a standard boolean value such as <B>true</B> or
<B>no</B>.  The internal form is an integer with value 0 or 1.
<P><DT><A NAME="M10"><B>TK_OPTION_BORDER</B></A><DD>
The value must be a standard color name such as <B>red</B> or <B>#ff8080</B>.
The internal form is a <A HREF="../TkLib/3DBorder.htm">Tk_3DBorder</A> token like the ones returned
by <B><A HREF="../TkLib/3DBorder.htm">Tk_Alloc3DBorderFromObj</A></B>.
This option type requires <I>tkwin</I> to be supplied to procedures
such as <B>Tk_SetOptions</B>, and it supports the <B>TK_OPTION_NULL_OK</B> flag.
<P><DT><A NAME="M11"><B>TK_OPTION_COLOR</B></A><DD>
The value must be a standard color name such as <B>red</B> or <B>#ff8080</B>.
The internal form is an (XColor *) token like the ones returned by
<B><A HREF="../TkLib/GetColor.htm">Tk_AllocColorFromObj</A></B>.
This option type requires <I>tkwin</I> to be supplied to procedures
such as <B>Tk_SetOptions</B>, and it supports the <B>TK_OPTION_NULL_OK</B> flag.
<P><DT><A NAME="M12"><B>TK_OPTION_CURSOR</B></A><DD>
The value must be a standard cursor name such as <B>cross</B> or <B>@foo</B>.
The internal form is a <A HREF="../TkLib/GetCursor.htm">Tk_Cursor</A> token like the ones returned by
<B><A HREF="../TkLib/GetCursor.htm">Tk_AllocCursorFromObj</A></B>.
This option type requires <I>tkwin</I> to be supplied to procedures
such as <B>Tk_SetOptions</B>, and when the option is set the cursor
for the window is changed by calling <B>XDefineCursor</B>.  This
option type also supports the <B>TK_OPTION_NULL_OK</B> flag.
<P><DT><A NAME="M13"><B>TK_OPTION_CUSTOM</B></A><DD>
This option allows applications to define new option types.  The
clientData field of the entry points to a structure defining the new
option type.  See the section <B><A HREF="#M27">CUSTOM OPTION TYPES</A></B> below for details.
<P><DT><A NAME="M14"><B>TK_OPTION_DOUBLE</B></A><DD>
The string value must be a floating-point number in
the format accepted by <B>strtol</B>.  The internal form is a C
<B>double</B> value.  This option type supports the <B>TK_OPTION_NULL_OK</B>
flag; if a NULL value is set, the internal representation is set to zero.
<P><DT><A NAME="M15"><B>TK_OPTION_END</B></A><DD>
Marks the end of the template.  There must be a Tk_OptionSpec structure
with <I>type</I> <B>TK_OPTION_END</B> at the end of each template.  If the
<I>clientData</I> field of this structure is not NULL, then it points to
an additional array of Tk_OptionSpec's, which is itself terminated by
another <B>TK_OPTION_END</B> entry.  Templates may be chained arbitrarily
deeply.  This feature allows common options to be shared by several
widget classes.
<P><DT><A NAME="M16"><B>TK_OPTION_FONT</B></A><DD>
The value must be a standard font name such as <B>Times 16</B>.
The internal form is a <A HREF="../TkLib/GetFont.htm">Tk_Font</A> handle like the ones returned by
<B><A HREF="../TkLib/GetFont.htm">Tk_AllocFontFromObj</A></B>.
This option type requires <I>tkwin</I> to be supplied to procedures
such as <B>Tk_SetOptions</B>, and it supports the <B>TK_OPTION_NULL_OK</B> flag.
<P><DT><A NAME="M17"><B>TK_OPTION_INT</B></A><DD>
The string value must be an integer in the format accepted by
<B>strtol</B> (e.g. <B>0</B> and <B>0x</B> prefixes may be used to
specify octal or hexadecimal numbers, respectively).  The internal
form is a C <B>int</B> value.
<P><DT><A NAME="M18"><B>TK_OPTION_JUSTIFY</B></A><DD>
The value must be a standard justification value such as <B>left</B>.
The internal form is a <A HREF="../TkLib/GetJustify.htm">Tk_Justify</A> like the values returned by
<B><A HREF="../TkLib/GetJustify.htm">Tk_GetJustifyFromObj</A></B>.
<P><DT><A NAME="M19"><B>TK_OPTION_PIXELS</B></A><DD>
The value must specify a screen distance such as <B>2i</B> or <B>6.4</B>.
The internal form is an integer value giving a
distance in pixels, like the values returned by
<B><A HREF="../TkLib/GetPixels.htm">Tk_GetPixelsFromObj</A></B>.  Note: if the <I>objOffset</I> field is not
used then information about the original value of this option will be lost.
See <B>OBJOFFSET VS. INTERNALOFFSET</B> below for details.  This option
type supports the <B>TK_OPTION_NULL_OK</B> flag; if a NULL value is set, the
internal representation is set to zero.
<P><DT><A NAME="M20"><B>TK_OPTION_RELIEF</B></A><DD>
The value must be standard relief such as <B>raised</B>.
The internal form is an integer relief value such as
<B>TK_RELIEF_RAISED</B>.  This option type supports the <B>TK_OPTION_NULL_OK</B>
flag; if the empty string is specified as the value for the option,
the integer relief value is set to <B>TK_RELIEF_NULL</B>.
<P><DT><A NAME="M21"><B>TK_OPTION_STRING</B></A><DD>
The value may be any string.  The internal form is a (char *) pointer
that points to a dynamically allocated copy of the value.
This option type supports the <B>TK_OPTION_NULL_OK</B> flag.
<P><DT><A NAME="M22"><B>TK_OPTION_STRING_TABLE</B></A><DD>
For this type, <I>clientData</I> is a pointer to an array of strings
suitable for passing to <B><A HREF="../TclLib/GetIndex.htm">Tcl_GetIndexFromObj</A></B>.  The value must
be one of the strings in the table, or a unique abbreviation of
one of the strings.  The internal form is an integer giving the index
into the table of the matching string, like the return value
from <B><A HREF="../TclLib/StringObj.htm">Tcl_GetStringFromObj</A></B>.
<P><DT><A NAME="M23"><B>TK_OPTION_SYNONYM</B></A><DD>
This type is used to provide alternative names for an option (for
example, <B>-bg</B> is often used as a synonym for <B>-background</B>).
The <B>clientData</B> field is a string that gives the name of another
option in the same table.  Whenever the synonym option is used, the
information from the other option will be used instead.
<P><DT><A NAME="M24"><B>TK_OPTION_WINDOW</B></A><DD>
The value must be a window path name.  The internal form is a
<B><A HREF="../TkLib/WindowId.htm">Tk_Window</A></B> token for the window.
This option type requires <I>tkwin</I> to be supplied to procedures
such as <B>Tk_SetOptions</B> (in order to identify the application),
and it supports the <B>TK_OPTION_NULL_OK</B> flag.
<P></DL>
<H3><A NAME="M25">STORAGE MANAGEMENT ISSUES</A></H3>
If a field of a widget record has its offset stored in the <I>objOffset</I>
or <I>internalOffset</I> field of a Tk_OptionSpec structure then the
procedures described here will handle all of the storage allocation and
resource management issues associated with the field.  When the value
of an option is changed, <B>Tk_SetOptions</B> (or <B>Tk_FreeSavedOptions</B>)
will automatically free any resources associated with the old value, such as
Tk_Fonts for <B>TK_OPTION_FONT</B> options or dynamically allocated memory for
<B>TK_OPTION_STRING</B> options.  For an option stored as an object using the
<I>objOffset</I> field of a Tk_OptionSpec, the widget record shares the
object pointed to by the <I>objv</I> value from the call to
<B>Tk_SetOptions</B>.  The reference count for this object is incremented
when a pointer to it is stored in the widget record and decremented when
the option is modified.  When the widget is deleted
<B>Tk_FreeConfigOptions</B> should be invoked; it will free the resources
associated with all options and decrement reference counts for any
objects.
<P>
However, the widget code is responsible for storing NULL or <B>None</B> in
all pointer and token fields before invoking <B>Tk_InitOptions</B>.
This is needed to allow proper cleanup in the rare case where
an error occurs in <B>Tk_InitOptions</B>.
<H3><A NAME="M26">OBJOFFSET VS. INTERNALOFFSET</A></H3>
In most cases it is simplest to use the <I>internalOffset</I> field of
a Tk_OptionSpec structure and not the <I>objOffset</I> field.  This
makes the internal form of the value immediately available to the
widget code so the value does not have to be extracted from an object
each time it is used.  However, there are two cases where the
<I>objOffset</I> field is useful.  The first case is for
<B>TK_OPTION_PIXELS</B> options.  In this case, the internal form is
an integer pixel value that is valid only for a particular screen.
If the value of the option is retrieved, it will be returned as a simple
number.  For example, after the command <B>.b configure -borderwidth 2m</B>,
the command <B>.b configure -borderwidth</B> might return 7, which is the
integer pixel value corresponding to <B>2m</B>.  Unfortunately, this loses
the original screen-independent value. Thus for <B>TK_OPTION_PIXELS</B> options
it is better to use the <I>objOffset</I> field.  In this case the original
value of the option is retained in the object and can be returned when
the option is retrieved.  In most cases it is convenient to use the
<I>internalOffset</I> field as well, so that the integer value is
immediately available for use in the widget code (alternatively,
<B><A HREF="../TkLib/GetPixels.htm">Tk_GetPixelsFromObj</A></B> can be used to extract the integer value from
the object whenever it is needed).  Note: the problem of losing information
on retrievals exists only for <B>TK_OPTION_PIXELS</B> options.
<P>
The second reason to use the <I>objOffset</I> field is in order to
implement new types of options not supported by these procedures.
To implement a new type of option, you can use <B>TK_OPTION_STRING</B> as
the type in the Tk_OptionSpec structure and set the <I>objOffset</I> field
but not the <I>internalOffset</I> field.  Then, after calling
<B>Tk_SetOptions</B>, convert the object to internal form yourself.
<H3><A NAME="M27">CUSTOM OPTION TYPES</A></H3>
Applications can extend the built-in configuration types with
additional configuration types by writing procedures to parse, print,
free, and restore saved copies of the type and creating a structure
pointing to those procedures:
<PRE>typedef struct Tk_ObjCustomOption {
    char *name;
    Tk_CustomOptionSetProc *<I>setProc</I>;
    Tk_CustomOptionGetProc *<I>getProc</I>;
    Tk_CustomOptionRestoreProc *<I>restoreProc</I>;
    Tk_CustomOptionFreeProc *<I>freeProc</I>;
    ClientData <I>clientData</I>;
} <B>Tk_ObjCustomOption</B>;

typedef int <B>Tk_CustomOptionSetProc</B>(
    ClientData <I>clientData</I>,
    <A HREF="../TclLib/Interp.htm">Tcl_Interp</A> *<I>interp</I>,
    <A HREF="../TkLib/WindowId.htm">Tk_Window</A> <I>tkwin</I>,
    <A HREF="../TclLib/Object.htm">Tcl_Obj</A> **<I>valuePtr</I>,
    char *<I>recordPtr</I>,
    int <I>internalOffset</I>,
    char *<I>saveInternalPtr</I>,
    int <I>flags</I>);

typedef <A HREF="../TclLib/Object.htm">Tcl_Obj</A> *<B>Tk_CustomOptionGetProc</B>(
    ClientData <I>clientData</I>,
    <A HREF="../TkLib/WindowId.htm">Tk_Window</A> <I>tkwin</I>,
    char *<I>recordPtr</I>,
    int <I>internalOffset</I>);

typedef void <B>Tk_CustomOptionRestoreProc</B>(
    ClientData <I>clientData</I>,
    <A HREF="../TkLib/WindowId.htm">Tk_Window</A> <I>tkwin</I>,
    char *<I>internalPtr</I>,
    char *<I>saveInternalPtr</I>);

typedef void <B>Tk_CustomOptionFreeProc</B>(
    ClientData <I>clientData</I>,
    <A HREF="../TkLib/WindowId.htm">Tk_Window</A> <I>tkwin</I>,
    char *<I>internalPtr</I>);</PRE>
<P>
The Tk_ObjCustomOption structure contains six fields: a name
for the custom option type; pointers to the four procedures; and a
<I>clientData</I> value to be passed to those procedures when they are
invoked.  The <I>clientData</I> value typically points to a structure
containing information that is needed by the procedures when they are
parsing and printing options.  <I>RestoreProc</I> and <I>freeProc</I>
may be NULL, indicating that no function should be called for those
operations.
<P>
The <I>setProc</I> procedure is invoked by <B>Tk_SetOptions</B> to
convert a <A HREF="../TclLib/Object.htm">Tcl_Obj</A> into an internal representation and store the
resulting value in the widget record.  The arguments are:
<P>
<DL class="custom option types">
<DT><A NAME="M28"><I>clientData</I></A><DD>
A copy of the <I>clientData</I> field in the Tk_ObjCustomOption
structure.
<P><DT><A NAME="M29"><I>interp</I></A><DD>
A pointer to a Tcl interpreter, used for error reporting.
<P><DT><A NAME="M30"><I>Tkwin</I></A><DD>
A copy of the <I>tkwin</I> argument to <B>Tk_SetOptions</B>
<P><DT><A NAME="M31"><I>valuePtr</I></A><DD>
A pointer to a reference to a <A HREF="../TclLib/Object.htm">Tcl_Obj</A> describing the new value for the
option; it could have been specified explicitly in the call to
<B>Tk_SetOptions</B> or it could come from the option database or a
default.  If the objOffset for the option is non-negative (the option
value is stored as a (<A HREF="../TclLib/Object.htm">Tcl_Obj</A> *) in the widget record), the <A HREF="../TclLib/Object.htm">Tcl_Obj</A>
pointer referenced by <I>valuePtr</I> is the pointer that will be
stored at the objOffset for the option.  <I>SetProc</I> may modify the
value if necessary; for example, <I>setProc</I> may change the value to
NULL to support the <B>TK_OPTION_NULL_OK</B> flag.
<P><DT><A NAME="M32"><I>recordPtr</I></A><DD>
A pointer to the start of the widget record to modify.
<P><DT><A NAME="M33"><I>internalOffset</I></A><DD>
Offset in bytes from the start of the widget record to the location
where the internal representation of the option value is to be placed.
<P><DT><A NAME="M34"><I>saveInternalPtr</I></A><DD>
A pointer to storage allocated in a Tk_SavedOptions structure for the
internal representation of the original option value.  Before setting
the option to its new value, <I>setProc</I> should set the value
referenced by <I>saveInternalPtr</I> to the original value of the
option in order to support <B>Tk_RestoreSavedOptions</B>.
<P><DT><A NAME="M35"><I>flags</I></A><DD>
A copy of the <I>flags</I> field in the Tk_OptionSpec structure for the
option
<P></DL>
<P>
<I>SetProc</I> returns a standard Tcl result: <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B> to indicate successful
processing, or <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> to indicate a failure of any kind.  An error
message may be left in the Tcl interpreter given by <I>interp</I> in
the case of an error.
<P>
The <I>getProc</I> procedure is invoked by <B>Tk_GetOptionValue</B> and
<B>Tk_GetOptionInfo</B> to retrieve a <A HREF="../TclLib/Object.htm">Tcl_Obj</A> representation of the
internal representation of an option.  The <I>clientData</I> argument
is a copy of the <I>clientData</I> field in the Tk_ObjCustomOption
structure.  <I>Tkwin</I> is a copy of the <I>tkwin</I> argument to
<B>Tk_GetOptionValue</B> or <B>Tk_GetOptionInfo</B>.  <I>RecordPtr</I>
is a pointer to the beginning of the widget record to query.
<I>InternalOffset</I> is the offset in bytes from the beginning of the
widget record to the location where the internal representation of the
option value is stored.  <I>GetProc</I> must return a pointer to a
<A HREF="../TclLib/Object.htm">Tcl_Obj</A> representing the value of the option.
<P>
The <I>restoreProc</I> procedure is invoked by
<B>Tk_RestoreSavedOptions</B> to restore a previously saved internal
representation of a custom option value.  The <I>clientData</I> argument
is a copy of the <I>clientData</I> field in the Tk_ObjCustomOption
structure.  <I>Tkwin</I> is a copy of the <I>tkwin</I> argument to
<B>Tk_GetOptionValue</B> or <B>Tk_GetOptionInfo</B>.  <I>InternalPtr</I>
is a pointer to the location where internal representation of the
option value is stored.
<I>SaveInternalPtr</I> is a pointer to the saved value.
<I>RestoreProc</I> must copy the value from <I>saveInternalPtr</I> to
<I>internalPtr</I> to restore the value.  <I>RestoreProc</I> need not
free any memory associated with either <I>internalPtr</I> or
<I>saveInternalPtr</I>; <I>freeProc</I> will be invoked to free that
memory if necessary.  <I>RestoreProc</I> has no return value.
<P>
The <I>freeProc</I> procedure is invoked by <B>Tk_SetOptions</B> and
<B>Tk_FreeSavedOptions</B> to free any storage allocated for the
internal representation of a custom option.  The <I>clientData</I> argument
is a copy of the <I>clientData</I> field in the Tk_ObjCustomOption
structure.  <I>Tkwin</I> is a copy of the <I>tkwin</I> argument to
<B>Tk_GetOptionValue</B> or <B>Tk_GetOptionInfo</B>.  <I>InternalPtr</I>
is a pointer to the location where the internal representation of the
option value is stored.  The <I>freeProc</I> must free any storage
associated with the option.  <I>FreeProc</I> has no return value.
<H3><A NAME="M36">KEYWORDS</A></H3>
<A href="../Keywords/A.htm#anchor">anchor</A>, <A href="../Keywords/B.htm#bitmap">bitmap</A>, <A href="../Keywords/B.htm#boolean">boolean</A>, <A href="../Keywords/B.htm#border">border</A>, <A href="../Keywords/C.htm#color">color</A>, <A href="../Keywords/C.htm#configuration option">configuration option</A>, <A href="../Keywords/C.htm#cursor">cursor</A>, <A href="../Keywords/D.htm#double">double</A>, <A href="../Keywords/F.htm#font">font</A>, <A href="../Keywords/I.htm#integer">integer</A>, <A href="../Keywords/J.htm#justify">justify</A>, <A href="../Keywords/P.htm#pixels">pixels</A>, <A href="../Keywords/R.htm#relief">relief</A>, <A href="../Keywords/S.htm#screen distance">screen distance</A>, <A href="../Keywords/S.htm#synonym">synonym</A>
<div class="copy">Copyright &copy; 1998 Sun Microsystems, Inc.
</div>
</BODY></HTML>
