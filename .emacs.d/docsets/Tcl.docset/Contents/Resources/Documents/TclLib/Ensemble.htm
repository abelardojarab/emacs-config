<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>Tcl_Ensemble manual page - Tcl Library Procedures</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.6.0/Tk8.6.0 Documentation</a> <small>&gt;</small> <a href="contents.htm">Tcl C API, version 8.6.0</a> <small>&gt;</small> Ensemble</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../ItclCmd/contents.htm">[incr Tcl] Package Commands</A> | <A HREF="../Sqlite3Cmd/contents.htm">SQLite Package Commands</A> | <A HREF="../TdbcCmd/contents.htm">TDBC Package Commands</A> | <A HREF="../TdbcmysqlCmd/contents.htm">tdbc::mysql Package Commands</A> | <A HREF="../TdbcodbcCmd/contents.htm">tdbc::odbc Package Commands</A> | <A HREF="../TdbcpostgresCmd/contents.htm">tdbc::postgres Package Commands</A> | <A HREF="../Tdbcsqlite3Cmd/contents.htm">tdbc::sqlite3 Package Commands</A> | <A HREF="../ThreadCmd/contents.htm">Thread Package Commands</A> | <A HREF="../TclLib/contents.htm">Tcl C API</A> | <A HREF="../TkLib/contents.htm">Tk C API</A> | <A HREF="../ItclLib/contents.htm">[incr Tcl] Package C API</A> | <A HREF="../TdbcLib/contents.htm">TDBC Package C API</A></H3>
<DL>
<DD><A HREF="Ensemble.htm#M2" NAME="L260">NAME</A>
<DL><DD>Tcl_CreateEnsemble, Tcl_FindEnsemble, Tcl_GetEnsembleFlags, Tcl_GetEnsembleMappingDict, Tcl_GetEnsembleNamespace, Tcl_GetEnsembleParameterList, Tcl_GetEnsembleUnknownHandler, Tcl_GetEnsembleSubcommandList, Tcl_IsEnsemble, Tcl_SetEnsembleFlags, Tcl_SetEnsembleMappingDict, Tcl_SetEnsembleParameterList, Tcl_SetEnsembleSubcommandList, Tcl_SetEnsembleUnknownHandler &mdash; manipulate ensemble commands</DD></DL>
<DD><A HREF="Ensemble.htm#M3" NAME="L261">SYNOPSIS</A>
<DL>
<DD><B>#include &lt;tcl.h&gt;</B>
<DD>Tcl_Command
<DD><B>Tcl_CreateEnsemble</B>(<I>interp, name, namespacePtr, ensFlags</I>)
<DD>Tcl_Command
<DD><B>Tcl_FindEnsemble</B>(<I>interp, cmdNameObj, flags</I>)
<DD>int
<DD><B>Tcl_IsEnsemble</B>(<I>token</I>)
<DD>int
<DD><B>Tcl_GetEnsembleFlags</B>(<I>interp, token, ensFlagsPtr</I>)
<DD>int
<DD><B>Tcl_SetEnsembleFlags</B>(<I>interp, token, ensFlags</I>)
<DD>int
<DD><B>Tcl_GetEnsembleMappingDict</B>(<I>interp, token, dictObjPtr</I>)
<DD>int
<DD><B>Tcl_SetEnsembleMappingDict</B>(<I>interp, token, dictObj</I>)
<DD>int
<DD><B>Tcl_GetEnsembleParameterList</B>(<I>interp, token, listObjPtr</I>)
<DD>int
<DD><B>Tcl_SetEnsembleParameterList</B>(<I>interp, token, listObj</I>)
<DD>int
<DD><B>Tcl_GetEnsembleSubcommandList</B>(<I>interp, token, listObjPtr</I>)
<DD>int
<DD><B>Tcl_SetEnsembleSubcommandList</B>(<I>interp, token, listObj</I>)
<DD>int
<DD><B>Tcl_GetEnsembleUnknownHandler</B>(<I>interp, token, listObjPtr</I>)
<DD>int
<DD><B>Tcl_SetEnsembleUnknownHandler</B>(<I>interp, token, listObj</I>)
<DD>int
<DD><B>Tcl_GetEnsembleNamespace</B>(<I>interp, token, namespacePtrPtr</I>)
</DL>
<DD><A HREF="Ensemble.htm#M4" NAME="L262">ARGUMENTS</A>
<DL class="arguments">
</DL>
<DD><A HREF="Ensemble.htm#M5" NAME="L263">DESCRIPTION</A>
<DD><A HREF="Ensemble.htm#M6" NAME="L264">ENSEMBLE PROPERTIES</A>
<OL class="ensemble properties">
<DD><A HREF="Ensemble.htm#M7" NAME="L265"><B>flags</B> (read-write)</A>
<DD><A HREF="Ensemble.htm#M8" NAME="L266"><B>mapping dictionary</B> (read-write)</A>
<DD><A HREF="Ensemble.htm#M9" NAME="L267"><B>formal pre-subcommand parameter list</B> (read-write)</A>
<DD><A HREF="Ensemble.htm#M10" NAME="L268"><B>subcommand list</B> (read-write)</A>
<DD><A HREF="Ensemble.htm#M11" NAME="L269"><B>unknown subcommand handler command prefix</B> (read-write)</A>
<DD><A HREF="Ensemble.htm#M12" NAME="L270"><B>bound namespace</B> (read-only)</A>
</OL>
<DD><A HREF="Ensemble.htm#M13" NAME="L271">SEE ALSO</A>
<DD><A HREF="Ensemble.htm#M14" NAME="L272">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
Tcl_CreateEnsemble, Tcl_FindEnsemble, Tcl_GetEnsembleFlags, Tcl_GetEnsembleMappingDict, Tcl_GetEnsembleNamespace, Tcl_GetEnsembleParameterList, Tcl_GetEnsembleUnknownHandler, Tcl_GetEnsembleSubcommandList, Tcl_IsEnsemble, Tcl_SetEnsembleFlags, Tcl_SetEnsembleMappingDict, Tcl_SetEnsembleParameterList, Tcl_SetEnsembleSubcommandList, Tcl_SetEnsembleUnknownHandler &mdash; manipulate ensemble commands
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>#include &lt;tcl.h&gt;</B><BR>
<A HREF="../TclLib/CrtObjCmd.htm">Tcl_Command</A><BR>
<B>Tcl_CreateEnsemble</B>(<I>interp, name, namespacePtr, ensFlags</I>)<BR>
<A HREF="../TclLib/CrtObjCmd.htm">Tcl_Command</A><BR>
<B>Tcl_FindEnsemble</B>(<I>interp, cmdNameObj, flags</I>)<BR>
int<BR>
<B>Tcl_IsEnsemble</B>(<I>token</I>)<BR>
int<BR>
<B>Tcl_GetEnsembleFlags</B>(<I>interp, token, ensFlagsPtr</I>)<BR>
int<BR>
<B>Tcl_SetEnsembleFlags</B>(<I>interp, token, ensFlags</I>)<BR>
int<BR>
<B>Tcl_GetEnsembleMappingDict</B>(<I>interp, token, dictObjPtr</I>)<BR>
int<BR>
<B>Tcl_SetEnsembleMappingDict</B>(<I>interp, token, dictObj</I>)<BR>
int<BR>
<B>Tcl_GetEnsembleParameterList</B>(<I>interp, token, listObjPtr</I>)<BR>
int<BR>
<B>Tcl_SetEnsembleParameterList</B>(<I>interp, token, listObj</I>)<BR>
int<BR>
<B>Tcl_GetEnsembleSubcommandList</B>(<I>interp, token, listObjPtr</I>)<BR>
int<BR>
<B>Tcl_SetEnsembleSubcommandList</B>(<I>interp, token, listObj</I>)<BR>
int<BR>
<B>Tcl_GetEnsembleUnknownHandler</B>(<I>interp, token, listObjPtr</I>)<BR>
int<BR>
<B>Tcl_SetEnsembleUnknownHandler</B>(<I>interp, token, listObj</I>)<BR>
int<BR>
<B>Tcl_GetEnsembleNamespace</B>(<I>interp, token, namespacePtrPtr</I>)<BR>
<H3><A NAME="M4">ARGUMENTS</A></H3>
<DL class="arguments">
<DT><A HREF="../TclLib/Interp.htm">Tcl_Interp</A> <B>*interp</B> (in/out)<DD>
The interpreter in which the ensemble is to be created or found. Also
where error result messages are written. The functions whose names
start with <B>Tcl_GetEnsemble</B> may have a NULL for the <I>interp</I>,
but all other functions must not.
<P><DT>const char <B>*name</B> (in)<DD>
The name of the ensemble command to be created.
<P><DT><A HREF="../TclLib/Namespace.htm">Tcl_Namespace</A> <B>*namespacePtr</B> (in)<DD>
The namespace to which the ensemble command is to be bound, or NULL
for the current namespace.
<P><DT>int <B>ensFlags</B> (in)<DD>
An ORed set of flag bits describing the basic configuration of the
ensemble. Currently only one bit has meaning, <B>TCL_ENSEMBLE_PREFIX</B>,
which is present when the ensemble command should also match
unambiguous prefixes of subcommands.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*cmdNameObj</B> (in)<DD>
A value holding the name of the ensemble command to look up.
<P><DT>int <B>flags</B> (in)<DD>
An ORed set of flag bits controlling the behavior of
<B>Tcl_FindEnsemble</B>. Currently only <B>TCL_LEAVE_ERR_MSG</B> is supported.
<P><DT><A HREF="../TclLib/CrtObjCmd.htm">Tcl_Command</A> <B>token</B> (in)<DD>
A normal command token that refers to an ensemble command, or which
you wish to use for testing as an ensemble command in <B>Tcl_IsEnsemble</B>.
<P><DT>int <B>*ensFlagsPtr</B> (out)<DD>
Pointer to a variable into which to write the current ensemble flag
bits; currently only the bit <B>TCL_ENSEMBLE_PREFIX</B> is defined.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*dictObj</B> (in)<DD>
A dictionary value to use for the subcommand to implementation command
prefix mapping dictionary in the ensemble. May be NULL if the mapping
dictionary is to be removed.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>**dictObjPtr</B> (out)<DD>
Pointer to a variable into which to write the current ensemble mapping
dictionary.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*listObj</B> (in)<DD>
A list value to use for the list of formal pre-subcommand parameters, the
defined list of subcommands in the dictionary or the unknown subcommand
handler command prefix. May be NULL if the subcommand list or unknown handler
are to be removed.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>**listObjPtr</B> (out)<DD>
Pointer to a variable into which to write the current list of formal
pre-subcommand parameters, the defined list of subcommands or the current
unknown handler prefix.
<P><DT><A HREF="../TclLib/Namespace.htm">Tcl_Namespace</A> <B>**namespacePtrPtr</B> (out)<DD>
Pointer to a variable into which to write the handle of the namespace
to which the ensemble is bound.
<P></DL>
<H3><A NAME="M5">DESCRIPTION</A></H3>
An ensemble is a command, bound to some namespace, which consists of a
collection of subcommands implemented by other Tcl commands. The first
argument to the ensemble command is always interpreted as a selector
that states what subcommand to execute.
<P>
Ensembles are created using <B>Tcl_CreateEnsemble</B>, which takes four
arguments: the interpreter to work within, the name of the ensemble to
create, the namespace within the interpreter to bind the ensemble to,
and the default set of ensemble flags. The result of the function is
the command token for the ensemble, which may be used to further
configure the ensemble using the API described below in
<B><A HREF="#M6">ENSEMBLE PROPERTIES</A></B>.
<P>
Given the name of an ensemble command, the token for that command may
be retrieved using <B>Tcl_FindEnsemble</B>. If the given command name
(in <I>cmdNameObj</I>) does not refer to an ensemble command, the
result of the function is NULL and (if the <B>TCL_LEAVE_ERR_MSG</B> bit is
set in <I>flags</I>) an error message is left in the interpreter
result.
<P>
A command token may be checked to see if it refers to an ensemble
using <B>Tcl_IsEnsemble</B>. This returns 1 if the token refers to an
ensemble, or 0 otherwise.
<H4><A NAME="M6">ENSEMBLE PROPERTIES</A></H4>
Every ensemble has four read-write properties and a read-only
property. The properties are:
<P>
<OL class="ensemble properties">
<DT><A NAME="M7"><B>flags</B> (read-write)</A><DD>
The set of flags for the ensemble, expressed as a
bit-field. Currently, the only public flag is <B>TCL_ENSEMBLE_PREFIX</B>
which is set when unambiguous prefixes of subcommands are permitted to
be resolved to implementations as well as exact matches. The flags may
be read and written using <B>Tcl_GetEnsembleFlags</B> and
<B>Tcl_SetEnsembleFlags</B> respectively. The result of both of those
functions is a Tcl result code (<B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>, or <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> if
the token does not refer to an ensemble).
<P><DT><A NAME="M8"><B>mapping dictionary</B> (read-write)</A><DD>
A dictionary containing a mapping from subcommand names to lists of
words to use as a command prefix (replacing the first two words of the
command which are the ensemble command itself and the subcommand
name), or NULL if every subcommand is to be mapped to the command with
the same unqualified name in the ensemble's bound namespace. Defaults
to NULL. May be read and written using
<B>Tcl_GetEnsembleMappingDict</B> and <B>Tcl_SetEnsembleMappingDict</B>
respectively. The result of both of those functions is a Tcl result
code (<B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>, or <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> if the token does not refer to an
ensemble) and the dictionary obtained from
<B>Tcl_GetEnsembleMappingDict</B> should always be treated as immutable
even if it is unshared.
All command names in prefixes set via <B>Tcl_SetEnsembleMappingDict</B>
must be fully qualified.
<P><DT><A NAME="M9"><B>formal pre-subcommand parameter list</B> (read-write)</A><DD>
A list of formal parameter names (the names only being used when generating
error messages) that come at invocation of the ensemble between the name of
the ensemble and the subcommand argument. NULL (the default) is equivalent to
the empty list. May be read and written using
<B>Tcl_GetEnsembleParameterList</B> and <B>Tcl_SetEnsembleParameterList</B>
respectively. The result of both of those functions is a Tcl result code
(<B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>, or <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> if the token does not refer to an
ensemble) and the
dictionary obtained from <B>Tcl_GetEnsembleParameterList</B> should always be
treated as immutable even if it is unshared.
<P><DT><A NAME="M10"><B>subcommand list</B> (read-write)</A><DD>
A list of all the subcommand names for the ensemble, or NULL if this
is to be derived from either the keys of the mapping dictionary (see
above) or (if that is also NULL) from the set of commands exported by
the bound namespace. May be read and written using
<B>Tcl_GetEnsembleSubcommandList</B> and
<B>Tcl_SetEnsembleSubcommandList</B> respectively. The result of both
of those functions is a Tcl result code (<B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>, or
<B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> if the 
token does not refer to an ensemble) and the list obtained from
<B>Tcl_GetEnsembleSubcommandList</B> should always be treated as
immutable even if it is unshared.
<P><DT><A NAME="M11"><B>unknown subcommand handler command prefix</B> (read-write)</A><DD>
A list of words to prepend on the front of any subcommand when the
subcommand is unknown to the ensemble (according to the current prefix
handling rule); see the <B><A HREF="../TclCmd/namespace.htm">namespace ensemble</A></B> command for more
details. If NULL, the default behavior - generate a suitable error
message - will be used when an unknown subcommand is encountered. May
be read and written using <B>Tcl_GetEnsembleUnknownHandler</B> and
<B>Tcl_SetEnsembleUnknownHandler</B> respectively. The result of both
functions is a Tcl result code (<B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>, or <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> if
the token does
not refer to an ensemble) and the list obtained from
<B>Tcl_GetEnsembleUnknownHandler</B> should always be treated as
immutable even if it is unshared.
<P><DT><A NAME="M12"><B>bound namespace</B> (read-only)</A><DD>
The namespace to which the ensemble is bound; when the namespace is
deleted, so too will the ensemble, and this namespace is also the
namespace whose list of exported commands is used if both the mapping
dictionary and the subcommand list properties are NULL. May be read
using <B>Tcl_GetEnsembleNamespace</B> which returns a Tcl result code
(<B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>, or <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> if the token does not refer to an ensemble).
<P></OL>
<H3><A NAME="M13">SEE ALSO</A></H3>
<B><A HREF="../TclCmd/namespace.htm">namespace</A></B>, <B><A HREF="../TclLib/CrtObjCmd.htm">Tcl_DeleteCommandFromToken</A></B>
<H3><A NAME="M14">KEYWORDS</A></H3>
<A href="../Keywords/C.htm#command">command</A>, <A href="../Keywords/E.htm#ensemble">ensemble</A>
<div class="copy">Copyright &copy; 2005 Donal K. Fellows
</div>
</BODY></HTML>
