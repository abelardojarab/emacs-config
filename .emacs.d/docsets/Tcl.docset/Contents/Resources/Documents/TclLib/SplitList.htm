<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>Tcl_SplitList manual page - Tcl Library Procedures</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.6.0/Tk8.6.0 Documentation</a> <small>&gt;</small> <a href="contents.htm">Tcl C API, version 8.6.0</a> <small>&gt;</small> SplitList</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../ItclCmd/contents.htm">[incr Tcl] Package Commands</A> | <A HREF="../Sqlite3Cmd/contents.htm">SQLite Package Commands</A> | <A HREF="../TdbcCmd/contents.htm">TDBC Package Commands</A> | <A HREF="../TdbcmysqlCmd/contents.htm">tdbc::mysql Package Commands</A> | <A HREF="../TdbcodbcCmd/contents.htm">tdbc::odbc Package Commands</A> | <A HREF="../TdbcpostgresCmd/contents.htm">tdbc::postgres Package Commands</A> | <A HREF="../Tdbcsqlite3Cmd/contents.htm">tdbc::sqlite3 Package Commands</A> | <A HREF="../ThreadCmd/contents.htm">Thread Package Commands</A> | <A HREF="../TclLib/contents.htm">Tcl C API</A> | <A HREF="../TkLib/contents.htm">Tk C API</A> | <A HREF="../ItclLib/contents.htm">[incr Tcl] Package C API</A> | <A HREF="../TdbcLib/contents.htm">TDBC Package C API</A></H3>
<DL>
<DD><A HREF="SplitList.htm#M2" NAME="L741">NAME</A>
<DL><DD>Tcl_SplitList, Tcl_Merge, Tcl_ScanElement, Tcl_ConvertElement, Tcl_ScanCountedElement, Tcl_ConvertCountedElement &mdash; manipulate Tcl lists</DD></DL>
<DD><A HREF="SplitList.htm#M3" NAME="L742">SYNOPSIS</A>
<DL>
<DD><B>#include &lt;tcl.h&gt;</B>
<DD>int
<DD><B>Tcl_SplitList</B>(<I>interp, list, argcPtr, argvPtr</I>)
<DD>char *
<DD><B>Tcl_Merge</B>(<I>argc, argv</I>)
<DD>int
<DD><B>Tcl_ScanElement</B>(<I>src, flagsPtr</I>)
<DD>int
<DD><B>Tcl_ScanCountedElement</B>(<I>src, length, flagsPtr</I>)
<DD>int
<DD><B>Tcl_ConvertElement</B>(<I>src, dst, flags</I>)
<DD>int
<DD><B>Tcl_ConvertCountedElement</B>(<I>src, length, dst, flags</I>)
</DL>
<DD><A HREF="SplitList.htm#M4" NAME="L743">ARGUMENTS</A>
<DL class="arguments">
</DL>
<DD><A HREF="SplitList.htm#M5" NAME="L744">DESCRIPTION</A>
<DD><A HREF="SplitList.htm#M6" NAME="L745">SEE ALSO</A>
<DD><A HREF="SplitList.htm#M7" NAME="L746">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
Tcl_SplitList, Tcl_Merge, Tcl_ScanElement, Tcl_ConvertElement, Tcl_ScanCountedElement, Tcl_ConvertCountedElement &mdash; manipulate Tcl lists
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>#include &lt;tcl.h&gt;</B><BR>
int<BR>
<B>Tcl_SplitList</B>(<I>interp, list, argcPtr, argvPtr</I>)<BR>
char *<BR>
<B>Tcl_Merge</B>(<I>argc, argv</I>)<BR>
int<BR>
<B>Tcl_ScanElement</B>(<I>src, flagsPtr</I>)<BR>
int<BR>
<B>Tcl_ScanCountedElement</B>(<I>src, length, flagsPtr</I>)<BR>
int<BR>
<B>Tcl_ConvertElement</B>(<I>src, dst, flags</I>)<BR>
int<BR>
<B>Tcl_ConvertCountedElement</B>(<I>src, length, dst, flags</I>)<BR>
<H3><A NAME="M4">ARGUMENTS</A></H3>
<DL class="arguments">
<DT><A HREF="../TclLib/Interp.htm">Tcl_Interp</A> <B>*interp</B> (out)<DD>
Interpreter to use for error reporting.  If NULL, then no error message
is left.
<P><DT>char <B>*list</B> (in)<DD>
Pointer to a string with proper list structure.
<P><DT>int <B>*argcPtr</B> (out)<DD>
Filled in with number of elements in <I>list</I>.
<P><DT>const char <B>***argvPtr</B> (out)<DD>
<I>*argvPtr</I> will be filled in with the address of an array of
pointers to the strings that are the extracted elements of <I>list</I>.
There will be <I>*argcPtr</I> valid entries in the array, followed by
a NULL entry.
<P><DT>int <B><A HREF="../TclCmd/tclvars.htm">argc</A></B> (in)<DD>
Number of elements in <I>argv</I>.
<P><DT>const char *const <B>*argv</B> (in)<DD>
Array of strings to merge together into a single list.
Each string will become a separate element of the list.
<P><DT>const char <B>*src</B> (in)<DD>
String that is to become an element of a list.
<P><DT>int <B>*flagsPtr</B> (in)<DD>
Pointer to word to fill in with information about <I>src</I>.
The value of *<I>flagsPtr</I> must be passed to <B>Tcl_ConvertElement</B>.
<P><DT>int <B>length</B> (in)<DD>
Number of bytes in string <I>src</I>.
<P><DT>char <B>*dst</B> (in)<DD>
Place to copy converted list element.  Must contain enough characters
to hold converted string.
<P><DT>int <B>flags</B> (in)<DD>
Information about <I>src</I>. Must be value returned by previous
call to <B>Tcl_ScanElement</B>, possibly OR-ed
with <B>TCL_DONT_USE_BRACES</B>.
<P></DL>
<H3><A NAME="M5">DESCRIPTION</A></H3>
These procedures may be used to disassemble and reassemble Tcl lists.
<B>Tcl_SplitList</B> breaks a list up into its constituent elements,
returning an array of pointers to the elements using
<I>argcPtr</I> and <I>argvPtr</I>.
While extracting the arguments, <B>Tcl_SplitList</B> obeys the usual
rules for backslash substitutions and braces.  The area of
memory pointed to by <I>*argvPtr</I> is dynamically allocated;  in
addition to the array of pointers, it
also holds copies of all the list elements.  It is the caller's
responsibility to free up all of this storage.
For example, suppose that you have called <B>Tcl_SplitList</B> with
the following code:
<P>
<PRE>int argc, code;
char *string;
char **argv;
	...
code = <B>Tcl_SplitList</B>(interp, string, &amp;argc, &amp;argv);</PRE>
<P>
Then you should eventually free the storage with a call like the
following:
<P>
<PRE><A HREF="../TclLib/Alloc.htm">Tcl_Free</A>((char *) argv);</PRE>
<P>
<B>Tcl_SplitList</B> normally returns <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>, which means the list was
successfully parsed.
If there was a syntax error in <I>list</I>, then <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> is returned
and the interpreter's result will point to an error message describing the
problem (if <I>interp</I> was not NULL).
If <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> is returned then no memory is allocated and <I>*argvPtr</I>
is not modified.
<P>
<B>Tcl_Merge</B> is the inverse of <B>Tcl_SplitList</B>:  it
takes a collection of strings given by <I>argc</I>
and <I>argv</I> and generates a result string
that has proper list structure.
This means that commands like <B>index</B> may be used to
extract the original elements again.
In addition, if the result of <B>Tcl_Merge</B> is passed to <B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B>,
it will be parsed into <I>argc</I> words whose values will
be the same as the <I>argv</I> strings passed to <B>Tcl_Merge</B>.
<B>Tcl_Merge</B> will modify the list elements with braces and/or
backslashes in order to produce proper Tcl list structure.
The result string is dynamically allocated
using <B><A HREF="../TclLib/Alloc.htm">Tcl_Alloc</A></B>;  the caller must eventually release the space
using <B><A HREF="../TclLib/Alloc.htm">Tcl_Free</A></B>.
<P>
If the result of <B>Tcl_Merge</B> is passed to <B>Tcl_SplitList</B>,
the elements returned by <B>Tcl_SplitList</B> will be identical to
those passed into <B>Tcl_Merge</B>.
However, the converse is not true:  if <B>Tcl_SplitList</B>
is passed a given string, and the resulting <I>argc</I> and
<I>argv</I> are passed to <B>Tcl_Merge</B>, the resulting string
may not be the same as the original string passed to <B>Tcl_SplitList</B>.
This is because <B>Tcl_Merge</B> may use backslashes and braces
differently than the original string.
<P>
<B>Tcl_ScanElement</B> and <B>Tcl_ConvertElement</B> are the
procedures that do all of the real work of <B>Tcl_Merge</B>.
<B>Tcl_ScanElement</B> scans its <I>src</I> argument
and determines how to use backslashes and braces
when converting it to a list element.
It returns an overestimate of the number of characters
required to represent <I>src</I> as a list element, and
it stores information in <I>*flagsPtr</I> that is needed
by <B>Tcl_ConvertElement</B>.
<P>
<B>Tcl_ConvertElement</B> is a companion procedure to <B>Tcl_ScanElement</B>.
It does the actual work of converting a string to a list element.
Its <I>flags</I> argument must be the same as the value returned
by <B>Tcl_ScanElement</B>.
<B>Tcl_ConvertElement</B> writes a proper list element to memory
starting at *<I>dst</I> and returns a count of the total number
of characters written, which will be no more than the result
returned by <B>Tcl_ScanElement</B>.
<B>Tcl_ConvertElement</B> writes out only the actual list element
without any leading or trailing spaces: it is up to the caller to
include spaces between adjacent list elements.
<P>
<B>Tcl_ConvertElement</B> uses one of two different approaches to
handle the special characters in <I>src</I>.  Wherever possible, it
handles special characters by surrounding the string with braces.
This produces clean-looking output, but cannot be used in some situations,
such as when <I>src</I> contains unmatched braces.
In these situations, <B>Tcl_ConvertElement</B> handles special
characters by generating backslash sequences for them.
The caller may insist on the second approach by OR-ing the
flag value returned by <B>Tcl_ScanElement</B> with
<B>TCL_DONT_USE_BRACES</B>.
Although this will produce an uglier result, it is useful in some
special situations, such as when <B>Tcl_ConvertElement</B> is being
used to generate a portion of an argument for a Tcl command.
In this case, surrounding <I>src</I> with curly braces would cause
the command not to be parsed correctly.
<P>
By default, <B>Tcl_ConvertElement</B> will use quoting in its output
to be sure the first character of an element is not the hash
character
(&#8220;#&#8221;.)
This is to be sure the first element of any list
passed to <B><A HREF="../TclCmd/eval.htm">eval</A></B> is not mis-parsed as the beginning of a comment.
When a list element is not the first element of a list, this quoting
is not necessary.  When the caller can be sure that the element is
not the first element of a list, it can disable quoting of the leading
hash character by OR-ing the flag value returned by <B>Tcl_ScanElement</B>
with <B>TCL_DONT_QUOTE_HASH</B>.
<P>
<B>Tcl_ScanCountedElement</B> and <B>Tcl_ConvertCountedElement</B> are
the same as <B>Tcl_ScanElement</B> and <B>Tcl_ConvertElement</B>, except
the length of string <I>src</I> is specified by the <I>length</I>
argument, and the string may contain embedded nulls.
<H3><A NAME="M6">SEE ALSO</A></H3>
<B><A HREF="../TclLib/ListObj.htm">Tcl_ListObjGetElements</A></B>
<H3><A NAME="M7">KEYWORDS</A></H3>
<A href="../Keywords/B.htm#backslash">backslash</A>, <A href="../Keywords/C.htm#convert">convert</A>, <A href="../Keywords/E.htm#element">element</A>, <A href="../Keywords/L.htm#list">list</A>, <A href="../Keywords/M.htm#merge">merge</A>, <A href="../Keywords/S.htm#split">split</A>, <A href="../Keywords/S.htm#strings">strings</A>
<div class="copy">Copyright &copy; 1989-1993 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc.
</div>
</BODY></HTML>
