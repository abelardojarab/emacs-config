<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>Tcl_ListObj manual page - Tcl Library Procedures</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.6.0/Tk8.6.0 Documentation</a> <small>&gt;</small> <a href="contents.htm">Tcl C API, version 8.6.0</a> <small>&gt;</small> ListObj</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../ItclCmd/contents.htm">[incr Tcl] Package Commands</A> | <A HREF="../Sqlite3Cmd/contents.htm">SQLite Package Commands</A> | <A HREF="../TdbcCmd/contents.htm">TDBC Package Commands</A> | <A HREF="../TdbcmysqlCmd/contents.htm">tdbc::mysql Package Commands</A> | <A HREF="../TdbcodbcCmd/contents.htm">tdbc::odbc Package Commands</A> | <A HREF="../TdbcpostgresCmd/contents.htm">tdbc::postgres Package Commands</A> | <A HREF="../Tdbcsqlite3Cmd/contents.htm">tdbc::sqlite3 Package Commands</A> | <A HREF="../ThreadCmd/contents.htm">Thread Package Commands</A> | <A HREF="../TclLib/contents.htm">Tcl C API</A> | <A HREF="../TkLib/contents.htm">Tk C API</A> | <A HREF="../ItclLib/contents.htm">[incr Tcl] Package C API</A> | <A HREF="../TdbcLib/contents.htm">TDBC Package C API</A></H3>
<DL>
<DD><A HREF="ListObj.htm#M2" NAME="L464">NAME</A>
<DL><DD>Tcl_ListObjAppendList, Tcl_ListObjAppendElement, Tcl_NewListObj, Tcl_SetListObj, Tcl_ListObjGetElements, Tcl_ListObjLength, Tcl_ListObjIndex, Tcl_ListObjReplace &mdash; manipulate Tcl values as lists</DD></DL>
<DD><A HREF="ListObj.htm#M3" NAME="L465">SYNOPSIS</A>
<DL>
<DD><B>#include &lt;tcl.h&gt;</B>
<DD>int
<DD><B>Tcl_ListObjAppendList</B>(<I>interp, listPtr, elemListPtr</I>)
<DD>int
<DD><B>Tcl_ListObjAppendElement</B>(<I>interp, listPtr, objPtr</I>)
<DD>Tcl_Obj *
<DD><B>Tcl_NewListObj</B>(<I>objc, objv</I>)
<DD><B>Tcl_SetListObj</B>(<I>objPtr, objc, objv</I>)
<DD>int
<DD><B>Tcl_ListObjGetElements</B>(<I>interp, listPtr, objcPtr, objvPtr</I>)
<DD>int
<DD><B>Tcl_ListObjLength</B>(<I>interp, listPtr, intPtr</I>)
<DD>int
<DD><B>Tcl_ListObjIndex</B>(<I>interp, listPtr, index, objPtrPtr</I>)
<DD>int
<DD><B>Tcl_ListObjReplace</B>(<I>interp, listPtr, first, count, objc, objv</I>)
</DL>
<DD><A HREF="ListObj.htm#M4" NAME="L466">ARGUMENTS</A>
<DL class="arguments">
</DL>
<DD><A HREF="ListObj.htm#M5" NAME="L467">DESCRIPTION</A>
<DD><A HREF="ListObj.htm#M6" NAME="L468">SEE ALSO</A>
<DD><A HREF="ListObj.htm#M7" NAME="L469">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
Tcl_ListObjAppendList, Tcl_ListObjAppendElement, Tcl_NewListObj, Tcl_SetListObj, Tcl_ListObjGetElements, Tcl_ListObjLength, Tcl_ListObjIndex, Tcl_ListObjReplace &mdash; manipulate Tcl values as lists
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>#include &lt;tcl.h&gt;</B><BR>
int<BR>
<B>Tcl_ListObjAppendList</B>(<I>interp, listPtr, elemListPtr</I>)<BR>
int<BR>
<B>Tcl_ListObjAppendElement</B>(<I>interp, listPtr, objPtr</I>)<BR>
<A HREF="../TclLib/Object.htm">Tcl_Obj</A> *<BR>
<B>Tcl_NewListObj</B>(<I>objc, objv</I>)<BR>
<B>Tcl_SetListObj</B>(<I>objPtr, objc, objv</I>)<BR>
int<BR>
<B>Tcl_ListObjGetElements</B>(<I>interp, listPtr, objcPtr, objvPtr</I>)<BR>
int<BR>
<B>Tcl_ListObjLength</B>(<I>interp, listPtr, intPtr</I>)<BR>
int<BR>
<B>Tcl_ListObjIndex</B>(<I>interp, listPtr, index, objPtrPtr</I>)<BR>
int<BR>
<B>Tcl_ListObjReplace</B>(<I>interp, listPtr, first, count, objc, objv</I>)<BR>
<H3><A NAME="M4">ARGUMENTS</A></H3>
<DL class="arguments">
<DT><A HREF="../TclLib/Interp.htm">Tcl_Interp</A> <B>*interp</B> (in)<DD>
If an error occurs while converting a value to be a list value,
an error message is left in the interpreter's result value
unless <I>interp</I> is NULL.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*listPtr</B> (in/out)<DD>
Points to the list value to be manipulated.
If <I>listPtr</I> does not already point to a list value,
an attempt will be made to convert it to one.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*elemListPtr</B> (in/out)<DD>
For <B>Tcl_ListObjAppendList</B>, this points to a list value
containing elements to be appended onto <I>listPtr</I>.
Each element of *<I>elemListPtr</I> will
become a new element of <I>listPtr</I>.
If *<I>elemListPtr</I> is not NULL and
does not already point to a list value,
an attempt will be made to convert it to one.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*objPtr</B> (in)<DD>
For <B>Tcl_ListObjAppendElement</B>,
points to the Tcl value that will be appended to <I>listPtr</I>.
For <B>Tcl_SetListObj</B>,
this points to the Tcl value that will be converted to a list value
containing the <I>objc</I> elements of the array referenced by <I>objv</I>.
<P><DT>int <B>*objcPtr</B> (in)<DD>
Points to location where <B>Tcl_ListObjGetElements</B>
stores the number of element values in <I>listPtr</I>.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>***objvPtr</B> (out)<DD>
A location where <B>Tcl_ListObjGetElements</B> stores a pointer to an array
of pointers to the element values of <I>listPtr</I>.  
<P><DT>int <B>objc</B> (in)<DD>
The number of Tcl values that <B>Tcl_NewListObj</B>
will insert into a new list value,
and <B>Tcl_ListObjReplace</B> will insert into <I>listPtr</I>.
For <B>Tcl_SetListObj</B>,
the number of Tcl values to insert into <I>objPtr</I>.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> *const <B>objv[]</B> (in)<DD>
An array of pointers to values.
<B>Tcl_NewListObj</B> will insert these values into a new list value
and <B>Tcl_ListObjReplace</B> will insert them into an existing <I>listPtr</I>.
Each value will become a separate list element.  
<P><DT>int <B>*intPtr</B> (out)<DD>
Points to location where <B>Tcl_ListObjLength</B>
stores the length of the list.
<P><DT>int <B>index</B> (in)<DD>
Index of the list element that <B>Tcl_ListObjIndex</B>
is to return.
The first element has index 0.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>**objPtrPtr</B> (out)<DD>
Points to place where <B>Tcl_ListObjIndex</B> is to store
a pointer to the resulting list element value.
<P><DT>int <B>first</B> (in)<DD>
Index of the starting list element that <B>Tcl_ListObjReplace</B>
is to replace.
The list's first element has index 0.
<P><DT>int <B>count</B> (in)<DD>
The number of elements that <B>Tcl_ListObjReplace</B>
is to replace.
<P></DL>
<H3><A NAME="M5">DESCRIPTION</A></H3>
Tcl list values have an internal representation that supports
the efficient indexing and appending.
The procedures described in this man page are used to
create, modify, index, and append to Tcl list values from C code.
<P>
<B>Tcl_ListObjAppendList</B> and <B>Tcl_ListObjAppendElement</B>
both add one or more values
to the end of the list value referenced by <I>listPtr</I>.
<B>Tcl_ListObjAppendList</B> appends each element of the list value
referenced by <I>elemListPtr</I> while
<B>Tcl_ListObjAppendElement</B> appends the single value
referenced by <I>objPtr</I>.
Both procedures will convert the value referenced by <I>listPtr</I>
to a list value if necessary.
If an error occurs during conversion,
both procedures return <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> and leave an error message
in the interpreter's result value if <I>interp</I> is not NULL.
Similarly, if <I>elemListPtr</I> does not already refer to a list value,
<B>Tcl_ListObjAppendList</B> will attempt to convert it to one
and if an error occurs during conversion,
will return <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B>
and leave an error message in the interpreter's result value
if interp is not NULL.
Both procedures invalidate any old string representation of <I>listPtr</I>
and, if it was converted to a list value,
free any old internal representation.
Similarly, <B>Tcl_ListObjAppendList</B> frees any old internal representation
of <I>elemListPtr</I> if it converts it to a list value.
After appending each element in <I>elemListPtr</I>,
<B>Tcl_ListObjAppendList</B> increments the element's reference count
since <I>listPtr</I> now also refers to it.
For the same reason, <B>Tcl_ListObjAppendElement</B>
increments <I>objPtr</I>'s reference count.
If no error occurs,
the two procedures return <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B> after appending the values.
<P>
<B>Tcl_NewListObj</B> and <B>Tcl_SetListObj</B>
create a new value or modify an existing value to hold 
the <I>objc</I> elements of the array referenced by <I>objv</I>
where each element is a pointer to a Tcl value.
If <I>objc</I> is less than or equal to zero,
they return an empty value.
The new value's string representation is left invalid.
The two procedures increment the reference counts
of the elements in <I>objc</I> since the list value now refers to them.
The new list value returned by <B>Tcl_NewListObj</B>
has reference count zero.
<P>
<B>Tcl_ListObjGetElements</B> returns a count and a pointer to an array of
the elements in a list value.  It returns the count by storing it in the
address <I>objcPtr</I>.  Similarly, it returns the array pointer by storing
it in the address <I>objvPtr</I>.
The memory pointed to is managed by Tcl and should not be freed or written
to by the caller. If the list is empty, 0 is stored at <I>objcPtr</I>
and NULL at <I>objvPtr</I>.
If <I>listPtr</I> is not already a list value, <B>Tcl_ListObjGetElements</B>
will attempt to convert it to one; if the conversion fails, it returns
<B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> and leaves an error message in the interpreter's result
value if <I>interp</I> is not NULL.
Otherwise it returns <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B> after storing the count and array pointer.
<P>
<B>Tcl_ListObjLength</B> returns the number of elements in the list value
referenced by <I>listPtr</I>.
It returns this count by storing an integer in the address <I>intPtr</I>.
If the value is not already a list value,
<B>Tcl_ListObjLength</B> will attempt to convert it to one;
if the conversion fails, it returns <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B>
and leaves an error message in the interpreter's result value
if <I>interp</I> is not NULL.
Otherwise it returns <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B> after storing the list's length.
<P>
The procedure <B>Tcl_ListObjIndex</B> returns a pointer to the value
at element <I>index</I> in the list referenced by <I>listPtr</I>.
It returns this value by storing a pointer to it
in the address <I>objPtrPtr</I>.
If <I>listPtr</I> does not already refer to a list value,
<B>Tcl_ListObjIndex</B> will attempt to convert it to one;
if the conversion fails, it returns <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B>
and leaves an error message in the interpreter's result value
if <I>interp</I> is not NULL.
If the index is out of range,
that is, <I>index</I> is negative or
greater than or equal to the number of elements in the list,
<B>Tcl_ListObjIndex</B> stores a NULL in <I>objPtrPtr</I>
and returns <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B>.
Otherwise it returns <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B> after storing the element's
value pointer.
The reference count for the list element is not incremented;
the caller must do that if it needs to retain a pointer to the element.
<P>
<B>Tcl_ListObjReplace</B> replaces zero or more elements
of the list referenced by <I>listPtr</I>
with the <I>objc</I> values in the array referenced by <I>objv</I>.
If <I>listPtr</I> does not point to a list value,
<B>Tcl_ListObjReplace</B> will attempt to convert it to one;
if the conversion fails, it returns <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B>
and leaves an error message in the interpreter's result value
if <I>interp</I> is not NULL.
Otherwise, it returns <B><A HREF="../TclCmd/catch.htm">TCL_OK</A></B> after replacing the values.
If <I>objv</I> is NULL, no new elements are added.
If the argument <I>first</I> is zero or negative,
it refers to the first element.
If <I>first</I> is greater than or equal to the
number of elements in the list, then no elements are deleted;
the new elements are appended to the list.
<I>count</I> gives the number of elements to replace.
If <I>count</I> is zero or negative then no elements are deleted;
the new elements are simply inserted before the one
designated by <I>first</I>.
<B>Tcl_ListObjReplace</B> invalidates <I>listPtr</I>'s
old string representation.
The reference counts of any elements inserted from <I>objv</I>
are incremented since the resulting list now refers to them.
Similarly, the reference counts for any replaced values are decremented.
<P>
Because <B>Tcl_ListObjReplace</B> combines
both element insertion and deletion,
it can be used to implement a number of list operations.
For example, the following code inserts the <I>objc</I> values
referenced by the array of value pointers <I>objv</I>
just before the element <I>index</I> of the list referenced by <I>listPtr</I>:
<P>
<PRE>result = <B>Tcl_ListObjReplace</B>(interp, listPtr, index, 0,
        objc, objv);</PRE>
<P>
Similarly, the following code appends the <I>objc</I> values
referenced by the array <I>objv</I>
to the end of the list <I>listPtr</I>:
<P>
<PRE>result = <B>Tcl_ListObjLength</B>(interp, listPtr, &amp;length);
if (result == TCL_OK) {
    result = <B>Tcl_ListObjReplace</B>(interp, listPtr, length, 0,
            objc, objv);
}</PRE>
<P>
The <I>count</I> list elements starting at <I>first</I> can be deleted
by simply calling <B>Tcl_ListObjReplace</B>
with a NULL <I>objvPtr</I>:
<P>
<PRE>result = <B>Tcl_ListObjReplace</B>(interp, listPtr, first, count,
        0, NULL);</PRE>
<H3><A NAME="M6">SEE ALSO</A></H3>
<B><A HREF="../TclLib/Object.htm">Tcl_NewObj</A></B>, <B><A HREF="../TclLib/Object.htm">Tcl_DecrRefCount</A></B>, <B><A HREF="../TclLib/Object.htm">Tcl_IncrRefCount</A></B>, <B><A HREF="../TclLib/SetResult.htm">Tcl_GetObjResult</A></B>
<H3><A NAME="M7">KEYWORDS</A></H3>
<A href="../Keywords/A.htm#append">append</A>, <A href="../Keywords/I.htm#index">index</A>, <A href="../Keywords/I.htm#insert">insert</A>, <A href="../Keywords/I.htm#internal representation">internal representation</A>, <A href="../Keywords/L.htm#length">length</A>, <A href="../Keywords/L.htm#list">list</A>, <A href="../Keywords/L.htm#list value">list value</A>, <A href="../Keywords/L.htm#list type">list type</A>, <A href="../Keywords/V.htm#value">value</A>, <A href="../Keywords/V.htm#value type">value type</A>, <A href="../Keywords/R.htm#replace">replace</A>, <A href="../Keywords/S.htm#string representation">string representation</A>
<div class="copy">Copyright &copy; 1996-1997 Sun Microsystems, Inc.
</div>
</BODY></HTML>
