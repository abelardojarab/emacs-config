<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>Tcl_Interp manual page - Tcl Library Procedures</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.6.0/Tk8.6.0 Documentation</a> <small>&gt;</small> <a href="contents.htm">Tcl C API, version 8.6.0</a> <small>&gt;</small> Interp</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../ItclCmd/contents.htm">[incr Tcl] Package Commands</A> | <A HREF="../Sqlite3Cmd/contents.htm">SQLite Package Commands</A> | <A HREF="../TdbcCmd/contents.htm">TDBC Package Commands</A> | <A HREF="../TdbcmysqlCmd/contents.htm">tdbc::mysql Package Commands</A> | <A HREF="../TdbcodbcCmd/contents.htm">tdbc::odbc Package Commands</A> | <A HREF="../TdbcpostgresCmd/contents.htm">tdbc::postgres Package Commands</A> | <A HREF="../Tdbcsqlite3Cmd/contents.htm">tdbc::sqlite3 Package Commands</A> | <A HREF="../ThreadCmd/contents.htm">Thread Package Commands</A> | <A HREF="../TclLib/contents.htm">Tcl C API</A> | <A HREF="../TkLib/contents.htm">Tk C API</A> | <A HREF="../ItclLib/contents.htm">[incr Tcl] Package C API</A> | <A HREF="../TdbcLib/contents.htm">TDBC Package C API</A></H3>
<DL>
<DD><A HREF="Interp.htm#M2" NAME="L426">NAME</A>
<DL><DD>Tcl_Interp &mdash; client-visible fields of interpreter structures</DD></DL>
<DD><A HREF="Interp.htm#M3" NAME="L427">SYNOPSIS</A>
<DL>
<DD><B>#include &lt;tcl.h&gt;</B>
<DD>typedef struct {
<DD>char *<I>result</I>;
<DD>Tcl_FreeProc *<I>freeProc</I>;
<DD>int <I>errorLine</I>;
<DD>} <B>Tcl_Interp</B>;
<DD>
<DD>typedef void <B>Tcl_FreeProc</B>(
<DD>char *<I>blockPtr</I>);
</DL>
<DD><A HREF="Interp.htm#M4" NAME="L428">DESCRIPTION</A>
<DD><A HREF="Interp.htm#M5" NAME="L429">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
Tcl_Interp &mdash; client-visible fields of interpreter structures
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>#include &lt;tcl.h&gt;</B><BR>
typedef struct {<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;</TT>char *<I>result</I>;<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;</TT>Tcl_FreeProc *<I>freeProc</I>;<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;</TT>int <I>errorLine</I>;<BR>
} <B>Tcl_Interp</B>;<BR>
<BR>
typedef void <B>Tcl_FreeProc</B>(<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TT>char *<I>blockPtr</I>);<BR>
<H3><A NAME="M4">DESCRIPTION</A></H3>
The <B><A HREF="../TclLib/CrtInterp.htm">Tcl_CreateInterp</A></B> procedure returns a pointer to a Tcl_Interp
structure.  Callers of <B><A HREF="../TclLib/CrtInterp.htm">Tcl_CreateInterp</A></B> should use this pointer
as an opaque token, suitable for nothing other than passing back to
other routines in the Tcl interface.  Accessing fields directly through
the pointer as described below is no longer supported.  The supported
public routines <B><A HREF="../TclLib/SetResult.htm">Tcl_SetResult</A></B>, <B>Tcl_GetResult</B>,
<B><A HREF="../TclLib/AddErrInfo.htm">Tcl_SetErrorLine</A></B>, <B><A HREF="../TclLib/AddErrInfo.htm">Tcl_GetErrorLine</A></B> must be used instead.
<P>
For legacy programs and extensions no longer being maintained, compiles
against the Tcl 8.6 header files are only possible with the compiler
directives
<PRE>#define USE_INTERP_RESULT</PRE>
and/or
<PRE>#define USE_INTERP_ERRORLINE</PRE>
depending on which fields of the <B>Tcl_Interp</B> struct are accessed.
These directives may be embedded in code or supplied via compiler options.
<P>
The <I>result</I> and <I>freeProc</I> fields are used to return
results or error messages from commands.
This information is returned by command procedures back to <B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B>,
and by <B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B> back to its callers.
The <I>result</I> field points to the string that represents the
result or error message, and the <I>freeProc</I> field tells how
to dispose of the storage for the string when it is not needed anymore.
The easiest way for command procedures to manipulate these
fields is to call procedures like <B><A HREF="../TclLib/SetResult.htm">Tcl_SetResult</A></B>
or <B><A HREF="../TclLib/SetResult.htm">Tcl_AppendResult</A></B>;  they
will hide all the details of managing the fields.
The description below is for those procedures that manipulate the
fields directly.
<P>
Whenever a command procedure returns, it must ensure
that the <I>result</I> field of its interpreter points to the string
being returned by the command.
The <I>result</I> field must always point to a valid string.
If a command wishes to return no result then <I>interp-&gt;result</I>
should point to an empty string.
Normally, results are assumed to be statically allocated,
which means that the contents will not change before the next time
<B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B> is called or some other command procedure is invoked.
In this case, the <I>freeProc</I> field must be zero.
Alternatively, a command procedure may dynamically
allocate its return value (e.g. using <B><A HREF="../TclLib/Alloc.htm">Tcl_Alloc</A></B>)
and store a pointer to it in <I>interp-&gt;result</I>.
In this case, the command procedure must also set <I>interp-&gt;freeProc</I>
to the address of a procedure that can free the value, or <B>TCL_DYNAMIC</B>
if the storage was allocated directly by Tcl or by a call to
<B><A HREF="../TclLib/Alloc.htm">Tcl_Alloc</A></B>. 
If <I>interp-&gt;freeProc</I> is non-zero, then Tcl will call <I>freeProc</I>
to free the space pointed to by <I>interp-&gt;result</I> before it
invokes the next command.
If a client procedure overwrites <I>interp-&gt;result</I> when
<I>interp-&gt;freeProc</I> is non-zero, then it is responsible for calling
<I>freeProc</I> to free the old <I>interp-&gt;result</I> (the <B><A HREF="../TclLib/SetResult.htm">Tcl_FreeResult</A></B>
macro should be used for this purpose).
<P>
<I>FreeProc</I> should have arguments and result that match the
<B>Tcl_FreeProc</B> declaration above:  it receives a single
argument which is a pointer to the result value to free.
In most applications <B>TCL_DYNAMIC</B> is the only non-zero value ever
used for <I>freeProc</I>.
However, an application may store a different procedure address
in <I>freeProc</I> in order to use an alternate memory allocator
or in order to do other cleanup when the result memory is freed.
<P>
As part of processing each command, <B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B> initializes
<I>interp-&gt;result</I>
and <I>interp-&gt;freeProc</I> just before calling the command procedure for
the command.  The <I>freeProc</I> field will be initialized to zero,
and <I>interp-&gt;result</I> will point to an empty string.  Commands that
do not return any value can simply leave the fields alone.
Furthermore, the empty string pointed to by <I>result</I> is actually
part of an array of <B>TCL_RESULT_SIZE</B> characters (approximately 200).
If a command wishes to return a short string, it can simply copy
it to the area pointed to by <I>interp-&gt;result</I>.  Or, it can use
the sprintf procedure to generate a short result string at the location
pointed to by <I>interp-&gt;result</I>.
<P>
It is a general convention in Tcl-based applications that the result
of an interpreter is normally in the initialized state described
in the previous paragraph.
Procedures that manipulate an interpreter's result (e.g. by
returning an error) will generally assume that the result
has been initialized when the procedure is called.
If such a procedure is to be called after the result has been
changed, then <B><A HREF="../TclLib/SetResult.htm">Tcl_ResetResult</A></B> should be called first to
reset the result to its initialized state.  The direct use of
<I>interp-&gt;result</I> is strongly deprecated (see <B><A HREF="../TclLib/SetResult.htm">Tcl_SetResult</A></B>).
<P>
The <I>errorLine</I>
field is valid only after <B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B> returns
a <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> return code.  In this situation the <I>errorLine</I>
field identifies the line number of the command being executed when
the error occurred.  The line numbers are relative to the command
being executed:  1 means the first line of the command passed to
<B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B>, 2 means the second line, and so on.
The <I>errorLine</I> field is typically used in conjunction with
<B><A HREF="../TclLib/AddErrInfo.htm">Tcl_AddErrorInfo</A></B> to report information about where an error
occurred.
<I>ErrorLine</I> should not normally be modified except by <B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B>.

<H3><A NAME="M5">KEYWORDS</A></H3>
<A href="../Keywords/F.htm#free">free</A>, <A href="../Keywords/I.htm#initialized">initialized</A>, <A href="../Keywords/I.htm#interpreter">interpreter</A>, <A href="../Keywords/M.htm#malloc">malloc</A>, <A href="../Keywords/R.htm#result">result</A>
<div class="copy">Copyright &copy; 1989-1993 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc.
</div>
</BODY></HTML>
