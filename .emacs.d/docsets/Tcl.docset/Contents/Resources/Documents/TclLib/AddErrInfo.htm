<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>Tcl_AddErrorInfo manual page - Tcl Library Procedures</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.6.0/Tk8.6.0 Documentation</a> <small>&gt;</small> <a href="contents.htm">Tcl C API, version 8.6.0</a> <small>&gt;</small> AddErrInfo</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../ItclCmd/contents.htm">[incr Tcl] Package Commands</A> | <A HREF="../Sqlite3Cmd/contents.htm">SQLite Package Commands</A> | <A HREF="../TdbcCmd/contents.htm">TDBC Package Commands</A> | <A HREF="../TdbcmysqlCmd/contents.htm">tdbc::mysql Package Commands</A> | <A HREF="../TdbcodbcCmd/contents.htm">tdbc::odbc Package Commands</A> | <A HREF="../TdbcpostgresCmd/contents.htm">tdbc::postgres Package Commands</A> | <A HREF="../Tdbcsqlite3Cmd/contents.htm">tdbc::sqlite3 Package Commands</A> | <A HREF="../ThreadCmd/contents.htm">Thread Package Commands</A> | <A HREF="../TclLib/contents.htm">Tcl C API</A> | <A HREF="../TkLib/contents.htm">Tk C API</A> | <A HREF="../ItclLib/contents.htm">[incr Tcl] Package C API</A> | <A HREF="../TdbcLib/contents.htm">TDBC Package C API</A></H3>
<DL>
<DD><A HREF="AddErrInfo.htm#M2" NAME="L9">NAME</A>
<DL><DD>Tcl_GetReturnOptions, Tcl_SetReturnOptions, Tcl_AddErrorInfo, Tcl_AppendObjToErrorInfo, Tcl_AddObjErrorInfo, Tcl_SetObjErrorCode, Tcl_SetErrorCode, Tcl_SetErrorCodeVA, Tcl_SetErrorLine, Tcl_GetErrorLine, Tcl_PosixError, Tcl_LogCommandInfo &mdash; retrieve or record information about errors and other return options</DD></DL>
<DD><A HREF="AddErrInfo.htm#M3" NAME="L10">SYNOPSIS</A>
<DL>
<DD><B>#include &lt;tcl.h&gt;</B>
<DD>Tcl_Obj *
<DD><B>Tcl_GetReturnOptions</B>(<I>interp, code</I>)
<DD>int 
<DD><B>Tcl_SetReturnOptions</B>(<I>interp, options</I>)
<DD><B>Tcl_AddErrorInfo</B>(<I>interp, message</I>)
<DD><B>Tcl_AppendObjToErrorInfo</B>(<I>interp, objPtr</I>)
<DD><B>Tcl_AddObjErrorInfo</B>(<I>interp, message, length</I>)
<DD><B>Tcl_SetObjErrorCode</B>(<I>interp, errorObjPtr</I>)
<DD><B>Tcl_SetErrorCode</B>(<I>interp, element, element, ... </I><B>(char *) NULL</B>)
<DD><B>Tcl_SetErrorCodeVA</B>(<I>interp, argList</I>)
<DD><B>Tcl_GetErrorLine</B>(<I>interp</I>)
<DD><B>Tcl_SetErrorLine</B>(<I>interp, lineNum</I>)
<DD>const char *
<DD><B>Tcl_PosixError</B>(<I>interp</I>)
<DD>void
<DD><B>Tcl_LogCommandInfo</B>(<I>interp, script, command, commandLength</I>)
</DL>
<DD><A HREF="AddErrInfo.htm#M4" NAME="L11">ARGUMENTS</A>
<DL class="arguments">
</DL>
<DD><A HREF="AddErrInfo.htm#M5" NAME="L12">DESCRIPTION</A>
<DD><A HREF="AddErrInfo.htm#M6" NAME="L13">SEE ALSO</A>
<DD><A HREF="AddErrInfo.htm#M7" NAME="L14">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
Tcl_GetReturnOptions, Tcl_SetReturnOptions, Tcl_AddErrorInfo, Tcl_AppendObjToErrorInfo, Tcl_AddObjErrorInfo, Tcl_SetObjErrorCode, Tcl_SetErrorCode, Tcl_SetErrorCodeVA, Tcl_SetErrorLine, Tcl_GetErrorLine, Tcl_PosixError, Tcl_LogCommandInfo &mdash; retrieve or record information about errors and other return options
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>#include &lt;tcl.h&gt;</B><BR>
<A HREF="../TclLib/Object.htm">Tcl_Obj</A> *<BR>
<B>Tcl_GetReturnOptions</B>(<I>interp, code</I>)<BR>
int <BR>
<B>Tcl_SetReturnOptions</B>(<I>interp, options</I>)<BR>
<B>Tcl_AddErrorInfo</B>(<I>interp, message</I>)<BR>
<B>Tcl_AppendObjToErrorInfo</B>(<I>interp, objPtr</I>)<BR>
<B>Tcl_AddObjErrorInfo</B>(<I>interp, message, length</I>)<BR>
<B>Tcl_SetObjErrorCode</B>(<I>interp, errorObjPtr</I>)<BR>
<B>Tcl_SetErrorCode</B>(<I>interp, element, element, ... </I><B>(char *) NULL</B>)<BR>
<B>Tcl_SetErrorCodeVA</B>(<I>interp, argList</I>)<BR>
<B>Tcl_GetErrorLine</B>(<I>interp</I>)<BR>
<B>Tcl_SetErrorLine</B>(<I>interp, lineNum</I>)<BR>
const char *<BR>
<B>Tcl_PosixError</B>(<I>interp</I>)<BR>
void<BR>
<B>Tcl_LogCommandInfo</B>(<I>interp, script, command, commandLength</I>)<BR>
<H3><A NAME="M4">ARGUMENTS</A></H3>
<DL class="arguments">
<DT><A HREF="../TclLib/Interp.htm">Tcl_Interp</A> <B>*interp</B> (in)<DD>
Interpreter in which to record information.
<P><DT>int <B>code</B> ()<DD>
The code returned from script evaluation.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*options</B> ()<DD>
A dictionary of return options.
<P><DT>char <B>*message</B> (in)<DD>
For <B>Tcl_AddErrorInfo</B>,
this is a conventional C string to append to the <B>-errorinfo</B> return option.
For <B>Tcl_AddObjErrorInfo</B>,
this points to the first byte of an array of <I>length</I> bytes
containing a string to append to the <B>-errorinfo</B> return option.
This byte array may contain embedded null bytes
unless <I>length</I> is negative.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*objPtr</B> (in)<DD>
A message to be appended to the <B>-errorinfo</B> return option
in the form of a <A HREF="../TclLib/Object.htm">Tcl_Obj</A> value.
<P><DT>int <B>length</B> (in)<DD>
The number of bytes to copy from <I>message</I> when
appending to the <B>-errorinfo</B> return option.
If negative, all bytes up to the first null byte are used.
<P><DT><A HREF="../TclLib/Object.htm">Tcl_Obj</A> <B>*errorObjPtr</B> (in)<DD>
The <B>-errorcode</B> return option will be set to this value.
<P><DT>char <B>*element</B> (in)<DD>
String to record as one element of the <B>-errorcode</B> return option.
Last <I>element</I> argument must be NULL.
<P><DT>va_list <B>argList</B> (in)<DD>
An argument list which must have been initialized using
<B>va_start</B>, and cleared using <B>va_end</B>.
<P><DT>int <B>lineNum</B> ()<DD>
The line number of a script where an error occurred.
<P><DT>const char <B>*script</B> (in)<DD>
Pointer to first character in script containing command (must be &lt;= command)
<P><DT>const char <B>*command</B> (in)<DD>
Pointer to first character in command that generated the error
<P><DT>int <B>commandLength</B> (in)<DD>
Number of bytes in command; -1 means use all bytes up to first null byte
<P></DL>
<H3><A NAME="M5">DESCRIPTION</A></H3>
The <B>Tcl_SetReturnOptions</B> and <B>Tcl_GetReturnOptions</B>
routines expose the same capabilities as the <B><A HREF="../TclCmd/return.htm">return</A></B> and
<B><A HREF="../TclCmd/catch.htm">catch</A></B> commands, respectively, in the form of a C interface.
<P>
<B>Tcl_GetReturnOptions</B> retrieves the dictionary of return options
from an interpreter following a script evaluation.
Routines such as <B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B> are called to evaluate a
script in an interpreter.  These routines return an integer
completion code.  These routines also leave in the interpreter
both a result and a dictionary of return options generated
by script evaluation.  Just as <B><A HREF="../TclLib/SetResult.htm">Tcl_GetObjResult</A></B> retrieves
the result, <B>Tcl_GetReturnOptions</B> retrieves the dictionary
of return options.  The integer completion code should be
passed as the <I>code</I> argument to <B>Tcl_GetReturnOptions</B>
so that all required options will be present in the dictionary.
Specifically, a <I>code</I> value of <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B> will
ensure that entries for the keys <B>-errorinfo</B>,
<B>-errorcode</B>, and <B>-errorline</B> will appear in the
dictionary.  Also, the entries for the keys <B>-code</B>
and <B>-level</B> will be adjusted if necessary to agree
with the value of <I>code</I>.  The <B>(Tcl_Obj *)</B> returned
by <B>Tcl_GetReturnOptions</B> points to an unshared
<B><A HREF="../TclLib/Object.htm">Tcl_Obj</A></B> with reference count of zero.  The dictionary
may be written to, either adding, removing, or overwriting
any entries in it, without the need to check for a shared value.
As with any <B><A HREF="../TclLib/Object.htm">Tcl_Obj</A></B> with reference count of zero, it is up to
the caller to arrange for its disposal with <B><A HREF="../TclLib/Object.htm">Tcl_DecrRefCount</A></B> or
to a reference to it via <B><A HREF="../TclLib/Object.htm">Tcl_IncrRefCount</A></B> (or one of the many
functions that call that, notably including <B><A HREF="../TclLib/SetResult.htm">Tcl_SetObjResult</A></B> and
<B><A HREF="../TclLib/SetVar.htm">Tcl_SetVar2Ex</A></B>).
<P>
A typical usage for <B>Tcl_GetReturnOptions</B> is to
retrieve the stack trace when script evaluation returns
<B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B>, like so:
<P>
<PRE>int code = <A HREF="../TclLib/Eval.htm">Tcl_Eval</A>(interp, script);
if (code == TCL_ERROR) {
    <A HREF="../TclLib/Object.htm">Tcl_Obj</A> *options = <B>Tcl_GetReturnOptions</B>(interp, code);  
    <A HREF="../TclLib/Object.htm">Tcl_Obj</A> *key = <A HREF="../TclLib/StringObj.htm">Tcl_NewStringObj</A>(&quot;-errorinfo&quot;, -1);
    <A HREF="../TclLib/Object.htm">Tcl_Obj</A> *stackTrace;
    <A HREF="../TclLib/Object.htm">Tcl_IncrRefCount</A>(key);
    <A HREF="../TclLib/DictObj.htm">Tcl_DictObjGet</A>(NULL, options, key, &amp;stackTrace);
    <A HREF="../TclLib/Object.htm">Tcl_DecrRefCount</A>(key);
    /* Do something with stackTrace */
    <A HREF="../TclLib/Object.htm">Tcl_DecrRefCount</A>(options);
}</PRE>
<P>
<B>Tcl_SetReturnOptions</B> sets the return options
of <I>interp</I> to be <I>options</I>.  If <I>options</I>
contains any invalid value for any key, TCL_ERROR will
be returned, and the interp result will be set to an
appropriate error message.  Otherwise, a completion code
in agreement with the <B>-code</B> and <B>-level</B>
keys in <I>options</I> will be returned.
<P>
As an example, Tcl's <B><A HREF="../TclCmd/return.htm">return</A></B> command itself could
be implemented in terms of <B>Tcl_SetReturnOptions</B>
like so:
<P>
<PRE>if ((objc % 2) == 0) { /* explicit result argument */
    objc--;
    <A HREF="../TclLib/SetResult.htm">Tcl_SetObjResult</A>(interp, objv[objc]);
}
return <B>Tcl_SetReturnOptions</B>(interp, <A HREF="../TclLib/ListObj.htm">Tcl_NewListObj</A>(objc-1, objv+1));</PRE>
<P>
(It is not really implemented that way.  Internal access
privileges allow for a more efficient alternative that meshes
better with the bytecode compiler.)
<P>
Note that a newly created <B><A HREF="../TclLib/Object.htm">Tcl_Obj</A></B> may be passed
in as the <I>options</I> argument without the need to tend
to any reference counting.  This is analogous to
<B><A HREF="../TclLib/SetResult.htm">Tcl_SetObjResult</A></B>.
<P>
While <B>Tcl_SetReturnOptions</B> provides a general interface
to set any collection of return options, there are a handful
of return options that are very frequently used.  Most 
notably the <B>-errorinfo</B> and <B>-errorcode</B> return
options should be set properly when the command procedure
of a command returns <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B>.  The <B>-errorline</B>
return option is also read by commands that evaluate scripts
and wish to supply detailed error location information in 
the stack trace text they append to the <B>-errorinfo</B> option.
Tcl provides several simpler interfaces to more directly set
these return options.
<P>
The <B>-errorinfo</B> option holds a stack trace of the
operations that were in progress when an error occurred,
and is intended to be human-readable.
The <B>-errorcode</B> option holds a list of items that
are intended to be machine-readable.
The first item in the <B>-errorcode</B> value identifies the class of
error that occurred
(e.g. POSIX means an error occurred in a POSIX system call)
and additional elements hold additional pieces
of information that depend on the class.
See the <B><A HREF="../TclCmd/tclvars.htm">tclvars</A></B> manual entry for details on the various
formats for the <B>-errorcode</B> option used by
Tcl's built-in commands.
<P>
The <B>-errorinfo</B> option value is gradually built up as an
error unwinds through the nested operations.
Each time an error code is returned to <B><A HREF="../TclLib/Eval.htm">Tcl_Eval</A></B>, or
any of the routines that performs script evaluation,
the procedure <B>Tcl_AddErrorInfo</B> is called to add
additional text to the <B>-errorinfo</B> value describing the
command that was being executed when the error occurred.
By the time the error has been passed all the way back
to the application, it will contain a complete trace
of the activity in progress when the error occurred.
<P>
It is sometimes useful to add additional information to
the <B>-errorinfo</B> value beyond what can be supplied automatically
by the script evaluation routines.
<B>Tcl_AddErrorInfo</B> may be used for this purpose:
its <I>message</I> argument is an additional
string to be appended to the <B>-errorinfo</B> option.
For example, when an error arises during the <B><A HREF="../TclCmd/source.htm">source</A></B> command,
the procedure <B>Tcl_AddErrorInfo</B> is called to
record the name of the file being processed and the
line number on which the error occurred.
Likewise, when an error arises during evaluation of a
Tcl procedures, the procedure name and line number
within the procedure are recorded, and so on.
The best time to call <B>Tcl_AddErrorInfo</B> is just after
a script evaluation routine has returned <B><A HREF="../TclCmd/catch.htm">TCL_ERROR</A></B>.
The value of the <B>-errorline</B> return option (retrieved
via a call to <B>Tcl_GetReturnOptions</B>) often makes up
a useful part of the <I>message</I> passed to <B>Tcl_AddErrorInfo</B>.
<P>
<B>Tcl_AppendObjToErrorInfo</B> is an alternative interface to the
same functionality as <B>Tcl_AddErrorInfo</B>.  <B>Tcl_AppendObjToErrorInfo</B>
is called when the string value to be appended to the <B>-errorinfo</B> option
is available as a <B><A HREF="../TclLib/Object.htm">Tcl_Obj</A></B> instead of as a <B>char</B> array.
<P>
<B>Tcl_AddObjErrorInfo</B> is nearly identical
to <B>Tcl_AddErrorInfo</B>, except that it has an additional <I>length</I>
argument.  This allows the <I>message</I> string to contain 
embedded null bytes.  This is essentially never a good idea.
If the <I>message</I> needs to contain the null character <B>U+0000</B>,
Tcl's usual internal encoding rules should be used to avoid
the need for a null byte.  If the <B>Tcl_AddObjErrorInfo</B>
interface is used at all, it should be with a negative <I>length</I> value.
<P>
The procedure <B>Tcl_SetObjErrorCode</B> is used to set the
<B>-errorcode</B> return option to the list value <I>errorObjPtr</I> 
built up by the caller. 
<B>Tcl_SetObjErrorCode</B> is typically invoked just 
before returning an error. If an error is
returned without calling <B>Tcl_SetObjErrorCode</B> or
<B>Tcl_SetErrorCode</B> the Tcl interpreter automatically sets
the <B>-errorcode</B> return option to <B>NONE</B>.
<P>
The procedure <B>Tcl_SetErrorCode</B> is also used to set the
<B>-errorcode</B> return option. However, it takes one or more strings to
record instead of a value. Otherwise, it is similar to
<B>Tcl_SetObjErrorCode</B> in behavior.
<P>
<B>Tcl_SetErrorCodeVA</B> is the same as <B>Tcl_SetErrorCode</B> except that
instead of taking a variable number of arguments it takes an argument list.
<P>
The procedure <B>Tcl_GetErrorLine</B> is used to read the integer value
of the <B>-errorline</B> return option without the overhead of a full
call to <B>Tcl_GetReturnOptions</B>.  Likewise, <B>Tcl_SetErrorLine</B>
sets the <B>-errorline</B> return option value.
<P>
<B>Tcl_PosixError</B>
sets the <B>-errorcode</B> variable after an error in a POSIX kernel call.
It reads the value of the <B>errno</B> C variable and calls
<B>Tcl_SetErrorCode</B> to set the <B>-errorcode</B> return
option in the <B>POSIX</B> format.
The caller must previously have called <B><A HREF="../TclLib/SetErrno.htm">Tcl_SetErrno</A></B> to set
<B>errno</B>; this is necessary on some platforms (e.g. Windows) where Tcl
is linked into an application as a shared library, or when the error
occurs in a dynamically loaded extension. See the manual entry for
<B><A HREF="../TclLib/SetErrno.htm">Tcl_SetErrno</A></B> for more information.
<P>
<B>Tcl_PosixError</B> returns a human-readable diagnostic message
for the error
(this is the same value that will appear as the third element
in the <B>-errorcode</B> value).
It may be convenient to include this string as part of the
error message returned to the application in
the interpreter's result.
<P>
<B>Tcl_LogCommandInfo</B> is invoked after an error occurs in an
interpreter.  It adds information about the command that was being
executed when the error occurred to the <B>-errorinfo</B> value, and
the line number stored internally in the interpreter is set.  
<P>
In older releases of Tcl, there was no <B>Tcl_GetReturnOptions</B>
routine.  In its place, the global Tcl variables <B><A HREF="../TclCmd/tclvars.htm">errorInfo</A></B>
and <B><A HREF="../TclCmd/tclvars.htm">errorCode</A></B> were the only place to retrieve the error
information.  Much existing code written for older Tcl releases
still access this information via those global variables.
<P>
It is important to realize that while reading from those
global variables remains a supported way to access these
return option values, it is important not to assume that
writing to those global variables will properly set the
corresponding return options.  It has long been emphasized
in this manual page that it is important to 
call the procedures described here rather than
setting <B><A HREF="../TclCmd/tclvars.htm">errorInfo</A></B> or <B><A HREF="../TclCmd/tclvars.htm">errorCode</A></B> directly with
<B><A HREF="../TclLib/SetVar.htm">Tcl_ObjSetVar2</A></B>.
<P>
If the procedure <B><A HREF="../TclLib/SetResult.htm">Tcl_ResetResult</A></B> is called,
it clears all of the state of the interpreter associated with
script evaluation, including the entire return options dictionary.
In particular, the <B>-errorinfo</B> and <B>-errorcode</B> options
are reset.  
If an error had occurred, the <B><A HREF="../TclLib/SetResult.htm">Tcl_ResetResult</A></B> call will
clear the error state to make it appear as if no error had
occurred after all.
The global variables <B><A HREF="../TclCmd/tclvars.htm">errorInfo</A></B> and
<B><A HREF="../TclCmd/tclvars.htm">errorCode</A></B> are not modified by <B><A HREF="../TclLib/SetResult.htm">Tcl_ResetResult</A></B>
so they continue to hold a record of information about the
most recent error seen in an interpreter.
<H3><A NAME="M6">SEE ALSO</A></H3>
<B><A HREF="../TclLib/Object.htm">Tcl_DecrRefCount</A></B>, <B><A HREF="../TclLib/Object.htm">Tcl_IncrRefCount</A></B>, <B><A HREF="../TclLib/Interp.htm">Tcl_Interp</A></B>, <B><A HREF="../TclLib/SetResult.htm">Tcl_ResetResult</A></B>, <B><A HREF="../TclLib/SetErrno.htm">Tcl_SetErrno</A></B>, <B><A HREF="../TclCmd/tclvars.htm">tclvars</A></B>
<H3><A NAME="M7">KEYWORDS</A></H3>
<A href="../Keywords/E.htm#error">error</A>, <A href="../Keywords/V.htm#value">value</A>, <A href="../Keywords/V.htm#value result">value result</A>, <A href="../Keywords/S.htm#stack">stack</A>, <A href="../Keywords/T.htm#trace">trace</A>, <A href="../Keywords/V.htm#variable">variable</A>
<div class="copy">Copyright &copy; 1989-1993 The Regents of the University of California.
Copyright &copy; 1994-1997 Sun Microsystems, Inc.
</div>
</BODY></HTML>
