<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>bind manual page - Tk Built-In Commands</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.6.0/Tk8.6.0 Documentation</a> <small>&gt;</small> <a href="contents.htm">Tk Commands, version 8.6.0</a> <small>&gt;</small> bind</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../ItclCmd/contents.htm">[incr Tcl] Package Commands</A> | <A HREF="../Sqlite3Cmd/contents.htm">SQLite Package Commands</A> | <A HREF="../TdbcCmd/contents.htm">TDBC Package Commands</A> | <A HREF="../TdbcmysqlCmd/contents.htm">tdbc::mysql Package Commands</A> | <A HREF="../TdbcodbcCmd/contents.htm">tdbc::odbc Package Commands</A> | <A HREF="../TdbcpostgresCmd/contents.htm">tdbc::postgres Package Commands</A> | <A HREF="../Tdbcsqlite3Cmd/contents.htm">tdbc::sqlite3 Package Commands</A> | <A HREF="../ThreadCmd/contents.htm">Thread Package Commands</A> | <A HREF="../TclLib/contents.htm">Tcl C API</A> | <A HREF="../TkLib/contents.htm">Tk C API</A> | <A HREF="../ItclLib/contents.htm">[incr Tcl] Package C API</A> | <A HREF="../TdbcLib/contents.htm">TDBC Package C API</A></H3>
<DL>
<DD><A HREF="bind.htm#M2" NAME="L99">NAME</A>
<DL><DD>bind &mdash; Arrange for X events to invoke Tcl scripts</DD></DL>
<DD><A HREF="bind.htm#M3" NAME="L100">SYNOPSIS</A>
<DL>
</DL>
<DD><A HREF="bind.htm#M4" NAME="L101">INTRODUCTION</A>
<UL class="introduction">
</UL>
<DD><A HREF="bind.htm#M5" NAME="L102">EVENT PATTERNS</A>
<DD><A HREF="bind.htm#M6" NAME="L103">MODIFIERS</A>
<DD><A HREF="bind.htm#M7" NAME="L104">EVENT TYPES</A>
<DL class="event types">
<DD><A HREF="bind.htm#M8" NAME="L105"><B>Activate</B>, <B>Deactivate</B></A>
<DD><A HREF="bind.htm#M9" NAME="L106"><B>MouseWheel</B></A>
<DD><A HREF="bind.htm#M10" NAME="L107"><B>KeyPress</B>, <B>KeyRelease</B></A>
<DD><A HREF="bind.htm#M11" NAME="L108"><B>ButtonPress</B>, <B>ButtonRelease</B>, <B>Motion</B></A>
<DD><A HREF="bind.htm#M12" NAME="L109"><B>Configure</B></A>
<DD><A HREF="bind.htm#M13" NAME="L110"><B>Map</B>, <B>Unmap</B></A>
<DD><A HREF="bind.htm#M14" NAME="L111"><B>Visibility</B></A>
<DD><A HREF="bind.htm#M15" NAME="L112"><B>Expose</B></A>
<DD><A HREF="bind.htm#M16" NAME="L113"><B>Destroy</B></A>
<DD><A HREF="bind.htm#M17" NAME="L114"><B>FocusIn</B>, <B>FocusOut</B></A>
<DD><A HREF="bind.htm#M18" NAME="L115"><B>Enter</B>, <B>Leave</B></A>
<DD><A HREF="bind.htm#M19" NAME="L116"><B>Property</B></A>
<DD><A HREF="bind.htm#M20" NAME="L117"><B>Colormap</B></A>
<DD><A HREF="bind.htm#M21" NAME="L118"><B>MapRequest</B>, <B>CirculateRequest</B>, <B>ResizeRequest</B>, <B>ConfigureRequest</B>, <B>Create</B></A>
<DD><A HREF="bind.htm#M22" NAME="L119"><B>Gravity</B>, <B>Reparent</B>, <B>Circulate</B></A>
</DL>
<DD><A HREF="bind.htm#M23" NAME="L120">EVENT DETAILS</A>
<DD><A HREF="bind.htm#M24" NAME="L121">BINDING SCRIPTS AND SUBSTITUTIONS</A>
<DL class="binding scripts and substitutions">
<DD><A HREF="bind.htm#M25" NAME="L122"><B>%%</B></A>
<DD><A HREF="bind.htm#M26" NAME="L123"><B>%#</B></A>
<DD><A HREF="bind.htm#M27" NAME="L124"><B>%a</B></A>
<DD><A HREF="bind.htm#M28" NAME="L125"><B>%b</B></A>
<DD><A HREF="bind.htm#M29" NAME="L126"><B>%c</B></A>
<DD><A HREF="bind.htm#M30" NAME="L127"><B>%d</B></A>
<DD><A HREF="bind.htm#M31" NAME="L128"><B>%f</B></A>
<DD><A HREF="bind.htm#M32" NAME="L129"><B>%h</B></A>
<DD><A HREF="bind.htm#M33" NAME="L130"><B>%i</B></A>
<DD><A HREF="bind.htm#M34" NAME="L131"><B>%k</B></A>
<DD><A HREF="bind.htm#M35" NAME="L132"><B>%m</B></A>
<DD><A HREF="bind.htm#M36" NAME="L133"><B>%o</B></A>
<DD><A HREF="bind.htm#M37" NAME="L134"><B>%p</B></A>
<DD><A HREF="bind.htm#M38" NAME="L135"><B>%s</B></A>
<DD><A HREF="bind.htm#M39" NAME="L136"><B>%t</B></A>
<DD><A HREF="bind.htm#M40" NAME="L137"><B>%w</B></A>
<DD><A HREF="bind.htm#M41" NAME="L138"><B>%x</B>, <B>%y</B></A>
<DD><A HREF="bind.htm#M42" NAME="L139"><B>%A</B></A>
<DD><A HREF="bind.htm#M43" NAME="L140"><B>%B</B></A>
<DD><A HREF="bind.htm#M44" NAME="L141"><B>%D</B></A>
<DD><A HREF="bind.htm#M45" NAME="L142"><B>%E</B></A>
<DD><A HREF="bind.htm#M46" NAME="L143"><B>%K</B></A>
<DD><A HREF="bind.htm#M47" NAME="L144"><B>%N</B></A>
<DD><A HREF="bind.htm#M48" NAME="L145"><B>%P</B></A>
<DD><A HREF="bind.htm#M49" NAME="L146"><B>%R</B></A>
<DD><A HREF="bind.htm#M50" NAME="L147"><B>%S</B></A>
<DD><A HREF="bind.htm#M51" NAME="L148"><B>%T</B></A>
<DD><A HREF="bind.htm#M52" NAME="L149"><B>%W</B></A>
<DD><A HREF="bind.htm#M53" NAME="L150"><B>%X</B>, <B>%Y</B></A>
</DL>
<DD><A HREF="bind.htm#M54" NAME="L151">MULTIPLE MATCHES</A>
<OL class="multiple matches">
</OL>
<DD><A HREF="bind.htm#M55" NAME="L152">MULTI-EVENT SEQUENCES AND IGNORED EVENTS</A>
<DD><A HREF="bind.htm#M56" NAME="L153">ERRORS</A>
<DD><A HREF="bind.htm#M57" NAME="L154">EXAMPLES</A>
<DD><A HREF="bind.htm#M58" NAME="L155">SEE ALSO</A>
<DD><A HREF="bind.htm#M59" NAME="L156">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
bind &mdash; Arrange for X events to invoke Tcl scripts
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>bind</B><I> tag</I> ?<I>sequence</I>? ?<B>+</B>??<I>script</I>?<BR>
<H3><A NAME="M4">INTRODUCTION</A></H3>
The <B>bind</B> command associates Tcl scripts with X events.
If all three arguments are specified, <B>bind</B> will
arrange for <I>script</I> (a Tcl script) to be evaluated whenever
the event(s) given by <I>sequence</I> occur in the window(s)
identified by <I>tag</I>.
If <I>script</I> is prefixed with a
&#8220;+&#8221;,
then it is appended to
any existing binding for <I>sequence</I>;  otherwise <I>script</I> replaces
any existing binding.
If <I>script</I> is an empty string then the current binding for
<I>sequence</I> is destroyed, leaving <I>sequence</I> unbound.
In all of the cases where a <I>script</I> argument is provided,
<B>bind</B> returns an empty string.
<P>
If <I>sequence</I> is specified without a <I>script</I>, then the
script currently bound to <I>sequence</I> is returned, or
an empty string is returned if there is no binding for <I>sequence</I>.
If neither <I>sequence</I> nor <I>script</I> is specified, then the
return value is a list whose elements are all the sequences
for which there exist bindings for <I>tag</I>.
<P>
The <I>tag</I> argument determines which window(s) the binding applies to.
If <I>tag</I> begins with a dot, as in <B>.a.b.c</B>, then it must
be the path name for a window; otherwise it may be an arbitrary
string.
Each window has an associated list of tags, and a binding applies
to a particular window if its tag is among those specified for
the window.
Although the <B><A HREF="../TkCmd/bindtags.htm">bindtags</A></B> command may be used to assign an
arbitrary set of binding tags to a window, the default binding
tags provide the following behavior:
<P>
<UL class="introduction">
<LI>
If a tag is the name of an internal window the binding applies
to that window.
<P><LI>
If the tag is the name of a toplevel window the binding applies
to the toplevel window and all its internal windows.
<P><LI>
If the tag is the name of a class of widgets, such as <B>Button</B>,
the binding applies to all widgets in that class;
<P><LI>
If <I>tag</I> has the value <B>all</B>,
the binding applies to all windows in the application.
<P></UL>
<H3><A NAME="M5">EVENT PATTERNS</A></H3>
The <I>sequence</I> argument specifies a sequence of one or more
event patterns, with optional white space between the patterns.  Each
event pattern may
take one of three forms.  In the simplest case it is a single
printing ASCII character, such as <B>a</B> or <B>[</B>.  The character
may not be a space character or the character <B>&lt;</B>.  This form of
pattern matches a <B>KeyPress</B> event for the particular
character.  The second form of pattern is longer but more general.
It has the following syntax:
<PRE><B>&lt;</B><I>modifier-modifier-type-detail</I><B>&gt;</B></PRE>
The entire event pattern is surrounded by angle brackets.
Inside the angle brackets are zero or more modifiers, an event
type, and an extra piece of information (<I>detail</I>) identifying
a particular button or keysym.  Any of the fields may be omitted,
as long as at least one of <I>type</I> and <I>detail</I> is present.
The fields must be separated by white space or dashes.
<P>
The third form of pattern is used to specify a user-defined, named virtual
event.  It has the following syntax:
<PRE><B>&lt;&lt;</B><I>name</I><B>&gt;&gt;</B></PRE>
The entire virtual event pattern is surrounded by double angle brackets.
Inside the angle brackets is the user-defined name of the virtual event.
Modifiers, such as <B>Shift</B> or <B>Control</B>, may not be combined with a
virtual event to modify it.  Bindings on a virtual event may be created
before the virtual event is defined, and if the definition of a virtual
event changes dynamically, all windows bound to that virtual event will
respond immediately to the new definition.
<P>
Some widgets (e.g. <B><A HREF="../TkCmd/menu.htm">menu</A></B> and <B><A HREF="../TkCmd/text.htm">text</A></B>) issue virtual events
when their internal state is updated in some ways.  Please see the
manual page for each widget for details.
<H4><A NAME="M6">MODIFIERS</A></H4>
Modifiers consist of any of the following values:
<dl><dd><table border="0"><tr><td><p class="tablecell"><B>Control</B><td><p class="tablecell"><B>Mod1</B>, <B>M1</B>, <B>Command</B><tr><td><p class="tablecell"><B>Alt</B><td><p class="tablecell"><B>Mod2</B>, <B>M2</B>, <B>Option</B><tr><td><p class="tablecell"><B>Shift</B><td><p class="tablecell"><B>Mod3</B>, <B>M3</B><tr><td><p class="tablecell"><B>Lock</B><td><p class="tablecell"><B>Mod4</B>, <B>M4</B><tr><td><p class="tablecell"><B>Extended</B><td><p class="tablecell"><B>Mod5</B>, <B>M5</B><tr><td><p class="tablecell"><B>Button1</B>, <B>B1</B><td><p class="tablecell"><B>Meta</B>, <B>M</B><tr><td><p class="tablecell"><B>Button2</B>, <B>B2</B><td><p class="tablecell"><B>Double</B><tr><td><p class="tablecell"><B>Button3</B>, <B>B3</B><td><p class="tablecell"><B>Triple</B><tr><td><p class="tablecell"><B>Button4</B>, <B>B4</B><td><p class="tablecell"><B>Quadruple</B><tr><td><p class="tablecell"><B>Button5</B>, <B>B5</B></table></dl>
Where more than one value is listed, separated by commas, the values
are equivalent.
Most of the modifiers have the obvious X meanings.
For example, <B>Button1</B> requires that
button 1 be depressed when the event occurs.
For a binding to match a given event, the modifiers in the event
must include all of those specified in the event pattern.
An event may also contain additional modifiers not specified in
the binding.
For example, if button 1 is pressed while the shift and control keys
are down, the pattern <B>&lt;Control-Button-1&gt;</B> will match
the event, but <B>&lt;Mod1-Button-1&gt;</B> will not.
If no modifiers are specified, then any combination of modifiers may
be present in the event.
<P>
<B>Meta</B> and <B>M</B> refer to whichever of the
<B>M1</B> through <B>M5</B> modifiers is associated with the Meta
key(s) on the keyboard (keysyms <B>Meta_R</B> and <B>Meta_L</B>).
If there are no Meta keys, or if they are not associated with any
modifiers, then <B>Meta</B> and <B>M</B> will not match any events.
Similarly, the <B>Alt</B> modifier refers to whichever modifier
is associated with the alt key(s) on the keyboard (keysyms
<B>Alt_L</B> and <B>Alt_R</B>).
<P>
The <B>Double</B>, <B>Triple</B> and <B>Quadruple</B> modifiers are a
convenience for specifying double mouse clicks and other repeated
events. They cause a particular event pattern to be repeated 2, 3 or 4
times, and also place a time and space requirement on the sequence: for a
sequence of events to match a <B>Double</B>, <B>Triple</B> or <B>Quadruple</B>
pattern, all of the events must occur close together in time and without
substantial mouse motion in between.  For example, <B>&lt;Double-Button-1&gt;</B>
is equivalent to <B>&lt;Button-1&gt;&lt;Button-1&gt;</B> with the extra time and space
requirement.
<P>
The <B>Command</B> and <B>Option</B> modifiers are equivalents of <B>Mod1</B>
resp. <B>Mod2</B>, they correspond to Macintosh-specific modifier keys.
<P>
The <B>Extended</B> modifier is, at present, specific to Windows.  It
appears on events that are associated with the keys on the
&#8220;extended keyboard&#8221;.
On a US keyboard, the extended keys include the <B>Alt</B>
and <B>Control</B> keys at the right of the keyboard, the cursor keys
in the cluster to the left of the numeric pad, the <B>NumLock</B> key,
the <B><A HREF="../TclCmd/break.htm">Break</A></B> key, the <B>PrintScreen</B> key, and the <B>/</B> and
<B>Enter</B> keys in the numeric keypad.
<H4><A NAME="M7">EVENT TYPES</A></H4>
The <I>type</I> field may be any of the standard X event types, with a
few extra abbreviations.  The <I>type</I> field will also accept a
couple non-standard X event types that were added to better support
the Macintosh and Windows platforms.  Below is a list of all the valid
types; where two names appear together, they are synonyms.
<dl><dd><table border="0"><tr><td><p class="tablecell"><B>Activate</B><td><p class="tablecell"><B>Destroy</B><td><p class="tablecell"><B>Map</B><tr><td><p class="tablecell"><B>ButtonPress</B>, <B>Button</B><td><p class="tablecell"><B>Enter</B><td><p class="tablecell"><B>MapRequest</B><tr><td><p class="tablecell"><B>ButtonRelease</B><td><p class="tablecell"><B>Expose</B><td><p class="tablecell"><B>Motion</B><tr><td><p class="tablecell"><B>Circulate</B><td><p class="tablecell"><B>FocusIn</B><td><p class="tablecell"><B>MouseWheel</B><tr><td><p class="tablecell"><B>CirculateRequest</B><td><p class="tablecell"><B>FocusOut</B><td><p class="tablecell"><B>Property</B><tr><td><p class="tablecell"><B>Colormap</B><td><p class="tablecell"><B>Gravity</B><td><p class="tablecell"><B>Reparent</B><tr><td><p class="tablecell"><B>Configure</B><td><p class="tablecell"><B>KeyPress</B>, <B>Key</B><td><p class="tablecell"><B>ResizeRequest</B><tr><td><p class="tablecell"><B>ConfigureRequest</B><td><p class="tablecell"><B>KeyRelease</B><td><p class="tablecell"><B>Unmap</B><tr><td><p class="tablecell"><B>Create</B><td><p class="tablecell"><B>Leave</B><td><p class="tablecell"><B>Visibility</B><tr><td><p class="tablecell"><B>Deactivate</B></table></dl>
Most of the above events have the same fields and behaviors as events
in the X Windowing system.  You can find more detailed descriptions of
these events in any X window programming book.  A couple of the events
are extensions to the X event system to support features unique to the
Macintosh and Windows platforms.  We provide a little more detail on
these events here.  These include:
<P>
<DL class="event types">
<DT><A NAME="M8"><B>Activate</B>, <B>Deactivate</B></A><DD>
These two events are sent to every sub-window of a toplevel when they
change state.  In addition to the focus Window, the Macintosh platform
and Windows platforms have a notion of an active window (which often
has but is not required to have the focus).  On the Macintosh, widgets
in the active window have a different appearance than widgets in
deactive windows.  The <B>Activate</B> event is sent to all the
sub-windows in a toplevel when it changes from being deactive to
active.  Likewise, the <B>Deactive</B> event is sent when the window's
state changes from active to deactive.  There are no useful percent
substitutions you would make when binding to these events.
<P><DT><A NAME="M9"><B>MouseWheel</B></A><DD>
Many contemporary mice support a mouse wheel, which is used
for scrolling documents without using the scrollbars.  By rolling the
wheel, the system will generate <B>MouseWheel</B> events that the
application can use to scroll.  Like <B>Key</B> events the event is
always routed to the window that currently has focus. When the event
is received you can use the <B>%D</B> substitution to get the
<I>delta</I> field for the event, which is a integer value describing how
the mouse wheel has moved.  The smallest value for which the
system will report is defined by the OS.  On Windows 95 &amp; 98 machines
this value is at least 120 before it is reported.  However, higher
resolution devices may be available in the future.  The sign of the
value determines which direction your widget should scroll.  Positive
values should scroll up and negative values should scroll down.
<P><DT><A NAME="M10"><B>KeyPress</B>, <B>KeyRelease</B></A><DD>
The <B>KeyPress</B> and <B>KeyRelease</B> events are generated
whenever a key is pressed or released.  <B>KeyPress</B> and <B>KeyRelease</B>
events are sent to the window which currently has the keyboard focus.
<P><DT><A NAME="M11"><B>ButtonPress</B>, <B>ButtonRelease</B>, <B>Motion</B></A><DD>
The <B>ButtonPress</B> and <B>ButtonRelease</B> events
are generated when the user presses or releases a mouse button.
<B>Motion</B> events are generated whenever the pointer is moved.
<B>ButtonPress</B>, <B>ButtonRelease</B>, and <B>Motion</B> events are
normally sent to the window containing the pointer.
<P>
When a mouse button is pressed, the window containing the pointer
automatically obtains a temporary pointer grab.
Subsequent <B>ButtonPress</B>, <B>ButtonRelease</B>, and <B>Motion</B>
events will be sent to that window,
regardless of which window contains the pointer,
until all buttons have been released.
<P><DT><A NAME="M12"><B>Configure</B></A><DD>
A <B>Configure</B> event is sent to a window whenever its
size, position, or border width changes, and sometimes
when it has changed position in the stacking order.
<P><DT><A NAME="M13"><B>Map</B>, <B>Unmap</B></A><DD>
The <B>Map</B> and <B>Unmap</B> events are generated whenever the mapping
state of a window changes.
<P>
Windows are created in the unmapped state.
Top-level windows become mapped when they transition to the
<B>normal</B> state, and are unmapped in the <B>withdrawn</B>
and <B>iconic</B> states.
Other windows become mapped when they are placed under control
of a geometry manager (for example <B><A HREF="../TkCmd/pack.htm">pack</A></B> or <B><A HREF="../TkCmd/grid.htm">grid</A></B>).
<P>A window is <I>viewable</I> only if it and all of its ancestors are mapped.
Note that geometry managers typically do not map their children until
they have been mapped themselves, and unmap all children
when they become unmapped; hence in Tk <B>Map</B> and <B>Unmap</B>
events indicate whether or not a window is viewable.
<P><DT><A NAME="M14"><B>Visibility</B></A><DD>
A window is said to be <I>obscured</I> when another window
above it in the stacking order fully or partially overlaps it.
<B>Visibility</B> events are generated whenever a window's
obscurity state changes; the <I>state</I> field (<B>%s</B>)
specifies the new state.
<P><DT><A NAME="M15"><B>Expose</B></A><DD>
An <B>Expose</B> event is generated whenever all or part of a
window should be redrawn (for example, when a window is
first mapped or if it becomes unobscured).
It is normally not necessary for client applications to
handle <B>Expose</B> events, since Tk handles them internally.
<P><DT><A NAME="M16"><B>Destroy</B></A><DD>
A <B>Destroy</B> event is delivered to a window when
it is destroyed.
<P>
When the <B>Destroy</B> event is delivered
to a widget, it is in a
&#8220;half-dead&#8221;
state: the widget still exists, but most operations on it will fail.
<P><DT><A NAME="M17"><B>FocusIn</B>, <B>FocusOut</B></A><DD>
The <B>FocusIn</B> and <B>FocusOut</B> events are generated
whenever the keyboard focus changes.
A <B>FocusOut</B> event is sent to the old focus window,
and a <B>FocusIn</B> event is sent to the new one.
<P>
In addition,
if the old and new focus windows do not share a common parent,
&#8220;virtual crossing&#8221;
focus events are sent to the intermediate windows in the hierarchy.
Thus a <B>FocusIn</B> event indicates
that the target window or one of its descendants has acquired the focus,
and a <B>FocusOut</B> event indicates that the focus
has been changed to a window outside the target window's hierarchy.
<P>The keyboard focus may be changed explicitly by a call to <B><A HREF="../TkCmd/focus.htm">focus</A></B>,
or implicitly by the window manager.
<P><DT><A NAME="M18"><B>Enter</B>, <B>Leave</B></A><DD>
An <B>Enter</B> event is sent to a window when the pointer
enters that window, and a <B>Leave</B> event is sent when
the pointer leaves it.
<P>
If there is a pointer grab in effect, <B>Enter</B> and <B>Leave</B>
events are only delivered to the window owning the grab.
<P>In addition, when the pointer moves
between two windows, <B>Enter</B> and <B>Leave</B>
&#8220;virtual crossing&#8221;
events are sent to intermediate windows
in the hierarchy in the same manner as for <B>FocusIn</B> and
<B>FocusOut</B> events.
<P><DT><A NAME="M19"><B>Property</B></A><DD>
A <B>Property</B> event is sent to a window whenever an X property
belonging to that window is changed or deleted.
<B>Property</B> events are not normally delivered to Tk applications as
they are handled by the Tk core.
<P><DT><A NAME="M20"><B>Colormap</B></A><DD>
A <B>Colormap</B> event is generated whenever the colormap
associated with a window has been changed, installed, or uninstalled.
<P>
Widgets may be assigned a private colormap by
specifying a <B>-colormap</B> option; the window manager
is responsible for installing and uninstalling colormaps
as necessary.
<P>Note that Tk provides no useful details for this event type.
<P><DT><A NAME="M21"><B>MapRequest</B>, <B>CirculateRequest</B>, <B>ResizeRequest</B>, <B>ConfigureRequest</B>, <B>Create</B></A><DD>
These events are not normally delivered to Tk applications.
They are included for completeness, to make it possible to
write X11 window managers in Tk.
(These events are only delivered when a client has
selected <B>SubstructureRedirectMask</B> on a window;
the Tk core does not use this mask.)
<P><DT><A NAME="M22"><B>Gravity</B>, <B>Reparent</B>, <B>Circulate</B></A><DD>
The events <B>Gravity</B> and <B>Reparent</B>
are not normally delivered to Tk applications.
They are included for completeness.
<P>
A <B>Circulate</B> event indicates that the window has moved
to the top or to the bottom of the stacking order as
a result of an <B>XCirculateSubwindows</B> protocol request.
Note that the stacking order may be changed for other reasons
which do not generate a <B>Circulate</B> event, and that
Tk does not use <B>XCirculateSubwindows()</B> internally.
This event type is included only for completeness;
there is no reliable way to track changes to a window's
position in the stacking order.
<P></DL>
<H4><A NAME="M23">EVENT DETAILS</A></H4>
The last part of a long event specification is <I>detail</I>.  In the
case of a <B>ButtonPress</B> or <B>ButtonRelease</B> event, it is the
number of a button (1-5).  If a button number is given, then only an
event on that particular button will match;  if no button number is
given, then an event on any button will match.  Note:  giving a
specific button number is different than specifying a button modifier;
in the first case, it refers to a button being pressed or released,
while in the second it refers to some other button that is already
depressed when the matching event occurs.  If a button
number is given then <I>type</I> may be omitted:  if will default
to <B>ButtonPress</B>.  For example, the specifier <B>&lt;1&gt;</B>
is equivalent to <B>&lt;ButtonPress-1&gt;</B>.
<P>
If the event type is <B>KeyPress</B> or <B>KeyRelease</B>, then
<I>detail</I> may be specified in the form of an X keysym.  Keysyms
are textual specifications for particular keys on the keyboard;
they include all the alphanumeric ASCII characters (e.g.
&#8220;a&#8221;
is the keysym for the ASCII character
&#8220;a&#8221;),
plus descriptions for non-alphanumeric characters
(&#8220;comma&#8221;is the keysym for the comma character),
plus descriptions for all the non-ASCII keys on the keyboard (e.g.
&#8220;Shift_L&#8221;
is the keysym for the left shift key, and
&#8220;F1&#8221;
is the keysym for the F1 function key, if it exists).  The
complete list of keysyms is not presented here;  it is
available in other X documentation and may vary from system to
system.
If necessary, you can use the <B>%K</B> notation described below
to print out the keysym name for a particular key.
If a keysym <I>detail</I> is given, then the
<I>type</I> field may be omitted;  it will default to <B>KeyPress</B>.
For example, <B>&lt;Control-comma&gt;</B> is equivalent to
<B>&lt;Control-KeyPress-comma&gt;</B>.
<H3><A NAME="M24">BINDING SCRIPTS AND SUBSTITUTIONS</A></H3>
The <I>script</I> argument to <B>bind</B> is a Tcl script,
which will be executed whenever the given event sequence occurs.
<I>Command</I> will be executed in the same interpreter that the
<B>bind</B> command was executed in, and it will run at global
level (only global variables will be accessible).
If <I>script</I> contains
any <B>%</B> characters, then the script will not be
executed directly.  Instead, a new script will be
generated by replacing each <B>%</B>, and the character following
it, with information from the current event.  The replacement
depends on the character following the <B>%</B>, as defined in the
list below.  Unless otherwise indicated, the
replacement string is the decimal value of the given field from
the current event.
Some of the substitutions are only valid for
certain types of events;  if they are used for other types of events
the value substituted is undefined.
<P>
<DL class="binding scripts and substitutions">
<DT><A NAME="M25"><B>%%</B></A><DD>
Replaced with a single percent.
<P><DT><A NAME="M26"><B>%#</B></A><DD>
The number of the last client request processed by the server
(the <I>serial</I> field from the event).  Valid for all event
types.
<P><DT><A NAME="M27"><B>%a</B></A><DD>
The <I>above</I> field from the event,
formatted as a hexadecimal number.
Valid only for <B>Configure</B> events.
Indicates the sibling window immediately below the receiving window
in the stacking order, or <B>0</B> if the receiving window is at the
bottom.
<P><DT><A NAME="M28"><B>%b</B></A><DD>
The number of the button that was pressed or released.  Valid only
for <B>ButtonPress</B> and <B>ButtonRelease</B> events.
<P><DT><A NAME="M29"><B>%c</B></A><DD>
The <I>count</I> field from the event.  Valid only for <B>Expose</B> events.
Indicates that there are <I>count</I> pending <B>Expose</B> events which have not
yet been delivered to the window.
<P><DT><A NAME="M30"><B>%d</B></A><DD>
The <I>detail</I> or <I>user_data</I>
field from the event.  The <B>%d</B> is replaced by
a string identifying the detail.  For <B>Enter</B>,
<B>Leave</B>, <B>FocusIn</B>, and <B>FocusOut</B> events,
the string will be one of the following:
<dl><dd><table border="0"><tr><td><p class="tablecell"><B>NotifyAncestor</B><td><p class="tablecell"><B>NotifyNonlinearVirtual</B><tr><td><p class="tablecell"><B>NotifyDetailNone</B><td><p class="tablecell"><B>NotifyPointer</B><tr><td><p class="tablecell"><B>NotifyInferior</B><td><p class="tablecell"><B>NotifyPointerRoot</B><tr><td><p class="tablecell"><B>NotifyNonlinear</B><td><p class="tablecell"><B>NotifyVirtual</B></table></dl>
For <B>ConfigureRequest</B> events, the string will be one of:
<dl><dd><table border="0"><tr><td><p class="tablecell"><B>Above</B><td><p class="tablecell"><B>Opposite</B><tr><td><p class="tablecell"><B>Below</B><td><p class="tablecell"><B>None</B><tr><td><p class="tablecell"><B>BottomIf</B><td><p class="tablecell"><B>TopIf</B></table></dl>
For virtual events, the string will be whatever value is stored in the
<I>user_data</I> field when the event was created (typically with
<B>event generate</B>), or the empty string if the field is NULL.
Virtual events corresponding to key sequence presses (see <B>event
add</B> for details) set the <I>user_data</I> to NULL.
For events other than these, the substituted string is undefined.
<P><DT><A NAME="M31"><B>%f</B></A><DD>
The <I>focus</I> field from the event (<B>0</B> or <B>1</B>).  Valid only
for <B>Enter</B> and <B>Leave</B> events.  <B>1</B> if the receiving
window is the focus window or a descendant of the focus window,
<B>0</B> otherwise.
<P><DT><A NAME="M32"><B>%h</B></A><DD>
The <I>height</I> field from the event.  Valid for the <B>Configure</B>,
<B>ConfigureRequest</B>, <B>Create</B>, <B>ResizeRequest</B>, and
<B>Expose</B> events.
Indicates the new or requested height of the window.
<P><DT><A NAME="M33"><B>%i</B></A><DD>
The <I>window</I> field from the event, represented as a hexadecimal
integer.  Valid for all event types.
<P><DT><A NAME="M34"><B>%k</B></A><DD>
The <I>keycode</I> field from the event.  Valid only for <B>KeyPress</B>
and <B>KeyRelease</B> events.
<P><DT><A NAME="M35"><B>%m</B></A><DD>
The <I>mode</I> field from the event.  The substituted string is one of
<B>NotifyNormal</B>, <B>NotifyGrab</B>, <B>NotifyUngrab</B>, or
<B>NotifyWhileGrabbed</B>.  Valid only for <B>Enter</B>,
<B>FocusIn</B>, <B>FocusOut</B>, and <B>Leave</B> events.
<P><DT><A NAME="M36"><B>%o</B></A><DD>
The <I>override_redirect</I> field from the event.  Valid only for
<B>Map</B>, <B>Reparent</B>, and <B>Configure</B> events.
<P><DT><A NAME="M37"><B>%p</B></A><DD>
The <I>place</I> field from the event, substituted as one of the
strings <B>PlaceOnTop</B> or <B>PlaceOnBottom</B>.  Valid only
for <B>Circulate</B> and <B>CirculateRequest</B> events.
<P><DT><A NAME="M38"><B>%s</B></A><DD>
The <I>state</I> field from the event.  For <B>ButtonPress</B>,
<B>ButtonRelease</B>, <B>Enter</B>, <B>KeyPress</B>, <B>KeyRelease</B>,
<B>Leave</B>, and <B>Motion</B> events, a decimal string
is substituted.  For <B>Visibility</B>, one of the strings
<B>VisibilityUnobscured</B>, <B>VisibilityPartiallyObscured</B>,
and <B>VisibilityFullyObscured</B> is substituted.
For <B>Property</B> events, substituted with
either the string <B>NewValue</B> (indicating that the property
has been created or modified) or <B>Delete</B> (indicating that
the property has been removed).
<P><DT><A NAME="M39"><B>%t</B></A><DD>
The <I>time</I> field from the event.
This is the X server timestamp (typically the time since
the last server reset) in milliseconds, when the event occurred.
Valid for most events.
<P><DT><A NAME="M40"><B>%w</B></A><DD>
The <I>width</I> field from the event.
Indicates the new or requested width of the window.
Valid only for
<B>Configure</B>, <B>ConfigureRequest</B>, <B>Create</B>,
<B>ResizeRequest</B>, and <B>Expose</B> events.
<P><DT><A NAME="M41"><B>%x</B>, <B>%y</B></A><DD>
The <I>x</I> and <I>y</I> fields from the event.
For <B>ButtonPress</B>, <B>ButtonRelease</B>, <B>Motion</B>,
<B>KeyPress</B>, <B>KeyRelease</B>, and <B>MouseWheel</B> events,
<B>%x</B> and <B>%y</B> indicate the position of the mouse pointer
relative to the receiving window.
For <B>Enter</B> and <B>Leave</B> events, the position where the
mouse pointer crossed the window, relative to the receiving window.
For <B>Configure</B> and <B>Create</B> requests, the <I>x</I> and <I>y</I>
coordinates of the window relative to its parent window.
<P><DT><A NAME="M42"><B>%A</B></A><DD>
Substitutes the UNICODE character corresponding to the event, or
the empty string if the event does not correspond to a UNICODE character
(e.g. the shift key was pressed). <B>XmbLookupString</B> (or
<B>XLookupString</B> when input method support is turned off) does all
the work of translating from the event to a UNICODE character.
Valid only for <B>KeyPress</B> and <B>KeyRelease</B> events.
<P><DT><A NAME="M43"><B>%B</B></A><DD>
The <I>border_width</I> field from the event.  Valid only for
<B>Configure</B>, <B>ConfigureRequest</B>, and <B>Create</B> events.
<P><DT><A NAME="M44"><B>%D</B></A><DD>
This reports the <I>delta</I> value of a <B>MouseWheel</B> event.  The
<I>delta</I> value represents the rotation units the mouse wheel has
been moved.  On Windows 95 &amp; 98 systems the smallest value for the
delta is 120.  Future systems may support higher resolution values for
the delta.  The sign of the value represents the direction the mouse
wheel was scrolled.
<P><DT><A NAME="M45"><B>%E</B></A><DD>
The <I>send_event</I> field from the event.  Valid for all event types.
<B>0</B> indicates that this is a
&#8220;normal&#8221;
event, <B>1</B> indicates that it is a
&#8220;synthetic&#8221;
event generated by <B>SendEvent</B>.
<P><DT><A NAME="M46"><B>%K</B></A><DD>
The keysym corresponding to the event, substituted as a textual
string.  Valid only for <B>KeyPress</B> and <B>KeyRelease</B> events.
<P><DT><A NAME="M47"><B>%N</B></A><DD>
The keysym corresponding to the event, substituted as a decimal
number.  Valid only for <B>KeyPress</B> and <B>KeyRelease</B> events.
<P><DT><A NAME="M48"><B>%P</B></A><DD>
The name of the property being updated or deleted (which
may be converted to an XAtom using <B><A HREF="../TkCmd/winfo.htm">winfo atom</A></B>.) Valid
only for <B>Property</B> events.
<P><DT><A NAME="M49"><B>%R</B></A><DD>
The <I>root</I> window identifier from the event.  Valid only for
events containing a <I>root</I> field.
<P><DT><A NAME="M50"><B>%S</B></A><DD>
The <I>subwindow</I> window identifier from the event,
formatted as a hexadecimal number.
Valid only for events containing a <I>subwindow</I> field.
<P><DT><A NAME="M51"><B>%T</B></A><DD>
The <I>type</I> field from the event.  Valid for all event types.
<P><DT><A NAME="M52"><B>%W</B></A><DD>
The path name of the window to which the event was reported (the
<I>window</I> field from the event).  Valid for all event types.
<P><DT><A NAME="M53"><B>%X</B>, <B>%Y</B></A><DD>
The <I>x_root</I> and  <I>y_root</I> fields from the event.
If a virtual-root window manager is being used then the substituted
values are the corresponding x-coordinate and y-coordinate in the virtual root.
Valid only for
<B>ButtonPress</B>, <B>ButtonRelease</B>, <B>KeyPress</B>, <B>KeyRelease</B>,
and <B>Motion</B> events.
Same meaning as <B>%x</B> and <B>%y</B>, except relative to the (virtual) root
window.
<P></DL>
<P>
The replacement string for a %-replacement is formatted as a proper
Tcl list element.
This means that spaces or special characters such as <B>$</B> and
<B>{</B> may be preceded by backslashes.
This guarantees that the string will be passed through the Tcl
parser when the binding script is evaluated.
Most replacements are numbers or well-defined strings such
as <B>Above</B>;  for these replacements no special formatting
is ever necessary.
The most common case where reformatting occurs is for the <B>%A</B>
substitution.  For example, if <I>script</I> is
<PRE><B>insert %A</B></PRE>
and the character typed is an open square bracket, then the script
actually executed will be
<PRE><B>insert &#92;[</B></PRE>
This will cause the <B>insert</B> to receive the original replacement
string (open square bracket) as its first argument.
If the extra backslash had not been added, Tcl would not have been
able to parse the script correctly.
<H3><A NAME="M54">MULTIPLE MATCHES</A></H3>
It is possible for several bindings to match a given X event.
If the bindings are associated with different <I>tag</I>'s,
then each of the bindings will be executed, in order.
By default, a binding for the widget will be executed first, followed
by a class binding, a binding for its toplevel, and
an <B>all</B> binding.
The <B><A HREF="../TkCmd/bindtags.htm">bindtags</A></B> command may be used to change this order for
a particular window or to associate additional binding tags with
the window.
<P>
The <B><A HREF="../TclCmd/continue.htm">continue</A></B> and <B><A HREF="../TclCmd/break.htm">break</A></B> commands may be used inside a
binding script to control the processing of matching scripts.
If <B><A HREF="../TclCmd/continue.htm">continue</A></B> is invoked, then the current binding script
is terminated but Tk will continue processing binding scripts
associated with other <I>tag</I>'s.
If the <B><A HREF="../TclCmd/break.htm">break</A></B> command is invoked within a binding script,
then that script terminates and no other scripts will be invoked
for the event.
<P>
If more than one binding matches a particular event and they
have the same <I>tag</I>, then the most specific binding
is chosen and its script is evaluated.
The following tests are applied, in order, to determine which of
several matching sequences is more specific:
<P>
<OL class="multiple matches">
<LI value="a">
an event pattern that specifies a specific button or key is more specific
than one that does not;
<P><LI value="b">
a longer sequence (in terms of number
of events matched) is more specific than a shorter sequence;
<P><LI value="c">
if the modifiers specified in one pattern are a subset of the
modifiers in another pattern, then the pattern with more modifiers
is more specific.
<P><LI value="d">
a virtual event whose physical pattern matches the sequence is less
specific than the same physical pattern that is not associated with a
virtual event.
<P><LI value="e">
given a sequence that matches two or more virtual events, one
of the virtual events will be chosen, but the order is undefined.
<P></OL>
<P>
If the matching sequences contain more than one event, then tests
(c)-(e) are applied in order from the most recent event to the least recent
event in the sequences.  If these tests fail to determine a winner, then the
most recently registered sequence is the winner.
<P>
If there are two (or more) virtual events that are both triggered by the
same sequence, and both of those virtual events are bound to the same window
tag, then only one of the virtual events will be triggered, and it will
be picked at random:
<PRE>event add &lt;&lt;Paste&gt;&gt; &lt;Control-y&gt;
event add &lt;&lt;Paste&gt;&gt; &lt;Button-2&gt;
event add &lt;&lt;Scroll&gt;&gt; &lt;Button-2&gt;
<B>bind</B> Entry &lt;&lt;Paste&gt;&gt; {puts Paste}
<B>bind</B> Entry &lt;&lt;Scroll&gt;&gt; {puts Scroll}</PRE>
If the user types Control-y, the <B>&lt;&lt;Paste&gt;&gt;</B> binding
will be invoked, but if the user presses button 2 then one of
either the <B>&lt;&lt;Paste&gt;&gt;</B> or the <B>&lt;&lt;Scroll&gt;&gt;</B> bindings will
be invoked, but exactly which one gets invoked is undefined.
<P>
If an X event does not match any of the existing bindings, then the
event is ignored.
An unbound event is not considered to be an error.
<H3><A NAME="M55">MULTI-EVENT SEQUENCES AND IGNORED EVENTS</A></H3>
When a <I>sequence</I> specified in a <B>bind</B> command contains
more than one event pattern, then its script is executed whenever
the recent events (leading up to and including the current event)
match the given sequence.  This means, for example, that if button 1 is
clicked repeatedly the sequence <B>&lt;Double-ButtonPress-1&gt;</B> will match
each button press but the first.
If extraneous events that would prevent a match occur in the middle
of an event sequence then the extraneous events are
ignored unless they are <B>KeyPress</B> or <B>ButtonPress</B> events.
For example, <B>&lt;Double-ButtonPress-1&gt;</B> will match a sequence of
presses of button 1, even though there will be <B>ButtonRelease</B>
events (and possibly <B>Motion</B> events) between the
<B>ButtonPress</B> events.
Furthermore, a <B>KeyPress</B> event may be preceded by any number
of other <B>KeyPress</B> events for modifier keys without the
modifier keys preventing a match.
For example, the event sequence <B>aB</B> will match a press of the
<B>a</B> key, a release of the <B>a</B> key, a press of the <B>Shift</B>
key, and a press of the <B>b</B> key:  the press of <B>Shift</B> is
ignored because it is a modifier key.
Finally, if several <B>Motion</B> events occur in a row, only
the last one is used for purposes of matching binding sequences.
<H3><A NAME="M56">ERRORS</A></H3>
If an error occurs in executing the script for a binding then the
<B><A HREF="../TclCmd/bgerror.htm">bgerror</A></B> mechanism is used to report the error.
The <B><A HREF="../TclCmd/bgerror.htm">bgerror</A></B> command will be executed at global level
(outside the context of any Tcl procedure).
<H3><A NAME="M57">EXAMPLES</A></H3>
Arrange for a string describing the motion of the mouse to be printed
out when the mouse is double-clicked:
<PRE><B>bind</B> . &lt;Double-1&gt; {
    puts &quot;hi from (%x,%y)&quot;
}</PRE>
<P>
A little GUI that displays what the keysym name of the last key
pressed is:
<PRE>set keysym &quot;Press any key&quot;
pack [label .l -textvariable keysym -padx 2m -pady 1m]
<B>bind</B> . &lt;Key&gt; {
    set keysym &quot;You pressed %K&quot;
}</PRE>
<H3><A NAME="M58">SEE ALSO</A></H3>
<B><A HREF="../TclCmd/bgerror.htm">bgerror</A></B>, <B><A HREF="../TkCmd/bindtags.htm">bindtags</A></B>, <B><A HREF="../TkCmd/event.htm">event</A></B>, <B><A HREF="../TkCmd/focus.htm">focus</A></B>, <B><A HREF="../TkCmd/grab.htm">grab</A></B>, <B><A HREF="../TkCmd/keysyms.htm">keysyms</A></B>
<H3><A NAME="M59">KEYWORDS</A></H3>
<A href="../Keywords/B.htm#binding">binding</A>, <A href="../Keywords/E.htm#event">event</A>
<div class="copy">Copyright &copy; 1990 The Regents of the University of California.
Copyright &copy; 1994-1996 Sun Microsystems, Inc.
Copyright &copy; 1998 by Scriptics Corporation.
</div>
</BODY></HTML>
