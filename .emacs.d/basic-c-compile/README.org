#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Basic C compile
#+AUTHOR: Nick Spain
#+EMAIL: nicholas.spain96@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)

This is my first Emacs package so any and all constructive criticism
is appreciated.

This is a script for the basic actions involved in compiling and
running a C file.  It will be able to create a basic Makefile of the
form:

#+BEGIN_SRC makefile
  CC = <compiler set by basic-c-compile-compiler>
  INFILE= <file-name>.c
  OUTFILE= <file-name>.o

  build: %(INFILE)
      $(CC) -Wall $(INFILE) -o $(OUTFILE)

  clean:
      rm -rf *.o

  rebuild: clean build
#+END_SRC

*Note*: =INFILE= can also be a list of files depending on what
=basic-c-compile-all-files= is set to.

This package allows three commands to be called: =basic-c-compile-file=,
=basic-c-compile-makefile= and =basic-c-compile-run-c=.

** basic-c-compile-file

This command initially checks if you want to compile with or without a
Makefile (just press 'y' or 'n').  If you press 'y', it will check for
a Makefile in the file's directory. If there is one present, it will
check for of the form =<file-name>.o=. Upon finding one, the package
will run the command =make rebuild=. This assumes the Makefile is
structured as expected. If no file is found, then =make build= will be
run. If you choose to run without a Makefile,
=<compiler> <flags> -o <file-name>.<extension> <file-name>.c= will be run.

<compiler> =  =basic-c-compiler-compiler=
<flags> = =basic-c-compile-compiler-flags=
<extension> = =basic-c-compiler-outfile-extension=

** basic-c-compile-makefile

This command creates a Makefile in the form shown above.

If the variable =basic-c-compile-all-files= is set to "all", then all
the files in the directory with the =.c= extension will be
compiled. If set to "selected" you will be prompted to write a list of
the files to be compiled. The files should be separated by a space. If
=basic-c-compile-all-files= is set to anything else, only the current
file will be included.

** basic-c-compile-run-c

This command runs the output file =<file-name>.<extension= with
=./<file-name>.<extension>=.

** Settings

All customisable setting can be found in the customisation menu
(=M-x customize-variable=). They are in the group =basic-c-compile= which is in the =tools= section. You can also change them in your init file with:
=(setq <variable-name> <variable-value>)=.

1. =basic-c-compile-compiler=: This chooses the compiler that is used
   to compile the file(s). By default it is "gcc".

2. =basic-c-compile-all-files=: This is explained above but just
   quickly, it allows you to choose which files are compiled. By
   default it is "all".

3. =basic-c-compile-compiler-flags=: This is one string containing all
   flags files are compiled with. By default it is "-Wall".

4. =basic-c-compiler-auto-comp=: This is a boolean variable defining
   whether or not out of date binary files are compiled. If it is
   true, then when =basic-c-compile-run-c= is called, it will check if
   the file's binary is up to date. If it isn't, then
   =basic-c-compile-file= will be called.

5. =basic-c-compile-outfile-extension=: This is a string or nil which
   sets the extension for compiled files. By default it is ".o" to all
   =basic-c-compile-make-clean= to work without any changes, however,
   the compiled file normally has no extension. To change it to this
   just set the variable to nil. If you change this variable, you must
   also change =basic-c-compile-make-clean=.

6. =basic-c-compile-make-clean=: This is a string which is put in the
   Makefile and called from the command line with =make clean=. By
   default it is "rm -f *.o" but you can change it to whatever suits
   you.


** Example usage

This example below is how I have the package setup for me. In my init
file I have:

#+BEGIN_SRC emacs-lisp
  (require basic-c-compile)
  (setq basic-c-compiler "gcc-6"
        basic-c-compile-all-files nil
        basic-c-compile-compiler-flags "-Wall -Werror -std=c11"
        basic-c-compile-outfile-extension nil
        basic-c-compile-make-clean "gfind . -type f -executable -delete")
#+END_SRC

*NOTE:* =gfind= is part of GNU findutils. I downloaded it using with:
#+BEGIN_SRC shell
  brew install findutils
#+END_SRC

I leave the =basic-c-compile-auto-comp= option as its default (t)
because that's what works best for me but you're more than welcome to
change it.

The main issue I find with this workflow is for programs that require
file redirection because the e-shell doesn't support this. Basically,
that's the only time that I switch to a shell outside of Emacs.

* Issues

Currently when you run =basic-c-compile-run-c= it hangs after
=basic-c-compile-file=. To get passed this just press enter and it
will continue. I am trying to sort this out though.
