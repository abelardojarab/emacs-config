@node Extending EDE
@chapter Extending @ede{}

@@TODO - This section was originally written for extending the
@b{proj} project type, or the project that creates @file{Project.ede}
files and creates @file{Makefiles} for you.  Mixed in is doc about
creating new wrapper projects too.   This section needs an overhaul to
make it easier to know what to do.  In the meantime, Carry on.

--

This chapter is intended for users who want to write new parts or fix
bugs in @ede{}.  A knowledge of Emacs Lisp, and some @eieio{}(CLOS) is
required.

@ede{} uses @eieio{}, the CLOS package for Emacs, to define two object
superclasses, specifically the PROJECT and TARGET.  All commands in
@ede{} are usually meant to address the current project, or current
target.

All specific projects in @ede{} derive subclasses of the @ede{}
superclasses.  In this way, specific behaviors such as how a project
is saved, or how a target is compiled can be customized by a project
author in detail.  @ede{} communicates to these project objects via an
API using methods.  The commands you use in @ede{} mode are high-level
functional wrappers over these methods.  @xref{Top,,, eieio, EIEIO manual}. For
details on using @eieio{} to extending classes, and writing methods.

For the @code{ede-project} type, the core target class is called
@code{ede-proj-target}.  Inheriting from this will give you everything
you need to start, including adding your sources into the makefile.  If
you also need additional rules in the makefile, you will want to inherit
from @code{ede-proj-target-makefile} instead.  You may want to also add
new fields to track important information.

If you are building currently unsupported code into a program or shared
library, it is unlikely you need a new target at all.  Instead you
would need to create a new compiler or linker object that compiles
source code of the desired type. @ref{Compiler and Linker objects}.

Once your new class exists, you will want to fill in some basic methods.
See the @file{ede-skel.el} file for examples of these.  The files
@file{ede-proj-info.el} and @file{ede-proj-elisp.el} are two interesting
examples.

@menu
* Development Overview::
* Detecting a Project::
* User interface methods::      Methods associated with keybindings
* Base project methods::        The most basic methods on @ede{} objects.
* Sourcecode objects::          Defining new sourcecode classes.
* Compiler and Linker objects::  Defining new compilers and linkers.
@end menu

@node Development Overview
@section Development Overview

@ede{} is made up of a series of classes implemented with @eieio{}.
These classes define an interface that can be used to create different
types of projects.

@ede{} defines two superclasses which are @code{ede-project} and
@code{ede-target}.  All commands in @ede{} are usually meant to
address the current project, or current target.

All specific projects in @ede{} derive subclasses of the @ede{} superclasses.
In this way, specific behaviors such as how a project is saved, or how a
target is compiled can be customized by a project author in detail.  @ede{}
communicates to these project objects via an API using methods.  The
commands you use in @ede{} mode are high-level functional wrappers over
these methods.

Some example project types are:

@table @code
@item project-am
Automake project which reads existing Automake files.
@item ede-proj-project
This project type will create @file{Makefiles},
or @file{Makefile.am} files to compile your project.
@item ede-linux
This project type will detect linux source trees.
@item ede-emacs
This project will detect an Emacs source tree.
@end table

There are several other project types as well.

The first class you need to know to create a new project type is
@code{ede-project-autoload}.  New instances of this class are needed
to define how Emacs associates different files/buffers with different
project types.  All the autoloads are kept in the variable
@code{ede-project-class-files}.

The next most important class to know is @code{ede-project}.  This is
the baseclass defines how all projects behave.  The basic pattern for
a project is that there is one project per directory, and the topmost
project or directory defines the project as a whole.

Key features of @code{ede-project} are things like name and version
number.  It also holds a list of @code{ede-target} objects and a list
of sub projects, or more @code{ede-project} objects.

New project types must subclass @code{ede-project} to add special
behavior. New project types also need to subclass @code{ede-target} to
add specialty behavior.

In this way, the common @ede{} interface is designed to work against
@code{ede-project}, and thus all subclasses.

@code{ede-project} subclasses @code{ede-project-placeholder}.  This is
the minimum necessary project needed to be cached between runs of
Emacs.  This way, Emacs can track all projects ever seen, without
loading those projects into memory.

Here is a high-level UML diagram for the @ede{} system created with @cogre{}..

@example
+-----------------------+        +-----------------------+
|                       |        |ede-project-placeholder|
|ede-project-class-files|        +-----------------------+
|                       |        +-----------------------+
+-----------------------+        +-----------------------+
           /\                                ^
           \/                               /_\
            |                                |
 +--------------------+                +-----------+         +----------+
 |ede-project-autoload|                |ede-project|         |ede-target|
 +--------------------+<>--------------+-----------+<>-------+----------+
 +--------------------+                +-----------+         +----------+
 +--------------------+                +-----------+         +----------+
                                             ^
                                            /_\
                                             |
                       +---------------------+-----------------+
                       |                     |                 |
                       |                     |                 |
                       |                     |                 |
              +----------------+   +-------------------+  +---------+
              |ede-proj-project|   |project-am-makefile|  |ede-emacs|
              +----------------+   +-------------------+  +---------+
              +----------------+   +-------------------+  +---------+
              +----------------+   +-------------------+  +---------+
@end example


@node Detecting a Project
@section Detecting a Project

Project detection happens with the list of @code{ede-project-autoload}
instances stored in @code{ede-project-class-files}.  The full project
detection scheme works like this:

@table @asis
@item Step 1:
@code{find-file-hook} calls @code{ede-turn-on-hook} on BUFFER.
@item Step 2:
@code{ede-turn-on-hook} turns on @code{ede-minor-mode}
@item Step 3:
@code{ede-minor-mode} looks to see if BUFFER is associated with any
open projects.  If not, it calls @code{ede-load-project-file} to find
a project associated with the current directory BUFFER is in.
@item Step 4:
@code{ede-minor-mode} associates the found project with the current
buffer with a series of variables, such as @code{ede-object}, and
@code{ede-object-project} and @code{ede-object-root-project}.
@end table

Once a buffer is associated, @ede{} minor mode commands will operate
on that buffer.

The function @code{ede-load-project-file} is at the heart of detecting
projects, and it works by looping over all the known project autoload
types in @code{ede-project-autoload} using the utility
@code{ede-directory-project-p}.

The function @code{ede-directory-project-p} will call
@code{ede-dir-to-projectfile} on every @code{ede-project-autoload}
until one of them returns true.  The method
@code{ede-dir-to-projectfile} in turn gets the @code{:proj-file} slot
from the autoload.  If it is a string (i.e., a project file name), it
checks to see if that exists in BUFFER's directory.  If it is a
function, then it calls that function and expects it to return a file
name or nil.  If the file exists, then this directory is assumed to be
part of a project, and @code{ede-directory-project-p} returns the
instance of @code{ede-project-autoload} that matched.

If the current directory contains the file @code{.ede-ignore} then
that directory is automatically assumed to contain no projects, even
if there is a matching pattern.  Use this type of file in a directory
that may contain many other sub projects, but still has a Makefile of
some sort.

If the current directory is a project, then @ede{} scans upwards till
it finds the top of the project.  It does this by calling
@code{ede-toplevel-project}.  If this hasn't already been discovered,
the directories as scanned upward one at a time until a directory with
no project is found.  The last found project becomes the project
root.  If the found instance of @code{ede-project-autoload} has a
valid @code{proj-root} slot value, then that function is called instead
of scanning the project by hand.  Some project types have a short-cut
for determining the root of a project, so this comes in handy.

Getting back to @code{ede-load-project-file}, this now has an instance
of @code{ede-project-autoload}.  It uses the @code{load-type} slot to
both autoload in the project type, and to create a new instance of the
project type found for the root of the project.  That project is added
to the global list of all projects.  All subprojects are then created
and assembled into the project data structures.


@node User interface methods
@section User interface methods

These methods are core behaviors associated with user commands.
If you do not implement a method, there is a reasonable default that
may do what you need.

@table @code
@item project-add-file
Add a file to your project.  Override this if you want to put new
sources into different fields depending on extension, or other details.
@item project-remove-file
Reverse of project-add-file.
@item project-compile-target
Override this if you want to do something special when the user
"compiles" this target.
@item project-debug-target
What to do when a user wants to debug your target.
@item project-update-version
Easily update the version number of your project.
@item project-edit-file-target
Edit the file the project's information is stored in.
@item project-new-target
Create a new target in a project.
@item project-delete-target
Delete a target from a project.
@item project-make-dist
Make a distribution (tar archive) of the project.
@item project-rescan
Rescan a project file, changing the data in the existing objects.
@end table

@node Base project methods
@section Base project methods

These methods are important for querying base information from project
and target types:

@table @code
@item ede-name
Return a string that is the name of this target.
@item ede-target-name
Return a string that is the name of the target used by a Make system.
@item ede-description
A brief description of the project or target.  This is currently used
by the @samp{ede-speedbar} interface.
@item ede-want-file-p
Return non-nil if a target will accept a given file.
It is generally unnecessary to override this.  See the section on source
code.
@item ede-buffer-mine
Return non-nil if a buffer belongs to this target.  Used during
association when a file is loaded.  It is generally unnecessary to
override this unless you keep auxiliary files.
@end table

These methods are used by the semantic package extensions.
@xref{Top,,, semantic, Semantic manual}.

@table @code
@item ede-buffer-header-file
Return a header file belonging to a given buffer.  Prototypes are place
there when appropriate
@item ede-buffer-documentation-files
Return the documentation file information about this file would be
stored in.
@item ede-documentation
List all documentation a project or target is responsible for.
@end table

@node Sourcecode objects
@section Sourcecode objects

@ede{} projects track source file / target associates via source code
objects.  The definitions for this is in @file{ede-source.el}.  A source
code object contains methods that know how to identify a file as being
of that class, (i.e., a C file ends with @file{.c}).  Some targets can
handle many different types of sources which must all be compiled
together.  For example, a mixed C and C++ program would have
instantiations of both sourcecode types.

When a target needs to know if it will accept a source file, it
references its list of source code objects.  These objects then make
that decision.

Source code objects are stored in the target objects as a list of
symbols, where the symbol's value is the object.  This enables the
project save file mechanism to work.

Here is an example for an instantiation of an Emacs Lisp source code object:

@example
(defvar ede-source-emacs
  (ede-sourcecode "ede-emacs-source"
                  :name "Emacs Lisp"
                  :sourcepattern "\\.el$"
                  :garbagepattern '("*.elc"))
  "Emacs Lisp source code definition.")
@end example

If you want to recycle parts of an existing sourcecode object, you can
clone the original, and then just tweak the parts that are different.
For example:

@example
(defvar ede-source-emacs-autoload
  (clone ede-source-emacs "ede-source-emacs-autoload"
         :name "Emacs Lisp Autoload"
         :sourcepattern "-loaddefs\\.el")
  "Emacs Lisp autoload source code.")
@end example

In this case, the garbage pattern is the same.

@node Compiler and Linker objects
@section Compiler and Linker objects

In order for a target to create a @file{Makefile}, it must know how to
compile the sources into the program or desired data file, and
possibly link them together.

A compiler object instantiation is used to associate a given target
with a given source code type.  Some targets can handle many types of
sources, and thus has many compilers available to it.  Some targets
may have multiple compilers for a given type of source code.

@ede{} will examine the actual source files in a target, cross reference
that against the compiler list to come up with the final set of
compilers that will be inserted into the Makefile.

Compiler instantiations must also insert variables specifying the
compiler it plans to use, in addition to creating Automake settings for
@file{configure.ac} when appropriate.

Compiler objects are stored in the target objects as a list of
symbols, where the symbols value is the object.  This enables the
project output mechanism to work more efficiently.

Targets will also have a special "compiler" slot which lets a user
explicitly choose the compiler they want to use.

Here is an example for texinfo:

@example
(defvar ede-makeinfo-compiler
  (ede-compiler
   "ede-makeinfo-compiler"
   :name "makeinfo"
   :variables '(("MAKEINFO" . "makeinfo"))
   :commands '("makeinfo -o $@ $<")
   :autoconf '(("AC_CHECK_PROG" . "MAKEINFO, makeinfo"))
   :sourcetype '(ede-makeinfo-source)
   )
  "Compile texinfo files into info files.")
@end example

When creating compiler instantiations, it may be useful to @code{clone}
an existing compiler variable.  Cloning allows you to only modify
parts of the original, while keeping the rest of the same.
Modification of the original will result in the clone also being
changed for shared value slots.

The second important object is the linker class.  The linker is similar
to the compiler, except several compilers might be used to create some
object files, and only one linker is used to link those objects together.

See @file{ede-proj-obj.el} for examples of the combination.
