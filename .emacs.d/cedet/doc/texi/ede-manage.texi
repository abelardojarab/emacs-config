@node Quick Start - from scratch
@chapter Quick Start - Create project files from scratch

If you are starting a new managed project and would like @ede{} to
create your build files for you using C/C++, Fortran, or Emacs Lisp,
you just need enable @ede{} and use @code{ede-new} to get started.

To enable @ede{} in your @file{.emacs} file.

@example
(global-ede-mode 1)
@end example

Once you have @ede{} enabled, you can create a project.  This chapter
provides an example C++ project that will create Automake files for
compilation.  For complete details, see @ref{Managed Projects}.

@section Step 1: Create root directory

First, lets create a directory for our project.  For this example,
we'll start with something in @file{/tmp}.

@example
C-x C-f /tmp/myproject/README RET
M-x make-directory RET RET
@end example

Now put some plain text in your README file to start.

Now, lets create the project:

@example
M-x ede-new RET Automake RET myproject RET
@end example


Nothing visible happened, but if you use @code{dired} to look at the
directory, you should see this:

@example
  /tmp/myproject:
  total used in directory 32 available 166643476
  drwxr-xr-x  2 zappo users  4096 2012-02-23 22:10 .
  drwxrwxrwt 73 root  root  20480 2012-02-23 22:10 ..
  -rw-r--r--  1 zappo users   195 2012-02-23 22:10 Project.ede
  -rw-r--r--  1 zappo users    10 2012-02-23 22:09 README
@end example

@section Step 2: Create Subdirectories and Files

We'll make a more complex project, so use dired to create some more
directories using the @kbd{+} key, and typing in new directories:

@example
+ include RET
+ src RET
@end example

Now I'll short-cut in this tutorial.  Create the following files:

@file{include/myproj.hh}
@example
/** myproj.hh ---
 */

#ifndef myproj_hh
#define myproj_hh 1

#define IMPORTANT_MACRO 1

int my_lib_function();

#endif // myproj_hh
@end example


@file{src/main.cpp}
@example
/** main.cpp ---
 */

#include <iostream>
#include "myproj.hh"

int main() @{

@}

#ifdef IMPORTANT_MACRO
int my_fcn() @{

@}
#endif
@end example

@file{src/mylib.cpp}
@example
/** mylib.cpp ---
 *
 * Shared Library to build
 */

int my_lib_function() @{

@}
@end example

@section Step 3: Create subprojects

@ede{} needs subdirectories to also have projects in them.  You can
now create those projects.

With @file{main.cpp} as your current buffer, type:

@example
M-x ede-new RET Automake RET src RET
@end example

and in @file{myproj.hh} as your current buffer, type:

@example
M-x ede-new RET Automake RET include RET
@end example

These steps effectively only create the Project.ede file in which you
will start adding targets.

@section Step 4: Create targets

In order to build a program, you must have targets in your @ede{}
Projects.  You can create targets either from a buffer, or from a
@code{dired} directory buffer.

Note: If for some reason a directory list buffer, or file does not have the
@samp{Project} menu item, or if @ede{} keybindings don't work, just
use @kbd{M-x revert-buffer RET} to force a refresh.  Sometimes
creating a new project doesn't restart buffers correctly.

Lets start with the header file.  In @file{include/myproj.hh}, you
could use the menu, but we will now start using the @ede{} command prefix
which is @kbd{C-c .}.

@example
C-c . t includes RET miscellaneous RET y
@end example


This creates a misc target for holding your includes, and then adds
myproj.hh to the target.  Automake (the tool) has better ways to do
this, but for this project, it is sufficient.

Next, visit the @file{src} directory using dired.  There should be a
@samp{Project} menu.   You can create a new target with

@example
. t myprogram RET program RET
@end example

Note that @kbd{. t} is a command for creating a target.  This command
is also in the menu.  This will create a target that will build a
program.  If you want, visit @file{Project.ede} to see the structure
built so far.

Next, place the cursor on @file{main.cpp}, and use @kbd{. a} to add
that file to your target.

@example
. a myprogram RET
@end example

Note that these prompts often have completion, so you can just press
@kbd{TAB} to complete the name @file{myprogram}.

If you had many files to add to the same target, you could mark them
all in your dired buffer, and add them all at the same time.

Next, do the same for the library by placing the cursor on @file{mylib.cpp}.

@example
. t mylib RET sharedobject RET
. a mylib RET
@end example

@section Step 5: Compile, and fail

Next, we'll try to compile the project, but we aren't done yet, so it
won't work right away.

Visit @file{/tmp/myproject/Project.ede}.  We're starting here because
we don't have any program files in this directory yet.  Now we can use
the compile command:

@example
C-c . C
@end example

Because this is the very first time, it will create a bunch of files
for you that are required by Automake.  It will then use automake to
build the support infrastructure it needs.  This step is skipped if
you choose just a @file{Makefile} build system.

After the Automake init, it runs compile.  You will immediately
discover the error in main.cpp can't find @file{myproj.hh}.  We need
to go fix this.

@section Step 6: Customizing your project

To fix the failed compile, we need to add
@file{/tmp/myproject/include} to the include path.

Visit @file{main.cpp}.

@example
M-x customize-project RET
@end example

Select the @samp{[Settings]} subgroup of options.  Under
@samp{Variable :} click @samp{[INS]}.  At this point, you need to be
somewhat savvy with Automake.  Add a variable named @samp{CPPFLAGS},
and set the value to @samp{../include}.

You should see something like this:

@example
Variables :
[INS] [DEL] Cons-cell:
            Name: AM_CPPFLAGS
            Value: -I../include
[INS]
Variables to set in this Makefile.
@end example

Click @samp{[Apply]}.  Feel free to visit @file{Project.ede} to see
how it changed the config file.

Compile the whole project again with @kbd{C-c . C} from
@file{main.cpp}.  It should now compile.

@section Step 7: Shared library dependency

Note: Supporting shared libraries for Automake in this way is easy,
but doing so from a project of type Makefile is a bit tricky.  If you
are creating shared libraries too, stick to Automake projects.

Next, lets add a dependency from @file{main.cpp} on our shared
library.  To do that, update main like this:

@example
int main() @{

  my_lib_function();

@}
@end example

Now compile with:

@example
C-c . c
@end example

where the lower case @kbd{c} compiles just that target.  You should
see an error.

This time, we need to add a dependency from @file{main.cpp} on our shared
library.  To do that, we need to customize our target instead of the
project.  This is because variables such as the include path are
treated globally, whereas dependencies for a target are target specific.

@example
M-x customize-target RET
@end example

On the first page, you will see an Ldlibs-local section.  Add mylib to
it by first clicking @samp{[INS]}, and they adding the library.  It
should look like this:

@example
Ldlibs-Local :
[INS] [DEL] Local Library: libmylib.la
[INS]
Libraries that are part of this project. [Hide Rest]
The full path to these libraries should be specified, such as:
../lib/libMylib.la  or ../ar/myArchive.a
@end example

You will also see other variables for library related flags and system
libraries if you need them.  Click @samp{[Accept]}, and from
@file{main.cpp}, again compile the whole project to force all
dependent elements to compile:

@example
C-c . C
@end example

@section Step 8: Run your program

You can run your program directly from @ede{}.

@example
C-c . R RET RET
@end example

If your program takes command line arguments, you can type them in
when it offers the command line you want to use to run your program.

@node Managed Projects
@chapter Managed Projects

A managed project is one where everything needed to compile and
distribute your project is handled by @ede{}.  These projects are
created with @code{ede-new}, files are grouped into targets, and
compiler flags are setup through @ede{}.  All Makefiles and build
process files are then created for you.

Managed projects are useful for users just starting out, and have
relatively simple requirements on the build system.  It is also OK to
use @ede{} to get started, and hand-edit some parts of your
configure.ac and add custom rules through the @ede{} customization
interface as you learn more about build systems, or to just eventually
delete @file{Project.ede} and start hand editing the generated files.

@menu
* Creating a project::          Creating a project.
* Modifying your project::      Adding and removing files and targets.
* Building and Debugging::      Initiating a build or debug session.
                                your build environment.
@end menu  

@node Creating a project
@section Creating a project

To create a new project, first visit a file that you want to include
in that project.  If you have a hierarchy of directories, first visit
a file in the topmost directory.  From this buffer, type @kbd{M-x
ede-new}, or click on the @samp{Create Project} item in the
@samp{Development} menu.

The @command{ede-new} command prompts for the type of project you
would like to create.  It also prompts you for a name.  The name is
what will be used when creating distribution files.


@itemize
@item
For the @samp{Make} project type, @ede{} creates a @dfn{project file},
called @file{Project.ede}, in each project directory.  Information
about the project is stored in this file.  This project autogenerates
a @file{Makefile}.

@item
For the @samp{Automake} project type, @ede{} creates a
@file{Project.ede} project file similar to a @samp{Make} project.
Unlike a @samp{Make} project, this project autogenerates a
@file{Makefile.am} file.  @ede{} handles the Automake bootstrapping
routines, which import and maintain a @file{configure.am} script and
other required files.
@end itemize

A subproject is merely a project in a subdirectory of another project.
You can create a subproject by using the @command{ede-new} command (or
the @samp{Create Project} menu item), while visiting a buffer in a
subdirectory of the project root.  This new project is automatically
added to the parent project, and will be automatically loaded when
@ede{} reads the parent project.

When using a project command that involves a makefile, @ede{} uses
the top-most project's makefile as a starting place for the build.  How
the toplevel project handles subprojects in the build process is
dependent on that project's type.

@node Modifying your project
@section Modifying your project

In this chapter, we describe the generic features for manipulating
projects, including the targets and files within them.  Subsequent
chapters, which describe specific project types, will provide more
detailed information about exactly what these features do.

@menu
* Add/Remove target::
* Add/Remove files::
* Customize Features::
* Project Local Variables::
* EDE Project Features::
@end menu

@node Add/Remove target
@subsection Add/Remove target

To create a new target, type @kbd{C-c . t} (@code{ede-new-target}) or
use the @samp{Add Target} menu item in the @samp{Project Options}
submenu.  This prompts for a target name, and adds the current buffer
to that target.

The @command{ede-new-target} command also prompts for a @dfn{target
type}.  Each target type has its own build process and class of files
that it will accept.

To remove a target from the project, type @kbd{M-x ede-delete-target},
or use the @samp{Remove Target} menu item in the @samp{Project
Options} submenu.

@node Add/Remove files
@subsection Add/Remove files

To add the current file to an existing target, type @kbd{C-c . a}
(@code{ede-add-file}), or use the @samp{Add File} menu item in the
@samp{Target Options} submenu.

You can add a file to more than one target; this is OK.

To remove the current file from a target, type @kbd{C-c . d}
(@code{ede-remove-file}), or use the @samp{Remove File} menu item
in the @samp{Target Options} submenu.  If the file belongs to multiple
targets, this command prompts for each target it could be removed
from.

While working in a project, if you visit a file that is not part of an
existing target, @ede{} automatically prompts for a target.  If you do
not wish to add the file to any target, you can choose @samp{none}.
You can customize this behavior with the variable
@command{ede-auto-add-method}.

@node Customize Features
@subsection Customize Features

A project, and its targets, are objects using the @samp{EIEIO} object
system.  @xref{Top,,,eieio,EIEIO manual}.  These objects have data
fields containing important information related to your work.

If the high-level functions aren't enough, you can tweak all
user-customizable fields at any time by running the command
@command{customize-project} or @command{customize-target}.  This loads
the current project or target into a customization buffer, where you
can tweak individual slots.  This is usually necessary for complex
projects.

Some project modes do not have a project file, but directly read a
Makefile or other existing file.  Instead of directly editing the
object, you can edit the file by typing @kbd{C-c . e}
(@code{ede-edit-file-target}).  You should ``rescan'' the project
afterwards (@pxref{Miscellaneous commands}).

@node Project Local Variables
@subsection Project Local Variables

EDE projects can store and manager project local variables.  The
variables are stored in the project, and will be restored when a
project reloads.

Projects which are not stored on disk WILL NOT restore your project
local variables later.

You can use @ref{Customize Features} to of the project to edit the
project local variables.  They are under the 'Settings' group as
``Project Local Variables''.

You can also use @kbd{M-x ede-set} to set a new variable local in the
mini buffer.

In multi-level projects such as Automake and Make generating projects,
project local variables are installed from both the TOP most project,
and the local directory's project.  In that way, you can have some
variables across your whole project, and some specific to a
subdirectory.

You can use project local variables to set any Emacs variable so that
buffers belonging to different projects can have different settings.

NOTE: When you use project-local variables with @ref{ede-cpp-root},
the format is an association list.  For example:

@example
(ede-cpp-root-project "SOMENAME"
                       :file "/dir/to/some/file"
                       :local-variables
                       '((grep-command . "grep -nHi -e ")
                         (compile-command . "make -f MyCustomMakefile all")))
@end example

The same is true when you use project-local variables with
@ref{ede-java-root}.  For example:

@example
(ede-java-root-project "SOMENAME"
                       :file "/dir/to/some/file"
                       :local-variables
                       '((grep-command . "grep -nHi -e ")
                         (compile-command . "ant")))
@end example

@node EDE Project Features
@subsection EDE Project Features

This section details user facing features of an @ede{} @samp{Make}
style project.  An @samp{Automake} project has similar options (but a
direct Automake project does not).

To modify any of the specific features mentioned here, you need to
customize the project or target with @command{customize-project} or
@command{customize-target}.

When you are customizing, you are directly manipulating slot values in
@eieio{} objects.  @xref{Extending EDE}, if you are interested in
additional details.

@menu
* Changing Compilers and Flags::
* Configurations::
@end menu

@node Changing Compilers and Flags
@subsubsection Changing Compilers and Flags

Targets that build stuff need compilers.  To change compilers, you
need to customize the desired target.

In the @samp{[Make]} section, you can choose a new compiler or linker
from the list.  If a linker you need is not available, you will need
to create a new one.  @xref{Compiler and Linker objects}.

If an existing compiler or linker is close, but you need to modify
some flag set such as adding an include path you will need to add a
configuration variable.

To start, you should create the basic setup, and construct a makefile
with @command{ede-proj-regenerate}.  Look in the @file{Makefile} to
see what commands are inserted.  Once you have determined the variable
you need to modify, you can add a configuration for it.
@xref{Configurations}.

@node Configurations
@subsubsection Configurations

Configurations specify different ways to build a project.  For
example, you may configure a project to be in ``debug'' mode, or
perhaps in ``release'' mode.

The project, and each target type all have a slot named
@code{configuration-variables}.  To add new variables to a
configuration find this slot in the custom buffer, and insert a new
configuration.  Name it either ``debug'' or ``release'', then insert
some number of name/value pairs to it.

You can have any number of valid configurations too.  To add a new
configuration, customize your project.  Work in the @samp{[Settings]}
block for ``configurations''.  Add a new named configuration here.

To switch between different active configurations, modify the
``configuration default'' slot.

@node Building and Debugging
@section Building and Debugging

@ede{} provides the following ``project-aware'' compilation and
debugging commands:

@table @kbd
@item C-c . c
Compile the current target (@code{ede-compile-target}).
@item C-c . C
Compile the entire project (@code{ede-compile-project}).
@item c-c . D
Debug the current target (@code{ede-debug-target}).
@item M-x ede-make-dist
Build a distribution file for your project.
@end table

These commands are also available from the @samp{Development} menu.
