@node Compilation Database projects
@chapter Compilation Database projects

@i{compdb} projects are created based on information in a
@uref{http://clang.llvm.org/docs/JSONCompilationDatabase.html,compilaton
database}. This is a repository which descritbes the compilation
commands required to build a project. The database is usually
expressed as JSON and can be produced as a file by tools such as
@uref{http://www.cmake.org,CMake}, or generated on-demand by tools
such as @uref{http://martine.github.io/ninja/,Ninja}.

Reading the Compilation Database enables the @i{compdb} project to be
automatically configured from the existing project build
environment. This is especially useful for C and C++ projects which
can be tricky to configure for use with @cedet{} and other libraries.

Some of the other features supported by @i{compdb} projects are:

@itemize @bullet
@item
Read Compilation Database on-demand and provides include paths and
preprocessor symbols to @semantic{}
@item
For GCC-compatible compilers, reads the internal include paths used to
parse standard libraries. There is no need to use
@code{semantic-gcc-setup} @pxref{(semantic)System Include Paths}.
@item
Most @ede{} commands supported, such as @kbd{C-c . c} to build the
current target (source file)
@item
Autoloads based on the presence of a @file{compile_commands.json} file
or @file{ninja.build} file, with no additional configuration typically
required
@item
Supports multiple build configurations (eg Debug, Release) and
corresponding build directories.
@item
Integration with complementary libraries, such as @xref{(flymake)}.
@item
(For Ninja projects only) Automatically generates the compilation
database as required without needing to generate a file.
@item
(For Ninja projects only) Loads and caches available phony build
targets (eg "test") for convenient builds
@end itemize

@menu
* Compilation Database Quickstart::
* Creating Compilation Database Projects::
* Multiple Build Configurations::
* Building compdb Projects::
* Matching source and header files::
* Rescanning the Compilation Database::
* Compilation Database Troubleshooting::

@end menu

@node Compilation Database Quickstart
@section Compilation Database Quickstart

In order to use the @i{compdb} project type, you need to ensure
your project has a compilation database. If you are using
@uref{http://www.cmake.org,CMake} you can do something like the
following:

@example
$ cd .../yourproj
$ cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE .
@end example

This will generate build files in the source directory, as well as a
@file{compile_commands.json} file, which is the compilation database.

Note that if you are using the
@uref{http://martine.github.io/ninja/,Ninja} build tool, you don't
need to generate the @uref{compile_commands.json} file, because ninja
can generate the compilation database dynamically.

By default, @i{compdb} projects are automatically loaded when a
@file{compile_commands.json} file or @file{build.ninja} file is found
in the current directory, or in a parent directory. If you build your
projects in the same directory as your source, no additional
configuration is required.

Now open any of your source files in emacs, and you should see all the
includes correctly parsed. Use @kbd{M-x
semantic-c-describe-environment} to check that all include paths are
recognised correctly. If not, @xref{Compilation Database
Troubleshooting}.

@node Creating Compilation Database Projects
@section Creating Compilation Database Projects

@i{compdb} projects can also be created manually by invoking either
the @code{ede-compdb-project} or @code{ede-ninja-project} functions.

In the most basic case, you can simply set the @code{:file} property
to the relevant compilation database file, and the project will be
loaded from the information in that file.

@lisp
(ede-add-project-to-global-list
 (ede-compdb-project "Myproj" :file "/path/to/src/compile_commands.json"))
@end lisp

The examples above assume that you are building your binaries into the
same directory as the project source code. If you want to use a
different directory for the compilation database, then you can use a
@code{:compdb-file} property in conjunction with a @code{:file}
property, as follows:

@lisp
(ede-add-project-to-global-list
 (ede-compdb-project "Myproj"
                     :file "/path/to/src/CMakeLists.txt"
                     :compdb-file "/path/to/build/compile_commands.json"))
@end lisp

@node Multiple Build Configurations
@section Multiple Build Configurations

@i{compdb} can be configured to use multiple build
directories. This is desirable when developing for multiple
configurations (eg a debug build for feature development, and a
release build for performance/integration testing). Furthermore, the
build directories can be either "in-source" or "out-of-source",
meaning they can be subdirectories of your project source tree, or
elsewhere on the filesystem.

In @ede{} terminology, each of these different types of builds is a
project configuration. The current configuration is referred to as the
configuration default. In @i{compdb}, each project configuration is
associated with a build directory, and the current configuration
directory is used to locate the compilation database.

Multiple configurations and associated directories can be specified
when a @i{compdb} project is created, using the
@code{:configurations} and @code{:configuration-directories}
properites. The @code{:configuration-default} property can be used to
specify the current configuration, but if not present the first one in
the list of configurations will be chosen.

Once the project is created, you can switch to a different
configuration using the@code{ede-project-configurations-set} function,
bound to @kbd{C-c . b} by default. You can also change directory for
the current configuration by using
@code{ede-compdb-set-configuration-directory}, which is bound to
@kbd{C-c . B} by default.

@menu
* Simple compdb Example::
* Autoload compdb Example::
@end menu

@node Simple compdb Example
@subsection Simple compdb Example

Here we are creating an @i{compdb} project for a CMake-based source
tree in @file{~/src/myproj}. It can be built as either "debug" or
"release", with @file{build.dbg} and @file{build.rel} as the
corresponding directories.

@lisp
(ede-add-project-to-global-list
 (ede-compdb-project "Myproj"
                     :file (expand-file-name "~/src/myproj/CMakeLists.txt")
                     :configurations '("debug" "release")
                     :configuration-directories '("build.dbg" "build.rel")
                     :compdb-file "compile_commands.json"
                     :build-command "cmake --build .."
                     ))
@end lisp

Note that we need to provide a @code{:file} property which corresponds
to a file in the root of the source tree.

@node Autoload compdb Example
@subsection Autoload compdb Example

In this (admittedly complex) example, we have a possible four
different types of build for each project. Each build type is assigned
a separate directory, relative to the project root. At load time, we
examine the project to see which, if any, of the build directories is
present. This directory is selected as the build directory, and
additionally we set the @code{:configuration-default} to the corresponding
value.

Furthermore, we're using the @code{ede-project-autoload} mechanism to
automatically create and load the project as required, @xref{Detecting
a Project}.

@lisp
(defvar my-cmake-build-directories
  '(("None" . "build")
    ("Debug" . "build.dbg")
    ("Release" . "build.rel")
    ("RelWithDebInfo" . "build.r+d")))

(defun my-load-cmake-project (dir)
  "Creates a project for the given directory sourced at dir"
  (let ((default-directory dir)
        (config-and-dir (car (cl-member-if
          (lambda (c)
            (file-readable-p
            (expand-file-name "compile_commands.json" (concat dir (cdr c)))))
                                           my-cmake-build-directories))))
    (unless config-and-dir
      (error "Couldn't determine build directory for project at %s" dir))
    (ede-add-project-to-global-list
     (ede-compdb-project
      (file-name-nondirectory (directory-file-name dir))
      :file (expand-file-name "CMakeLists.txt" dir)
      :compdb-file (expand-file-name "compile_commands.json" (cdr config-and-dir))
      :configuration-default (car config-and-dir)
      :configuration-directories (mapcar #'cdr my-cmake-build-directories)
      :configurations (mapcar #'car my-cmake-build-directories)
      :build-command "cmake --build .."
      ))))

(defun vc-project-root (dir)
  (require 'vc)
  (let* ((default-directory dir)
         (backend (vc-responsible-backend dir)))
    (and backend (vc-call-backend backend 'root default-directory))))

(ede-add-project-autoload
 (ede-project-autoload "CMake"
                       :file 'ede-compdb
                       :proj-file "CMakeLists.txt"
                       :proj-root 'vc-project-root
                       :load-type 'my-load-cmake-project
                       :class-sym 'ede-compdb-project))
@end lisp

@node Building compdb Projects
@section Building compdb Projects

The current buffer can be compiled using the @code{ede-compile-target}
function, which is bound to @kbd{C-c . c} by default, @xref{Building
and Debugging}.

When creating a @i{compdb} project, the @code{:build-command}
attribute can be set to the command to be used to build the entire
project. This is invoked with @code{ede-compile-project}, which is
bound to @kbd{C-c . C} by default. This command is run from the
current configuration directory.

When @code{ede-ninja-project} is used, some additional features are
supported. @i{compdb}supports automatically loading the list of
top-level phony projects, like @samp{all} and @samp{test}. These are
often useful during development, and @i{compdb} makes these
available for use via the @code{ede-compile-selected} command. This is
bound to the @samp{Build Other Target...} menu item and @kbd{C-c
. C-c} by default. These phony targets are queried using
@command{ninja -t targets} and cached per-project.

@node Matching source and header files
@section Matching source and header files

One of the limitations of using the compilation database is that it
only contains the compilation commands for source files. However,
related source files such as header files are not generally compiled
independently, hence are not inserted into the compilation database.

@i{compdb} works around this limitation using some heuristics to
locate a compilation database entry for each buffer file. This is the
process that is followed when a new file is opened within an existing
@i{compdb} project.

@enumerate
@item
If the current buffer file is in the compilation database, that is used.
@item
If the @uref{http://batsov.com/projectile/,Projectile} package is
configured for the current buffer, the
@code{projectile-get-other-files} function will be used to search for
a matching entry in the compilation database.
@item
The standard emacs ``other'' file mechanism is also used to search for
matching entries in the compilation database. The definition of an
``other'' file is almost exactly the same as that used by the the
built-in emacs function @code{ff-get-other-file}. By default,
@code{ff-get-other-file} will search the current directory for an
equivalent @file{.cpp} file, so if the current buffer is visiting an
@file{.hpp} file and the equivalent @file{.cpp} file is in the
compilation database, that is used. Other directories can be searched,
and indeed custom functions can be provided to search for arbitary
files.
@item
Otherwise the compilation database is searched, and the entry which
has the longest common prefix with the current buffer file is used. So
for example if you are visiting @file{src/bar.hpp}, and there is an
entry for @file{src/foo.cpp}, this will be used in preference to
@file{main.cpp}.
@end enumerate

This technique ensures that every header file should be matched to a
compilation database entry. To see the compilation database entry for
a given header file, just compile it! (@xref{Building compdb Projects}.)

@node Rescanning the Compilation Database
@section Rescanning the Compilation Database

@i{compdb} will rescan the compilation database when the
@code{ede-rescan-toplevel} function (bound to @kbd{C-c . g} by
default) is invoked.

Typically this should not be needed, because @i{compdb} detects
when the compilation database has changed, and rescans it. Changes are
detected by examining the size and modification date/time for the
relevant file in the current build directory, which is the one
specified by the @code{:compdb-file} slot. Generally this is set to
@code{compile_commands.json} for regular @i{compdb} projects, and
@code{build.ninja} for Ninja projects.

Note that changing build directories will often cause the compilation
database to be rescanned, as it generally represents a detected change
in size or modification date/time of the @code{:compdb-file}.

Each time the compilation database is rescanned, open buffers are
updated to reference the corresponding compilation database entry, as
described in the process above.

The hook @code{ede-compdb-project-rescan-hook} is called for every
open buffer after the compilation database is rescanned.

For Ninja projects, a list of build rules is required in order to
query the compilation database. The build rule names vary depending on
which Ninja generator is used, and hence this may need
customization. For example, CMake generates Ninja build rules for C++
files of the form @code{CXX_COMPILER_(name)}. The @code{:build-rules}
and @code{:build-rules-regexp} attributes should be used to specify
the build rules on project creation.

@lisp
(ede-ninja-project projname
   :file projfile
   :compdb-file compdb-file
   :build-rules '("icc14.0.3_cxx" "gcc4.8.3_cxx")
   :build-rules-regex "^\(C\|CXX\)_COMPILER"
   )
@end lisp

@node Compilation Database Troubleshooting
@section Compilation Database Troubleshooting

Unfortunately there is too much variation between build systems to
accomodate all of them with sensible defaults, and so you may find
that @i{compdb} doesn't work as intended. Here are a few steps you can
take to investigate problems.

@enumerate
@item
When opening a source file, you should first check that the include
paths are set correctly for your project. To do this, you can use the
@samp{Show include summary} mouse menu item, or @kbd{M-x
semantic-decoration-all-include-summary}. This should tell you whether
or not the include paths are being correctly read from the compilation
database.
@item
Check the contents of your @samp{*compdb: projname*} buffer (where
@samp{projname} is the name of your project). This should contain the
compilation database for your project, in JSON format. If the buffer
is not strictly JSON formatted, then it cannot be parsed by
@i{compdb}. In particular, look for spurious output at the start or
end of the buffer.
@item
For Ninja projects, if you have an empty compilation database in the
@samp{*compdb: projname} buffer, you may need to configure your build
rules, @xref{Rescanning the Compilation Database}.
@end enumerate
