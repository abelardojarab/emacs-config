[[https://travis-ci.org/snosov1/org-toc][file:https://api.travis-ci.org/snosov1/org-toc.svg?branch=master]]

* About

org-toc helps you to have an up-to-date table of contents in org files without
exporting (useful primarily for readme files on GitHub).

It is similar to the [[https://github.com/ardumont/markdown-toc][markdown-toc]] package, but works for org files.

* Table of Contents                                                     :TOC:
 - [[#about][About]]
 - [[#installation][Installation]]
     - [[#via-packageel][via package.el]]
     - [[#manual][Manual]]
     - [[#potential-name-conflict][Potential name conflict]]
 - [[#use][Use]]
 - [[#different-href-styles][Different href styles]]
 - [[#example][Example]]

* Installation
** via package.el

[[http://melpa.org/#/org-toc][file:http://melpa.org/packages/org-toc-badge.svg]]

This is the simplest method if you have the package.el module (built-in since
Emacs 24.1) you can simply use =M-x package-install= after setting up the [[http://melpa.org/#/getting-started][MELPA]]
repository and then put the following snippet in your ~/.emacs file

#+BEGIN_SRC elisp
  (if (require 'org-toc nil t)
      (add-hook 'org-mode-hook 'org-toc-enable)
    (warn "org-toc not found"))
#+END_SRC

** Manual

- Create folder ~/.emacs.d if you don't have it
- Go to it and clone org-toc there
  #+BEGIN_SRC sh
    git clone https://github.com/snosov1/org-toc.git
  #+END_SRC
- Put this in your ~/.emacs file
  #+BEGIN_SRC elisp
    (add-to-list 'load-path "~/.emacs.d/org-toc")
    (if (require 'org-toc nil t)
        (add-hook 'org-mode-hook 'org-toc-enable)
      (warn "org-toc not found"))
  #+END_SRC

** Potential name conflict

If you install =contrib= Org modules, you may face a name conflict, since
there's a package with the same name there.

* Use

After the installation, every time you'll be saving an org file, the first
headline with a =:TOC:= tag will be updated with the current table of contents.

To add a =:TOC:= tag, you can use the command =org-set-tags-command=, normally
found bound to =C-c C-q=.

In addition to the simple =:TOC:= tag, you can also use the following tag
formats:

- =:TOC_2:= - sets the max depth of the headlines in the table of contents to 2
  (the default)

- =:TOC_2_gh:= - sets the max depth as in above and also uses the GitHub-style
  hrefs in the table of contents (the default). The other supported href style
  is 'org', which is the default org style (you can use =C-c C-o= to go to the
  headline at point).

You can also use =@= as separator, instead of =_=.

*Note* In your emacs' setup, you can bind a tag =:TOC:= to a binding =T=:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-tag-alist '("TOC" . ?T))
#+END_SRC

Now =C-c C-q T RET= and you are done putting the =:TOC:= entry.

* Different href styles

Currently, only 2 href styles are supported: =gh= and =org=. You can easily
define your own styles. If you use the tag =:TOC_2_STYLE:= (=STYLE= being a
style name), then the package will look for a function named
=org-toc-hrefify-STYLE=, which accepts a heading string and returns a href
corresponding to that heading.

E.g. for =org= style it simply returns input as is:

#+BEGIN_SRC emacs-lisp
  (defun org-toc-hrefify-org (str)
    "Given a heading, transform it into a href using the org-mode
  rules."
    str)
#+END_SRC

* Example
#+BEGIN_SRC org
  * About
  * Table of Contents                                           :TOC:
    - [[#about][About]]
    - [[#installation][Installation]]
        - [[#via-packageel][via package.el]]
        - [[#manual][Manual]]
    - [[#use][Use]]
  * Installation
  ** via package.el
  ** Manual
  * Use
  * Example
#+END_SRC
