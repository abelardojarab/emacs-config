#!/bin/sh
exec guile -e main -s $0 $@
!#
;;
;; Copyright (C) 2011-2012 Dirk-Jan C. Binnema <djcb@djcbsoftware.nl>
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation; either version 3, or (at your option) any
;; later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;

;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software Foundation,
;; Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
(setlocale LC_ALL "")

(use-modules (ice-9 getopt-long) (ice-9 optargs) (ice-9 popen) (ice-9 format))
(use-modules (mu) (mu stats) (mu plot))
;;(use-modules (mu) (mu message) (mu stats) (mu plot))

(define (per-hour expr plain-text)
  "Count the total number of messages for each weekday (0-6 for
Sun..Sat) that match EXPR. If PLAIN-TEXT is true, use a plain-text
display, otherwise, use a graphical window."
  (mu:plot
    (sort
      (mu:tabulate
	(lambda (msg)
	  (tm:hour (localtime (mu:date msg)))) expr)
      (lambda (x y) (< (car x) (car y))))
    (format #f "Messages per hour matching ~a" expr) "Hour" "Messages" plain-text))

(define (per-day expr plain-text)
  "Count the total number of messages for each weekday (0-6 for
Sun..Sat) that match EXPR. If PLAIN-TEXT is true, use a plain-text
display, otherwise, use a graphical window."
  (mu:plot
    (mu:weekday-numbers->names
      (sort (mu:tabulate
	      (lambda (msg)
		(tm:wday (localtime (mu:date msg)))) expr)
	(lambda (x y) (< (car x) (car y)))))
    (format #f "Messages per weekday matching ~a" expr) "Day" "Messages" plain-text))

(define (per-month expr plain-text)
  "Count the total number of messages for each weekday (0-6 for
Sun..Sat) that match EXPR. If PLAIN-TEXT is true, use a plain-text
display, otherwise, use a graphical window."
  (mu:plot
    (mu:month-numbers->names
      (sort
	(mu:tabulate
	  (lambda (msg)
	    (tm:mon (localtime (mu:date msg)))) expr)
	(lambda (x y) (< (car x) (car y)))))
    (format #f "Messages per month matching ~a" expr) "Month" "Messages" plain-text))


(define (per-year-month expr plain-text)
  "Count the total number of messages for each weekday (0-6 for
Sun..Sat) that match EXPR. If PLAIN-TEXT is true, use a plain-text
display, otherwise, use a graphical window."
  (mu:plot
    (sort (mu:tabulate
	    (lambda (msg)
	      (string->number
		(format #f "~d~2'0d"
		  (+ 1900 (tm:year (localtime (mu:date msg))))
		  (tm:mon (localtime (mu:date msg))))))
	    expr)
      (lambda (x y) (< (car x) (car y))))
    (format #f "Messages per year/month matching ~a" expr)
    "Year/Month" "Messages" plain-text))



(define (per-year expr plain-text)
  "Count the total number of messages for each weekday (0-6 for
Sun..Sat) that match EXPR. If PLAIN-TEXT is true, use a plain-text
display, otherwise, use a graphical window."
  (mu:plot
    (sort (mu:tabulate
	    (lambda (msg)
	      (+ 1900 (tm:year (localtime (mu:date msg))))) expr)
      (lambda (x y) (< (car x) (car y))))
    (format #f "Messages per year matching ~a" expr) "Year" "Messages" plain-text))



(define (main args)
  (let* ((optionspec   '( (muhome     (value #t))
			  (what       (value #t))
			  (text       (value #f))
			  (help       (single-char #\h) (value #f))))
	  (options (getopt-long args optionspec))
	  (msg (string-append
		 "usage: mu-msg-stats [--help] [--text] "
		 "[--muhome=<muhome>] "
		 "--what=<per-hour|per-day|per-month|per-year-month|"
		 "per-year> [searchexpr]\n"))
	  (help (option-ref options 'help #f))
	  (what (option-ref options 'what #f))
	  (text (option-ref options 'text #f))
	  (muhome (option-ref options 'muhome #f))
	  (restargs (option-ref options '() #f))
	  (expr (if restargs (string-join restargs) "")))
    (if (or help (not what))
      (begin
	(display msg)
	(exit (if help 0 1))))
    (mu:initialize muhome)
    (cond
      ((string= what "per-hour")  (per-hour expr text))
      ((string= what "per-day")   (per-day expr text))
      ((string= what "per-month") (per-month expr text))
      ((string= what "per-year-month") (per-year-month expr text))
      ((string= what "per-year")  (per-year expr text))
      (else (begin
	      (display msg)
	      (exit 1))))))

;; Local Variables:
;; mode: scheme
;; End:
