\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename flycheck.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.2.3.@*
@end ifinfo
@settitle Flycheck
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Emacs
@direntry
* flycheck: (flycheck.info). On the fly syntax checking for GNU Emacs
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
This manual is for Flycheck version 0.21.

Copyright @copyright{} 2014, Sebastian Wiesner

@quotation
Permission is granted to copy, distribute and/or modify this documentation under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant Sections,
no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is
included in the section entitled ``GNU Free Documentation License.''.

Alternatively, you may copy, distribute and/or modify this documentation under
the terms of the Creative Commons Attribution-ShareAlike 4.0 International
Public License.  A copy of the license can be obtained at
@uref{https://creativecommons.org/licenses/by-sa/4.0/legalcode}.
@end quotation

@end copying

@titlepage
@title Flycheck
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@definfoenclose strong,*,*
@definfoenclose emph,_,_

@c %** end of user preamble

@ifnottex
@node Top
@top Flycheck
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{0}
@menu
* Introduction:: 
* Flycheck versus Flymake:: 
* Installation:: 
* Quickstart:: 
* Usage:: 
* Supported languages:: 
* Glossary:: 
* Flycheck releases:: 
* Extending Flycheck:: 
* Flycheck API:: 
* Contribution guidelines:: 
* Testing Flycheck:: 
* Writing documentation:: 
* Maintenance tasks:: 
* GNU General Public License:: 
* GNU Free Documentation License:: 
* Index:: 

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Features:: 
* 3rd party extensions:: 

Flycheck versus Flymake

* Overview:: 
* Detailed review:: 

Detailed review

* Relation to Emacs:: 
* Enabling syntax checking:: 
* Syntax checkers:: 
* Customization of syntax checkers:: 
* Syntax checker selection:: 
* Error levels:: 
* Error parsing:: 
* Error message display:: 
* Error list:: 
* Resource consumption:: 
* Unit tests:: 

Syntax checkers

* Built-in syntax checkers:: 
* Definition of new syntax checkers:: 

Customization of syntax checkers

* Executables of syntax checkers:: 

Syntax checker selection

* Custom predicates:: 
* Manual selection:: 
* Multiple syntax checkers per buffer:: 

Resource consumption

* Syntax checking:: 
* Checking for changes:: 

Installation

* Prerequisites:: 
* Package installation:: 
* Setup:: 

Prerequisites

* Emacs:: 
* Syntax checking tools:: 

Package installation

* Manual:: 
* Cask:: 

Quickstart

* Enable Flycheck:: 
* Install some syntax checker tools:: 
* Check syntax in a buffer:: 
* Navigate and list errors:: 
* Explore the menu:: 
* Further reading:: 

Usage

* Flycheck Mode:: 
* Syntax checking: Syntax checking<2>. 
* Syntax checker selection: Syntax checker selection<2>. 
* Syntax checker configuration:: 
* Error reporting:: 
* Error messages:: 
* Error list: Error list<2>. 
* Error navigation:: 
* Mode line:: 

Syntax checker configuration

* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 

Supported languages

* Ada:: 
* AsciiDoc:: 
* C/C++:: 
* CFEngine:: 
* Chef:: 
* Coffeescript:: 
* Coq:: 
* CSS:: 
* D:: 
* Elixir:: 
* Emacs Lisp:: 
* Erlang:: 
* ERuby:: 
* Fortran:: 
* Go:: 
* Haml:: 
* Handlebars:: 
* Haskell:: 
* HTML:: 
* Javascript:: 
* JSON:: 
* LESS:: 
* Lua:: 
* Make:: 
* Perl:: 
* PHP:: 
* Puppet:: 
* Python:: 
* Racket:: 
* RPM SPEC:: 
* ReStructuredText:: 
* Ruby:: 
* Rust:: 
* Sass:: 
* Scala:: 
* Scss:: 
* Shell script languages:: 
* Slim:: 
* TeX/LaTeX:: 
* Texinfo:: 
* Verilog:: 
* XML:: 
* YAML:: 

Flycheck releases

* Release announcements:: 
* Changelog:: 

Release announcements

* Flycheck 0.21: Flycheck 0 21. 
* Flycheck 0.20: Flycheck 0 20. 
* Flycheck 0.19: Flycheck 0 19. 
* Flycheck 0.18: Flycheck 0 18. 
* Flycheck 0.17: Flycheck 0 17. 
* Flycheck 0.16: Flycheck 0 16. 
* Flycheck 0.15: Flycheck 0 15. 

Flycheck 0.21

* Breaking changes:: 
* Language support:: 
* Error list changes:: 
* Error navigation and display:: 
* Syntax checker definition and extension:: 
* Obtaining the new release:: 

Language support

* C/C++: C/C++<2>. 
* D: D<2>. 
* Go: Go<2>. 
* HTML: HTML<2>. 
* Less:: 
* Shell scripts:: 

Flycheck 0.20

* Breaking changes: Breaking changes<2>. 
* Language support: Language support<2>. 
* Error list improvements:: 
* User interface improvements:: 
* Miscellaneous new features:: 
* Miscellaneous fixes:: 
* Get it:: 

Language support

* C/C++: C/C++<3>. 
* Rust: Rust<2>. 
* Scala: Scala<2>. 
* Sass/SCSS:: 
* Javascript: Javascript<2>. 
* Ruby: Ruby<2>. 

Flycheck 0.19

* Breaking changes: Breaking changes<3>. 
* Languages:: 
* New features:: 
* Bug fixes:: 
* Misc changes:: 
* Get it: Get it<2>. 

Languages

* C/C++: C/C++<4>. 
* Emacs Lisp: Emacs Lisp<2>. 
* Go: Go<3>. 
* Haskell: Haskell<2>. 
* Rust: Rust<3>. 

Flycheck 0.18

* Breaking changes: Breaking changes<4>. 
* Syntax checkers: Syntax checkers<2>. 
* Bug fixes: Bug fixes<2>. 
* Get it: Get it<3>. 

Flycheck 0.17

* Breaking changes: Breaking changes<5>. 
* New online manual:: 
* Syntax checkers: Syntax checkers<3>. 
* Extending syntax checkers:: 
* Other bug fixes and improvements:: 

Flycheck 0.16

* Breaking changes: Breaking changes<6>. 
* Syntax checkers: Syntax checkers<4>. 
* New features: New features<2>. 
* Improved error list:: 
* Get it: Get it<4>. 

Syntax checkers

* New languages and checkers:: 
* Better Haskell support:: 
* Miscellaneous new options:: 

New features

* Syntax checker executables: Syntax checker executables<2>. 
* Disable syntax checkers easily:: 

Flycheck 0.15

* Breaking changes: Breaking changes<7>. 
* New syntax checkers:: 
* New error list:: 
* C/C++ support:: 
* New info level messages:: 
* Custom error levels:: 
* Other improvements:: 
* Get it: Get it<5>. 

Changelog

* 0.21 (Oct 26@comma{} 2014): 0 21 Oct 26 2014. 
* 0.20 (Aug 12@comma{} 2014): 0 20 Aug 12 2014. 
* 0.19 (Jun 12@comma{} 2014): 0 19 Jun 12 2014. 
* 0.18 (Mar 24@comma{} 2014): 0 18 Mar 24 2014. 
* 0.17 (Feb 1@comma{} 2014): 0 17 Feb 1 2014. 
* 0.16 (Jan 11@comma{} 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15@comma{} 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16@comma{} 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15@comma{} 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28@comma{} 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18@comma{} 2013): 0 12 May 18 2013. 
* 0.11 (May 01@comma{} 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21@comma{} 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13@comma{} 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9@comma{} 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23@comma{} 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14@comma{} 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30@comma{} 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29@comma{} 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28@comma{} 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21@comma{} 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21@comma{} 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25@comma{} 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11@comma{} 2012): 0 1 Oct 11 2012. 

Extending Flycheck

* Defining new syntax checkers:: 
* Registering new syntax checkers:: 
* Error levels: Error levels<2>. 
* Error parsers:: 
* Extending syntax checkers: Extending syntax checkers<2>. 
* Examples:: 

Examples

* Basic syntax checkers:: 
* Syntax checkers with predicates:: 
* Configuration files for syntax checkers:: 
* Chaining syntax checkers:: 

Flycheck API

* Status API:: 
* Error API:: 
* Error Analysis:: 
* Builtin error parsers:: 
* Error parser API:: 
* Error filters:: 
* Syntax checker API:: 
* Builtin option filters:: 
* Builtin syntax checker predicates:: 
* Utilities:: 

Contribution guidelines

* Reporting issues:: 
* Contributing code:: 

Contributing code

* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 

Testing Flycheck

* Test suite layout:: 
* Test running:: 
* Virtual test environment:: 
* Travis CI:: 

Writing documentation

* Build environment setup:: 
* Building HTML and Texinfo:: 
* Verifying references:: 

Maintenance tasks

* Rebuilding the Texinfo:: 
* Rasterized logo files:: 

@end detailmenu
@end menu

@node Introduction,Flycheck versus Flymake,Top,Top
@anchor{guide/introduction introduction}@anchor{1}@anchor{guide/introduction doc}@anchor{2}
@chapter Introduction


Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs 24,
intended as replacement for the older Flymake extension which is part of GNU
Emacs.

It uses various syntax checking and linting tools to automatically check the
contents of buffers while you type, and reports warnings and errors directly in
the buffer, or in an optional error list.

@menu
* Features:: 
* 3rd party extensions:: 

@end menu

@node Features,3rd party extensions,,Introduction
@anchor{guide/introduction features}@anchor{3}@anchor{guide/introduction id1}@anchor{4}
@section Features



@itemize -

@item 
43 languages with 72 syntax checkers, see
@ref{5,,Supported languages}

@item 
@ref{6,,Fully automatic@comma{} fail-safe@comma{} on-the-fly syntax checking in background}

@item 
@ref{7,,Nice error indication and highlighting}

@item 
Optional error list popup

@item 
@ref{8,,Many customization options}

@item 
@ref{9,,A comprehensive manual}

@item 
@ref{a,,A simple API to define new syntax checkers}

@item 
A “doesn't get in your way” guarantee
@end itemize

@node 3rd party extensions,,Features,Introduction
@anchor{guide/introduction rd-party-extensions}@anchor{b}@anchor{guide/introduction id2}@anchor{c}
@section 3rd party extensions


The following extensions provide additional cool features for Flycheck:


@itemize -

@item 
flycheck-cask@footnote{https://github.com/flycheck/flycheck-cask} makes Flycheck use Cask packages in Cask@footnote{https://github.com/cask/cask} projects.

@item 
flycheck-color-mode-line@footnote{https://github.com/flycheck/flycheck-color-mode-line} colors the mode line according to the Flycheck
status.

@item 
flycheck-d-unittest@footnote{https://github.com/flycheck/flycheck-d-unittest} adds a Flycheck checker to run unit tests for D programs
on the fly.

@item 
flycheck-google-cpplint@footnote{https://github.com/flycheck/flycheck-google-cpplint} adds a syntax checker for Google's C++ style checker.

@item 
flycheck-haskell@footnote{https://github.com/flycheck/flycheck-haskell} improves Haskell support in Flycheck, by configuring
Flycheck according to the current Cabal project, and using Cabal sandbox
packages.

@item 
flycheck-hdevtools@footnote{https://github.com/flycheck/flycheck-hdevtools} adds a Flycheck syntax checker for Haskell based on
hdevtools@footnote{https://github.com/bitc/hdevtools/}.

@item 
flycheck-ledger@footnote{https://github.com/purcell/flycheck-ledger} adds a syntax checker for the Ledger@footnote{http://ledger-cli.org/} accounting tool.

@item 
flycheck-mercury@footnote{https://github.com/flycheck/flycheck-mercury} adds a Flycheck syntax checker for the Mercury Language@footnote{http://mercurylang.org/}.

@item 
flycheck-pos-tip@footnote{https://github.com/flycheck/flycheck-pos-tip} shows Flycheck error messages in a popup.

@item 
flycheck-pyflakes@footnote{https://github.com/Wilfred/flycheck-pyflakes} adds a Python syntax checker using Pyflakes.

@item 
flycheck-rust@footnote{https://github.com/flycheck/flycheck-rust} improves Rust support in Flycheck, by configuring Flycheck
according to Cargo settings and layouts.
@end itemize

@node Flycheck versus Flymake,Installation,Introduction,Top
@anchor{guide/flycheck-versus-flymake flycheck-versus-flymake}@anchor{d}@anchor{guide/flycheck-versus-flymake doc}@anchor{e}@anchor{guide/flycheck-versus-flymake flycheck-rust}@anchor{f}@anchor{guide/flycheck-versus-flymake id1}@anchor{10}
@chapter Flycheck versus Flymake


This article provides information about Flycheck compares to the @emph{built-in}
Flymake mode.  It does not consider the improved Flymake fork@footnote{https://github.com/illusori/emacs-flymake} or third-party
extensions such as flymake-easy@footnote{https://github.com/purcell/flymake-easy} or flymake-cursor@footnote{http://www.emacswiki.org/emacs/flymake-cursor.el}, but references them at
appropriate places.

We aim for this comparison to be neutral and complete, but do not provide any
guarantee for completeness or correctness of the following information.
Moreover, we consider Flycheck superior to Flymake in all aspects.  As such, you
may find this page biased towards Flycheck.  Please excuse this as well as any
factual mistake or lack of information.  Please suggest improvements.

@menu
* Overview:: 
* Detailed review:: 

@end menu

@node Overview,Detailed review,,Flycheck versus Flymake
@anchor{guide/flycheck-versus-flymake overview}@anchor{11}
@section Overview


This table intends to give an overview about the differences and similarities
between Flycheck and the default install of Flymake. It is not a direct
comparision to third-party extensions such as flymake-easy, flymake-cursor, or
forks of Flymake. For a more comprehensive look compared to those extensions,
please read the details in the main article and the footnotes.

Please do @emph{not} only use this table to make your personal judgment, but also
read the detailed review in the following sections, at least with regards to the
features you are interested in.


@multitable {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx} 
@item

@tab

Flycheck

@tab

Flymake

@item

Supported Emacs versions

@tab

24+

@tab

22+

@item

Part of Emacs

@tab

no @footnote{
Flycheck is @strong{unlikely to ever become part of Emacs}.
}

@tab

yes

@item

Automatically enabled in supported
languages

@tab

yes

@tab

no

@item

Checks after

@tab

save, newline, change

@tab

save, newline, change

@item

Checks in background

@tab

yes

@tab

yes

@item

Automatic syntax checker selection

@tab

By major mode and
custom predicates

@tab

By file name patterns
@footnote{
The 3rd party library @uref{https://github.com/purcell/flymake-easy,flymake-easy} allows to use syntax checkers per
major mode.
}

@item

Manual syntax checker selection

@tab

yes

@tab

@strong{no}

@item

Multiple syntax checkers per
buffer

@tab

yes

@tab

@strong{no} @footnote{
Various 3rd party packages thus use custom shell scripts to call multiple
syntax checking tools at once.
}

@item

Supported languages

@tab

> 30

@tab

~5 @footnote{
However, the @uref{http://www.emacswiki.org/emacs/FlyMake,Flymake page} in the EmacsWiki provides recipes for many
other languages, although of varying quality.  Furthermore, the popular
ELPA archive MELPA provides many packages which add more languages to
Flymake.  There is also a @uref{https://github.com/illusori/emacs-flymake,Flymake fork}, which supports more languages
out of the box, among other fixes and improvements.
}

@item

Checking remote files via Tramp

@tab

no

@tab

partly?

@item

Definition of new syntax checkers

@tab

Via a single
declarative macro

@tab

By a function
definition and
various variables
@footnote{
@uref{https://github.com/purcell/flymake-easy,flymake-easy} provides a function to define a new syntax checker, which
sets all required variables at once.
}

@item

Customization of syntax checkers

@tab

yes

@tab

no

@item

Error levels

@tab

Errors, warnings,
information, and
custom levels

@tab

Errors and warnings
@footnote{
The @uref{https://github.com/illusori/emacs-flymake,Flymake fork} adds support for info messages.
}

@item

Error parsing

@tab

Regular expressions,
or custom error
parsers (e.g. XML,
JSON, etc.)

@tab

Regular expressions

@item

Multiline error messages

@tab

yes

@tab

@strong{no} @footnote{
@uref{https://github.com/purcell/flymake-easy,flymake-easy} @emph{overrides} internal functions of Flymake to add support
for multiline error messages.
}

@item

Error highlighting in the buffer

@tab

yes

@tab

yes

@item

Fringe icons for errors

@tab

yes

@tab

yes

@item

Error messages display

@tab

Via tooltip and echo
area, fully
customizable

@tab

In tooltip @footnote{
The 3rd party library @uref{http://www.emacswiki.org/emacs/flymake-cursor.el,flymake-cursor} shows Flymake error messages at
point in the echo area.
}

@item

List all errors in the buffer

@tab

yes

@tab

@strong{no}

@item

Resource consumption

@tab

low

@tab

high @footnote{
A third-party @uref{https://github.com/illusori/emacs-flymake,Flymake fork} mostly fixes the performance and resource
consumption issues in Flymake.
}

@item

Unit tests

@tab

all syntax checkers,
and large parts of
the underlying
processing

@tab

@strong{none?}

@end multitable


@node Detailed review,,Overview,Flycheck versus Flymake
@anchor{guide/flycheck-versus-flymake detailed-review}@anchor{12}
@section Detailed review


@menu
* Relation to Emacs:: 
* Enabling syntax checking:: 
* Syntax checkers:: 
* Customization of syntax checkers:: 
* Syntax checker selection:: 
* Error levels:: 
* Error parsing:: 
* Error message display:: 
* Error list:: 
* Resource consumption:: 
* Unit tests:: 

@end menu

@node Relation to Emacs,Enabling syntax checking,,Detailed review
@anchor{guide/flycheck-versus-flymake relation-to-emacs}@anchor{13}
@subsection Relation to Emacs


@strong{Flymake} is part of GNU Emacs since GNU Emacs 22.  As such, contributions to
Flymake are subject to the FSF policies on GNU projects.  Most notably,
contributors are required to assign their copyright to the FSF by signing a
contributor agreement.

@strong{Flycheck} is not part of GNU Emacs, and is @strong{unlikely to ever be}.  However,
it is free software as well, and publicly developed on the well-known code
hosting platform Github@footnote{https://github.com/flycheck/flycheck}.  Contributing to Flycheck does not require a copyright
assignments.

@node Enabling syntax checking,Syntax checkers,Relation to Emacs,Detailed review
@anchor{guide/flycheck-versus-flymake enabling-syntax-checking}@anchor{14}
@subsection Enabling syntax checking


@strong{Flymake} is not enabled automatically for supported languages.  It must be be
enabled for each mode individually and @strong{carefully}, because it does not deal
well with unavailable syntax checker tools.  In a GUI frame, it signals errors
in GUI dialogs.  In a TTY frame, it does not signal any error at all, but
instead silently hangs.  The same occurs, when a syntax checker tool becomes
unavailable after Flymake Mode is enabled, for instance, because the underlying
tool was uninstalled.


The third-party library flymake-easy@footnote{https://github.com/purcell/flymake-easy} provides an alternate way to enable
Flymake Mode, which gracefully handles unavailable syntax checkers.  It does not
check whether the tool still exists before a syntax check, though, and thus does
still exposes above behavior, when a tool becomes unavailable after the mode was
enabled.

@strong{Flycheck} provides a global mode (see @ref{15,,global-flycheck-mode}), which
enables syntax checking in every supported language.  If a syntax checking tool
is not available, Flycheck fails gracefully, does not enable syntax checking,
and just indicates the failure in the mode line.

@node Syntax checkers,Customization of syntax checkers,Enabling syntax checking,Detailed review
@anchor{guide/flycheck-versus-flymake syntax-checkers}@anchor{16}
@subsection Syntax checkers


@menu
* Built-in syntax checkers:: 
* Definition of new syntax checkers:: 

@end menu

@node Built-in syntax checkers,Definition of new syntax checkers,,Syntax checkers
@anchor{guide/flycheck-versus-flymake built-in-syntax-checkers}@anchor{17}
@subsubsection Built-in syntax checkers


@strong{Flymake} supports Java, Makefiles, Perl, PHP, TeX/LaTeX and XML.  Notably, it
does @emph{not} support Emacs Lisp.  A third-party Flymake fork@footnote{https://github.com/illusori/emacs-flymake} supports more
languages, though.  Furthermore there are many recipes for other languages on
the Flymake page@footnote{http://www.emacswiki.org/emacs/FlyMake} in the EmacsWiki, and many extension packages for other
languages in the popular ELPA archive MELPA@footnote{http://melpa.org/}.

@strong{Flycheck} provides support for 43 languages (see
@ref{5,,Supported languages}) with 72 syntax checkers, most of
them contributed by the community.  Notably, Flycheck does @emph{not} support Java
and Makefiles.

@node Definition of new syntax checkers,,Built-in syntax checkers,Syntax checkers
@anchor{guide/flycheck-versus-flymake definition-of-new-syntax-checkers}@anchor{18}
@subsubsection Definition of new syntax checkers


@strong{Flymake} does not provide a single function to define a new syntax checker.
Instead, one has to define an “init” function, which returns the command, and
add this function to @code{flymake-allowed-file-name-masks}.  Additionally, one has
to add the error patterns to @code{flymake-err-line-patterns}.  As such, defining a
syntax checker is difficult for users who are not familiar with Emacs Lisp.
flymake-easy@footnote{https://github.com/purcell/flymake-easy} provides an easier way to define new syntax checkers, though.

@strong{Flycheck} provides a single function @ref{19,,flycheck-define-checker} to
define a new syntax checker.  This function uses a declarative syntax, which is
easy to understand even for users unfamiliar with Emacs Lisp.  In fact, many
syntax checkers in Flycheck were contributed by the community@footnote{https://github.com/flycheck/flycheck/issues?labels=checker&milestone=&page=1&state=closed}.

For example, the Perl checker in Flymake is defined as follows.

@example
(defun flymake-perl-init ()
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
         (local-file  (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
    (list "perl" (list "-wc " local-file))))

(defcustom flymake-allowed-file-name-masks
  '(;; …
    ("\\.p[ml]\\'" flymake-perl-init)
    ;; …
    ))

(defvar flymake-err-line-patterns ; regexp file-idx line-idx col-idx (optional) text-idx(optional), match-end to end of string is error text
  (append
   '(;; …
     ;; perl
     ("\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]" 2 3 nil 1)
     ;; …
     )
   ;; …
  ))
@end example

Whereas Flycheck's definition of the same checker looks like this:

@example
(flycheck-define-checker perl
  "A Perl syntax checker using the Perl interpreter.

See URL `http://www.perl.org'."
  :command ("perl" "-w" "-c" source)
  :error-patterns
  ((error line-start (minimal-match (message))
          " at " (file-name) " line " line
          (or "." (and ", " (zero-or-more not-newline))) line-end))
  :modes (perl-mode cperl-mode))
@end example

@node Customization of syntax checkers,Syntax checker selection,Syntax checkers,Detailed review
@anchor{guide/flycheck-versus-flymake customization-of-syntax-checkers}@anchor{1a}
@subsection Customization of syntax checkers


@strong{Flymake} does not provide built-in means to customize syntax checkers.
Instead, when defining a new syntax checker, the user needs to declare
customization variables explicitly and explicitly check their value in the init
function.

@strong{Flycheck} provides built-in functions to add customization variables to
syntax checkers and splice the value of these variables into the argument list
of a syntax checking tool.  Many syntax checkers in Flycheck provide
customization variables.  For instance, you can customize the enabled warnings
for C with @ref{1b,,flycheck-clang-warnings}.  Flycheck also tries to
automatically find configuration files for syntax checkers.

@menu
* Executables of syntax checkers:: 

@end menu

@node Executables of syntax checkers,,,Customization of syntax checkers
@anchor{guide/flycheck-versus-flymake executables-of-syntax-checkers}@anchor{1c}
@subsubsection Executables of syntax checkers


@strong{Flymake} does not provide built-in means to change the executable of a syntax
checker.

@strong{Flycheck} implicitly defines a variable to set the path of a syntax checker
tool for each defined syntax checker, and provides the interactive command
@ref{1d,,flycheck-set-checker-executable} to change the executable used in a
buffer.

@node Syntax checker selection,Error levels,Customization of syntax checkers,Detailed review
@anchor{guide/flycheck-versus-flymake syntax-checker-selection}@anchor{1e}
@subsection Syntax checker selection


@strong{Flymake} selects syntax checkers based on file name patterns in
@code{flymake-allowed-file-name-masks}.  Effectively, this duplicates the existing
logic Emacs uses to choose the right major mode, but lacks its flexibility and
power.  For instance, Flymake cannot pick a syntax checker based on the shebang
of a file.

@strong{Flycheck} uses the major mode to select a syntax checker.  This reuses the
existing sophisticated logic Emcas uses to choose and configure major modes.
Flycheck can easily select a Python syntax checker for a Python script without
file extension, but with proper shebang, simply because Emacs correctly chooses
Python Mode for such a file.

@menu
* Custom predicates:: 
* Manual selection:: 
* Multiple syntax checkers per buffer:: 

@end menu

@node Custom predicates,Manual selection,,Syntax checker selection
@anchor{guide/flycheck-versus-flymake custom-predicates}@anchor{1f}
@subsubsection Custom predicates


@strong{Flymake} does not allow for custom predicates to implement more complex logic
for syntax checker selection.  For instance, Flymake cannot use different syntax
checkers for buffer depending on the value of a local variable.

However, flymake-easy@footnote{https://github.com/purcell/flymake-easy} patches Flymake to allow for custom syntax checkers per
buffer.  This does not happen automatically though.  The user still needs to
explicitly register a syntax checker in a major mode hook.

@strong{Flycheck} supports custom predicate function.  It uses these to implement the
shell script syntax checkers, for instance.  Emacs uses a single major mode for
various shell script types (e.g. Bash, Zsh, POSIX Shell, etc.), so Flycheck
additionally uses a custom predicate to look at the value of the variable
@code{sh-shell} in Sh Mode buffers, to determine which shell to use for syntax
checking.

@node Manual selection,Multiple syntax checkers per buffer,Custom predicates,Syntax checker selection
@anchor{guide/flycheck-versus-flymake manual-selection}@anchor{20}
@subsubsection Manual selection


@strong{Flymake} does not provide means to manually select a specific syntax checker,
either interactively, or via local variables.

@strong{Flycheck} provides the local variable @ref{21,,flycheck-checker} to
explicitly use a specific syntax checker for a buffer, and the command
@ref{22,,flycheck-select-checker} to set this variable interactively.

@node Multiple syntax checkers per buffer,,Manual selection,Syntax checker selection
@anchor{guide/flycheck-versus-flymake multiple-syntax-checkers-per-buffer}@anchor{23}
@subsubsection Multiple syntax checkers per buffer


@strong{Flymake} can only use a single syntax checker per buffer.  Effectively, the
user can only use a single tool to check a buffer, for instance either PHP Mess
Detector or PHP CheckStyle.  Third party extensions to Flycheck work around this
limitation by supplying custom shell scripts to call multiple syntax checking
tools at once.

@strong{Flycheck} can easily apply multiple syntax checkers per buffer.  For
instance, Flycheck will check PHP files with PHP CLI first to find syntax
errors, then with PHP MessDetector to additionally find idiomatic and semantic
errors, and eventually with PHP CheckStyle to find stylistic errors.  The user
will see all errors reported by all of these utilities in the buffer.

@node Error levels,Error parsing,Syntax checker selection,Detailed review
@anchor{guide/flycheck-versus-flymake error-levels}@anchor{24}
@subsection Error levels


@strong{Flymake} supports error and warning messages.  The pattern of warning
messages is @emph{hard-coded} in Emacs 24.3, and only became customizable in upcoming
Emacs 24.4.  The patterns to parse messages are kept separate from the actual
syntax checker.

The third-party Flymake fork@footnote{https://github.com/illusori/emacs-flymake} also supports info messages, and makes the
pattern of warning messages customizable as well.

@strong{Flycheck} supports error, warning and info messages.  The patterns to parse
messages of different levels are part of the syntax checker definition, and thus
specific to each syntax checker.  Flycheck allows to define new error levels for
use in custom syntax checkers with @ref{25,,flycheck-define-error-level}.

@node Error parsing,Error message display,Error levels,Detailed review
@anchor{guide/flycheck-versus-flymake error-parsing}@anchor{26}
@subsection Error parsing


@strong{Flymake} parses the output of syntax checker tools with regular expressions
only.  As it splits the output by lines regardless of the regular expressions,
it does not support error messages spanning multiple lines (such as returned by
the Emacs Lisp byte compiler or by the Glasgow Haskell Compiler).

flymake-easy@footnote{https://github.com/purcell/flymake-easy} overrides internal Flymake functions to support multiline error
messages.

@strong{Flycheck} can use regular expressions as well as custom parsing functions.
By means of such functions, it can parse JSON, XML or other structured output
formats.  Flycheck includes some ready-to-use parsing functions for well-known
output formats, such as Checkstyle XML.  By parsing structured output format,
Flycheck can handle arbitrarily complex error messages.  Also, with regular
expressions it uses the error patterns to split the output into tokens, and thus
handles multiline messages just as well.

@node Error message display,Error list,Error parsing,Detailed review
@anchor{guide/flycheck-versus-flymake error-message-display}@anchor{27}
@subsection Error message display


In GUI frames, @strong{Flymake} shows error messages in a tool tip, if the user
hovers the mouse over an error location.  It does not provide means to show
error messages in a TTY frame, or with the keyboard only.


The third-party library flymake-cursor@footnote{http://www.emacswiki.org/emacs/flymake-cursor.el} shows Flymake error messages at point
in the echo area, by overriding internal Flymake functions.

@strong{Flycheck} shows error message tool tips as well, but also displays error
messages in the echo area, if the point is at an error location.  This feature
is fully customizable via @ref{28,,flycheck-display-errors-function}.


@node Error list,Resource consumption,Error message display,Detailed review
@anchor{guide/flycheck-versus-flymake error-list}@anchor{29}
@subsection Error list


@strong{Flymake} does not provide means to list all errors in the current buffer.

@strong{Flycheck} can list all errors in the current buffer in a separate window.
This error list is automatically updated after each syntax check, and follows
the focus.


@node Resource consumption,Unit tests,Error list,Detailed review
@anchor{guide/flycheck-versus-flymake resource-consumption}@anchor{2a}
@subsection Resource consumption


@menu
* Syntax checking:: 
* Checking for changes:: 

@end menu

@node Syntax checking,Checking for changes,,Resource consumption
@anchor{guide/flycheck-versus-flymake syntax-checking}@anchor{2b}
@subsubsection Syntax checking


@strong{Flymake} starts a syntax check after every change, regardless of whether the
buffer is visible in a window or not.  It does not limit the number of
concurrent syntax checks.  As such, Flymake starts many concurrent syntax
checks, if many buffers are changed at the same time (e.g. after a VCS revert),
which is known to freeze Emacs temporarily.

The third-party Flymake fork@footnote{https://github.com/illusori/emacs-flymake} limits the number of concurrent syntax checks.
It does not take care to check visible buffers first, though.

@strong{Flycheck} does not conduct syntax checks in buffers which are not visible in
any window.  Instead it defers syntax checks in such buffers until after the
buffer is visible again.  Hence, Flycheck does only start as many concurrent
syntax checks as there are visible windows in the current Emacs session.

@node Checking for changes,,Syntax checking,Resource consumption
@anchor{guide/flycheck-versus-flymake checking-for-changes}@anchor{2c}
@subsubsection Checking for changes


@strong{Flymake} uses a @emph{separate} timer (in @code{flymake-timer}) to periodically check
for changes in each buffer.  These timers run even if the corresponding buffers
do not change.  This is known to cause considerable CPU load with many open
buffers.

The third-party Flymake fork@footnote{https://github.com/illusori/emacs-flymake} uses a single global timer to check for changes.
This greatly reduces the CPU load, but still consumes some marginal CPU, even if
Emacs is idle and not in use currently.

@strong{Flycheck} does not use timers at all to check for changes.  Instead it
registers a handler for Emacs' built-in @code{after-change-functions} hook, which is
run after changes to the buffer.  This handler is only invoked when the buffer
actually changed, and starts a one-shot timer to delay the syntax check until
the editing stopped for a short time, to save resources and avoid checking
half-finished editing.

@node Unit tests,,Resource consumption,Detailed review
@anchor{guide/flycheck-versus-flymake unit-tests}@anchor{2d}
@subsection Unit tests


@strong{Flymake} does not have a test suite at all.

@strong{Flycheck} has unit tests for all built-in syntax checkers, and for large
parts of the underlying machinery and API.  Contributed syntax checkers are
required to have test cases.  The tests are continuously run on Travis CI@footnote{https://travis-ci.org/flycheck/flycheck}.

@node Installation,Quickstart,Flycheck versus Flymake,Top
@anchor{guide/installation travis-ci}@anchor{2e}@anchor{guide/installation doc}@anchor{2f}@anchor{guide/installation installation}@anchor{30}@anchor{guide/installation id1}@anchor{31}
@chapter Installation


@menu
* Prerequisites:: 
* Package installation:: 
* Setup:: 

@end menu

@node Prerequisites,Package installation,,Installation
@anchor{guide/installation prerequisites}@anchor{32}
@section Prerequisites


@menu
* Emacs:: 
* Syntax checking tools:: 

@end menu

@node Emacs,Syntax checking tools,,Prerequisites
@anchor{guide/installation emacs}@anchor{33}
@subsection Emacs


Flycheck supports Emacs 24 on Unix systems.  It is tested with Emacs 24.3, and
Emacs snapshot builds.  It should work with GNU Emacs 24.1 and 24.2 as well, but
it is not tested against these versions.  If it does not work with these
versions, please report an issue.

@cartouche
@quotation Warning 
Flycheck does not support Windows, but tries to be compatible with it.  You
may try to use Flycheck on Windows.  It should mostly work, but expect
problems and issues.  Pull requests which improve Windows compatibility are
welcome.

Flycheck also does not support GNU Emacs 23 and other flavors of Emacs
(e.g. XEmacs, Aquamacs, etc.).  Don't try, it will @emph{not} work.
@end quotation
@end cartouche

@node Syntax checking tools,,Emacs,Prerequisites
@anchor{guide/installation syntax-checking-tools}@anchor{34}
@subsection Syntax checking tools


For almost all supported languages, Flycheck also needs additional @strong{external}
checker programs.  See @ref{35,,Supported languages} for a list of supported languages and
the corresponding checkers programs, and use
@ref{36,,flycheck-describe-checker} to get help about specific checkers inside
Emacs.

For instance, for Python you need either Flake8@footnote{https://flake8.readthedocs.org/} or Pylint@footnote{http://www.pylint.org/}, which can be
installed with @code{pip install flake8} and @code{pip install pylint} respectively.

Generally you can install the required external checker programs with the
standard package manager of the corresponding programming languages
(e.g. Rubygems for Ruby, NPM for Javascript).  Many checker programs are also
available in the package repositories of popular Linux distributions, or as
Formula for the OS X package manager Homebrew@footnote{http://brew.sh/}.

@node Package installation,Setup,Prerequisites,Installation
@anchor{guide/installation homebrew}@anchor{37}@anchor{guide/installation package-installation}@anchor{38}
@section Package installation


@menu
* Manual:: 
* Cask:: 

@end menu

@node Manual,Cask,,Package installation
@anchor{guide/installation manual}@anchor{39}
@subsection Manual


Install the ELPA package from MELPA@footnote{http://melpa.org} or MELPA Stable@footnote{http://stable.melpa.org} using @code{M-x
package-install RET flycheck}.

@cartouche
@quotation Warning 
Flycheck is available from Marmalade@footnote{https://marmalade-repo.org/} as well, but this repository is @strong{not
recommended}.  Due to frequent outages the package is not guaranteed to be
updated regularly.
@end quotation
@end cartouche

Neither of these repositories is included in GNU Emacs by default.  You need to
enable these repositories explicitly.  For instance, to add the MELPA
repository, add the following code to @code{init.el}:

@example
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
@end example

@node Cask,,Manual,Package installation
@anchor{guide/installation cask}@anchor{3a}
@subsection Cask


If you use @ref{3a,,Cask}, just add the following to your @code{Cask} file, and run
@code{cask install}:

@example
(source gnu)
(source melpa)

(depends-on "flycheck")
@end example

@node Setup,,Package installation,Installation
@anchor{guide/installation setup}@anchor{3b}
@section Setup


Use @code{M-x flycheck-mode} to enable Flycheck in the current buffer, and
@code{M-x global-flycheck-mode} to enable Flycheck for the entire current Emacs
session.

To permanently enable Flycheck, add the following to your @code{init.el}:

@example
(add-hook 'after-init-hook #'global-flycheck-mode)
@end example

@node Quickstart,Usage,Installation,Top
@anchor{guide/quickstart marmalade}@anchor{3c}@anchor{guide/quickstart doc}@anchor{3d}@anchor{guide/quickstart quickstart}@anchor{3e}
@chapter Quickstart


@menu
* Enable Flycheck:: 
* Install some syntax checker tools:: 
* Check syntax in a buffer:: 
* Navigate and list errors:: 
* Explore the menu:: 
* Further reading:: 

@end menu

@node Enable Flycheck,Install some syntax checker tools,,Quickstart
@anchor{guide/quickstart enable-flycheck}@anchor{3f}
@section Enable Flycheck


Enable Flycheck globally by adding the following to your @code{init.el}, and
restart Emacs:

@example
(add-hook 'after-init-hook #'global-flycheck-mode)
@end example

@node Install some syntax checker tools,Check syntax in a buffer,Enable Flycheck,Quickstart
@anchor{guide/quickstart install-some-syntax-checker-tools}@anchor{40}
@section Install some syntax checker tools


Install some syntax checking tools for the programming or markup language you
are using.  Take a look at the @ref{5,,list of supported languages} to check what languages and tools are supported.

For Python:

@example
$ pip install --user pylint
@end example

Or for Ruby:

@example
$ gem install rubocop ruby-lint
@end example

Or for Haskell:

@example
$ brew install haskell-platform
$ cabal install hlint
@end example

The @ref{5,,language list} also lists the available options
for each syntax checker.  Take a look at these to tune the syntax checkers to
your needs, and read @ref{41,,how to use these options}.

@node Check syntax in a buffer,Navigate and list errors,Install some syntax checker tools,Quickstart
@anchor{guide/quickstart check-syntax-in-a-buffer}@anchor{42}
@section Check syntax in a buffer


Flycheck will now check syntax using these tools, when you visit a buffer in any
of these languages.  Syntax checking happens @strong{automatically} when you save the
buffer or make any changes.  Flycheck highlights errors and warnings in the
buffer, indicates them in the fringe, and reports their numbers in the mode
line.

You can also manually check a buffer with @code{C-c ! c}
(@ref{43,,flycheck-buffer}).

@node Navigate and list errors,Explore the menu,Check syntax in a buffer,Quickstart
@anchor{guide/quickstart navigate-and-list-errors}@anchor{44}
@section Navigate and list errors


Use @code{C-c ! n} (@ref{45,,flycheck-next-error}) and @code{C-c ! p}
(@ref{46,,flycheck-previous-error}) to navigate between error locations.  If
you keep the point at an error location, Flycheck will show the error message in
the echo area after a short delay.  You can also hover error locations with the
mouse and see the error message in a tooltip.

To get an overview of all errors and warnings in the current buffer, type
@code{C-c ! l} (@ref{47,,flycheck-list-errors}) to pop up a list of all errors
in your current buffer.  The error list updates automatically when you fix
errors or introduce new ones, or when you switch to another buffer.

@node Explore the menu,Further reading,Navigate and list errors,Quickstart
@anchor{guide/quickstart explore-the-menu}@anchor{48}
@section Explore the menu


All Flycheck commands are available in the Emacs menu at @emph{Tools
‣ Syntax Checking}.  Explore this menu to see what features Flycheck has to
offer.


The menu can also be opened by clicking on the mode line lighter of Flycheck.


@node Further reading,,Explore the menu,Quickstart
@anchor{guide/quickstart further-reading}@anchor{49}
@section Further reading



@itemize -

@item 
@ref{4a,,Usage} describes all commands and options in detail.

@item 
@ref{35,,Supported languages} has a list of all supported languages, and the corresponding
syntax checker tools and their options.
@end itemize

@node Usage,Supported languages,Quickstart,Top
@anchor{guide/usage usage}@anchor{9}@anchor{guide/usage doc}@anchor{4a}@anchor{guide/usage id1}@anchor{4b}
@chapter Usage


@menu
* Flycheck Mode:: 
* Syntax checking: Syntax checking<2>. 
* Syntax checker selection: Syntax checker selection<2>. 
* Syntax checker configuration:: 
* Error reporting:: 
* Error messages:: 
* Error list: Error list<2>. 
* Error navigation:: 
* Mode line:: 

@end menu

@node Flycheck Mode,Syntax checking<2>,,Usage
@anchor{guide/usage id2}@anchor{4c}@anchor{guide/usage flycheck-mode}@anchor{4d}
@section Flycheck Mode


Syntax checking is done in the Flycheck minor mode:

@geindex flycheck-mode; Emacs Lisp command
@anchor{guide/usage el function flycheck-mode}@anchor{4e}
@deffn {Command} M@w{-}x flycheck@w{-}mode

Toggle Flycheck Mode for the current buffer.
@end deffn

@geindex flycheck-mode; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-mode}@anchor{4f}
@deffn {User Option} flycheck@w{-}mode

Whether Flycheck Mode is enabled in the current buffer.
@end deffn

@geindex global-flycheck-mode; Emacs Lisp command
@anchor{guide/usage el function global-flycheck-mode}@anchor{15}
@deffn {Command} M@w{-}x global@w{-}flycheck@w{-}mode

Toggle Flycheck Mode for @strong{all} live buffers, and for new buffers.

With Global Flycheck Mode, Flycheck Mode is automatically enabled in all
buffers, for which a @ref{50,,suitable syntax checker} exists and is enabled.

@cartouche
@quotation Note 
Flycheck Mode will @strong{not} be enabled in buffers for remote or encrypted
files.  The former is flaky and might be very slow, and the latter might
leak confidential data to temporary directories.

You can still explicitly enable Flycheck Mode in such buffers with
@ref{4e,,flycheck-mode}.  This is @strong{not} recommended though.
@end quotation
@end cartouche
@end deffn

@geindex global-flycheck-mode; Emacs Lisp user option
@anchor{guide/usage el variable global-flycheck-mode}@anchor{51}
@deffn {User Option} global@w{-}flycheck@w{-}mode

Whether Flycheck Mode is enabled globally.
@end deffn

If you like Flycheck Mode, you may want to enable it permanently, either by
customizing @ref{51,,global-flycheck-mode}, or by adding the following code to
your @code{init.el}:

@example
(add-hook 'after-init-hook #'global-flycheck-mode)
@end example

@node Syntax checking<2>,Syntax checker selection<2>,Flycheck Mode,Usage
@anchor{guide/usage syntax-checking}@anchor{6}@anchor{guide/usage id3}@anchor{52}
@section Syntax checking


By default, @ref{4d,,Flycheck Mode} checks syntax automatically when


@itemize -

@item 
the mode is enabled,

@item 
the file is saved,

@item 
new lines are inserted,

@item 
or some short time after the last change to the buffer.
@end itemize

However, you can customize automatic syntax checking with
@ref{53,,flycheck-check-syntax-automatically}:

@geindex flycheck-check-syntax-automatically; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-check-syntax-automatically}@anchor{53}
@deffn {User Option} flycheck@w{-}check@w{-}syntax@w{-}automatically

@cartouche
@quotation Variable properties 
This variable is safe as a file local variable if its value satisfies the predicate @code{symbolp}. 
@end quotation
@end cartouche

@format
When Flycheck should check syntax automatically.

This variable is a list of events that may trigger syntax checks.
The following events are known:

@code{`save'}
     Check syntax immediately after the buffer was saved.

@code{`idle-change'}
     Check syntax a short time (see @ref{54,,`flycheck-idle-change-delay'})
     after the last change to the buffer.

@code{`new-line'}
     Check syntax immediately after a new line was inserted into
     the buffer.

@code{`mode-enabled'}
     Check syntax immediately when @ref{4e,,`flycheck-mode'} is enabled.

Flycheck performs a syntax checks only on events, which are
contained in this list.  For instance, if the value of this
variable is @code{(mode-enabled save)}, Flycheck will only check if
the mode is enabled or the buffer was saved, but never after
changes to the buffer contents.

If nil, never check syntax automatically.  In this case, use
@ref{43,,`flycheck-buffer'} to start a syntax check manually.
@end format


This user option was introduced, or its default value was changed, in version 0.12 of the flycheck package.

@end deffn

@geindex flycheck-idle-change-delay; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-idle-change-delay}@anchor{54}
@deffn {User Option} flycheck@w{-}idle@w{-}change@w{-}delay

@cartouche
@quotation Variable properties 
This variable is safe as a file local variable if its value satisfies the predicate @code{numberp}. 
@end quotation
@end cartouche

@format
How many seconds to wait before checking syntax automatically.

After the buffer was changed, Flycheck will wait as many seconds
as the value of this variable before starting a syntax check.  If
the buffer is modified during this time, Flycheck will wait
again.

This variable has no effect, if @code{`idle-change'} is not contained in
@ref{53,,`flycheck-check-syntax-automatically'}.
@end format


This user option was introduced, or its default value was changed, in version 0.13 of the flycheck package.

@end deffn

Regardless of automatic syntax checking you can also check the buffer
manually:

@geindex flycheck-buffer; Emacs Lisp command

@deffn {Command} C@w{-}c ! c
@anchor{guide/usage el function flycheck-buffer}@anchor{43}
@deffnx {Command} M@w{-}x flycheck@w{-}buffer

@format
Check syntax in the current buffer.
@end format
@end deffn

Each syntax check conducts the following steps:


@enumerate 

@item 
Run hooks in @ref{55,,flycheck-before-syntax-check-hook}

@item 
Clear error information from previous syntax checks.

@item 
Select a @ref{50,,suitable syntax checker}.  See
@ref{56,,Syntax checker selection}, for more information on how syntax checkers
are selected.

@item 
Copy the contents of the buffer to be checked to a temporary file.

@item 
Run the syntax checker.

@item 
Parse the output of the tool, and report all errors and warnings.  See
@ref{7,,Error reporting}, for more information.

@item 
If the buffer can be checked with another syntax checker, continue from step
4, but with the next syntax checker.  This is called @ref{57,,chaining} of
syntax checkers.

@item 
Run hooks in @ref{58,,flycheck-after-syntax-check-hook}.
@end enumerate

Whenever the status of Flycheck changes, Flycheck runs
@ref{59,,flycheck-status-changed-functions}:

@geindex flycheck-status-changed-functions; Emacs Lisp hook
@anchor{guide/usage el variable flycheck-status-changed-functions}@anchor{59}
@deffn {Hook} flycheck@w{-}status@w{-}changed@w{-}functions

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Functions to run if the Flycheck status changed.

This hook is run whenever the status of Flycheck changes.  Each
hook function takes the status symbol as sinlge argument, as
given to @ref{5a,,`flycheck-report-status'}, which see.

This variable is a abnormal hook.  See Info
node @ref{Hooks,,,elisp}.
@end format


This hook was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

There are also special hooks, which run only for certain status changes:

@geindex flycheck-after-syntax-check-hook; Emacs Lisp hook
@anchor{guide/usage el variable flycheck-after-syntax-check-hook}@anchor{58}
@deffn {Hook} flycheck@w{-}after@w{-}syntax@w{-}check@w{-}hook

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Functions to run after each syntax check.

This hook is run after a syntax check was finished.

At this point, *all* chained checkers were run, and all errors
were parsed, highlighted and reported.  The variable
@ref{5b,,`flycheck-current-errors'} contains all errors from all syntax
checkers run during the syntax check, so you can apply any error
analysis functions.

Note that this hook does *not* run after each individual syntax
checker in the syntax checker chain, but only after the *last
checker*.

This variable is a normal hook.  See Info node @ref{Hooks,,,elisp}.
@end format
@end deffn

@geindex flycheck-before-syntax-check-hook; Emacs Lisp hook
@anchor{guide/usage el variable flycheck-before-syntax-check-hook}@anchor{55}
@deffn {Hook} flycheck@w{-}before@w{-}syntax@w{-}check@w{-}hook

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Functions to run before each syntax check.

This hook is run right before a syntax check starts.

Error information from the previous syntax check is *not*
cleared before this hook runs.

Note that this hook does *not* run before each individual syntax
checker in the syntax checker chain, but only before the *first
checker*.

This variable is a normal hook.  See Info node @ref{Hooks,,,elisp}.
@end format
@end deffn

There is also a hook run whenever a syntax check fails:

@geindex flycheck-syntax-check-failed-hook; Emacs Lisp hook
@anchor{guide/usage el variable flycheck-syntax-check-failed-hook}@anchor{5c}
@deffn {Hook} flycheck@w{-}syntax@w{-}check@w{-}failed@w{-}hook

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Functions to run if a syntax check failed.

This hook is run whenever an error occurs during Flycheck's
internal processing.  No information about the error is given to
this hook.

You should use this hook to conduct additional cleanup actions
when Flycheck failed.

This variable is a normal hook.  See Info node @ref{Hooks,,,elisp}.
@end format
@end deffn

During syntax checks, Flycheck generates some temporary files for syntax checker
input and output.   Use @ref{5d,,flycheck-temp-prefix} to change the prefix of
these temporary files:

@geindex flycheck-temp-prefix; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-temp-prefix}@anchor{5d}
@deffn {User Option} flycheck@w{-}temp@w{-}prefix

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Prefix for temporary files created by Flycheck.
@end format


This user option was introduced, or its default value was changed, in version 0.19 of the flycheck package.

@end deffn

@node Syntax checker selection<2>,Syntax checker configuration,Syntax checking<2>,Usage
@anchor{guide/usage syntax-checker-selection}@anchor{56}@anchor{guide/usage id4}@anchor{5e}
@section Syntax checker selection


By default Flycheck selects a @ref{50,,suitable syntax checker} automatically from
@ref{5f,,flycheck-checkers}, with respect to
@ref{60,,flycheck-disabled-checkers}:

@geindex flycheck-checkers; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-checkers}@anchor{5f}
@deffn {User Option} flycheck@w{-}checkers

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Syntax checkers available for automatic selection.

A list of Flycheck syntax checkers to choose from when syntax
checking a buffer.  Flycheck will automatically select a suitable
syntax checker from this list, unless @ref{21,,`flycheck-checker'} is set,
either directly or with @ref{22,,`flycheck-select-checker'}.

You should not need to change this variable normally.  In order
to disable syntax checkers, please use
@ref{60,,`flycheck-disabled-checkers'}.  This variable is intended for 3rd
party extensions to tell Flycheck about new syntax checkers.

Syntax checkers in this list must be defined with
@ref{19,,`flycheck-define-checker'}.
@end format

An item in this list is a @ref{61,,registered syntax checker}.
@end deffn

@geindex flycheck-disabled-checkers; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-disabled-checkers}@anchor{60}
@deffn {User Option} flycheck@w{-}disabled@w{-}checkers

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{62,,flycheck-symbol-list-p}. 
@end quotation
@end cartouche

@format
Syntax checkers excluded from automatic selection.

A list of Flycheck syntax checkers to exclude from automatic
selection.  Flycheck will never automatically select a syntax
checker in this list, regardless of the value of
@ref{5f,,`flycheck-checkers'}.

However, syntax checkers in this list are still available for
manual selection with @ref{22,,`flycheck-select-checker'}.

Use this variable to disable syntax checkers, instead of removing
the syntax checkers from @ref{5f,,`flycheck-checkers'}.  You may also use
this option as a file or directory local variable to disable
specific checkers in individual files and directories
respectively.
@end format


This user option was introduced, or its default value was changed, in version 0.16 of the flycheck package.

@end deffn

A syntax checker in @ref{5f,,flycheck-checkers} and @strong{not} in
@ref{60,,flycheck-disabled-checkers} is an @ref{63,,enabled syntax checker}.

Flycheck uses the first enabled and suitable syntax checker for the current
buffer.  See @code{Languages and syntax checkers} for a list of all available syntax
checkers.

If no @ref{50,,suitable syntax checker} is found, the syntax check is @emph{silently}
omitted.  @emph{No} error is signalled.  Only a special indicator in the mode line
informs about the omitted syntax check.  See @code{Mode line} for details.

You can manually select a specific syntax checker for the current buffer, too:

@geindex flycheck-select-checker; Emacs Lisp command

@deffn {Command} C@w{-}c ! s
@anchor{guide/usage el function flycheck-select-checker}@anchor{22}
@deffnx {Command} M@w{-}x flycheck@w{-}select@w{-}checker

Select the syntax checker for the current buffer by setting
@ref{21,,flycheck-checker}, and run a syntax check with the new syntax
checker.

Prompt for a syntax checker and set @ref{21,,flycheck-checker}.

Any @ref{64,,syntax checker} can be selected with this command, regardless of
whether it is enabled.
@end deffn


@deffn {Command} C@w{-}u C@w{-}c ! s

@deffnx {Command} C@w{-}u M@w{-}x flycheck@w{-}select@w{-}checker

Deselect the current syntax checker, and run a syntax check with an
automatically selected syntax checker.

Set @ref{21,,flycheck-checker} to @code{nil}.
@end deffn


@deffn {Function} flycheck@w{-}select@w{-}checker checker

@format
Select CHECKER for the current buffer.

CHECKER is a syntax checker symbol (see @ref{5f,,`flycheck-checkers'}) or
nil.  In the former case, use CHECKER for the current buffer,
otherwise deselect the current syntax checker (if any) and use
automatic checker selection via @ref{5f,,`flycheck-checkers'}.

If called interactively prompt for CHECKER.  With prefix arg
deselect the current syntax checker and enable automatic
selection again.

Set @ref{21,,`flycheck-checker'} to CHECKER and automatically start a new
syntax check if the syntax checker changed.

CHECKER will be used, even if it is not contained in
@ref{5f,,`flycheck-checkers'}, or if it is disabled via
@ref{60,,`flycheck-disabled-checkers'}.
@end format
@end deffn

@geindex flycheck-checker; Emacs Lisp variable
@anchor{guide/usage el variable flycheck-checker}@anchor{21}
@deffn {Variable} flycheck@w{-}checker

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{65,,flycheck-registered-checker-p}. 
@end quotation
@end cartouche

@format
Syntax checker to use for the current buffer.

If unset or nil, automatically select a suitable syntax checker
from @ref{5f,,`flycheck-checkers'} on every syntax check.

If set to a syntax checker only use this syntax checker and never
select one from @ref{5f,,`flycheck-checkers'} automatically.  The syntax
checker is used regardless of whether it is contained in
@ref{5f,,`flycheck-checkers'} or @ref{60,,`flycheck-disabled-checkers'}.  If the
syntax checker is unusable in the current buffer an error is
signaled.

A syntax checker assigned to this variable must be defined with
@ref{19,,`flycheck-define-checker'}.

Use the command @ref{22,,`flycheck-select-checker'} to select a syntax
checker for the current buffer, or set this variable as file
local variable to always use a specific syntax checker for a
file.  See Info Node @ref{Specifying File Variables,,,emacs} for more
information about file variables.
@end format
@end deffn

You can change the completion system used by
@ref{22,,flycheck-select-checker}:

@geindex flycheck-completion-system; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-completion-system}@anchor{66}
@deffn {User Option} flycheck@w{-}completion@w{-}system

@format
The completion system to use.

@code{`ido'}
     Use IDO.

     IDO is a built-in alternative completion system, without
     good flex matching and a powerful UI.  You may want to
     install flx-ido (see URL `https://github.com/lewang/flx'@footnote{https://github.com/lewang/flx}) to
     improve the flex matching in IDO.

@code{`grizzl'}
     Use Grizzl.

     Grizzl is an alternative completion system with powerful
     flex matching, but a very limited UI.  See URL
     `https://github.com/d11wtq/grizzl'@footnote{https://github.com/d11wtq/grizzl}.

nil
     Use the standard unfancy @code{`completing-read'}.

     @code{`completing-read'} has a very simple and primitive UI, and
     does not offer flex matching.  This is the default setting,
     though, to match Emacs' defaults.  With this system, you may
     want enable option @code{`icomplete-mode'} to improve the display
     of completion candidates at least.
@end format


This user option was introduced, or its default value was changed, in version 0.17 of the flycheck package.

@end deffn

Each syntax checker provides documentation with information about the executable
the syntax checker uses, in which buffers it will be used for syntax checks, and
whether it can be configured.  See @code{Configuration}, for more information about
syntax checker configuration.

@geindex flycheck-describe-checker; Emacs Lisp command

@deffn {Command} C@w{-}c ! ?
@anchor{guide/usage el function flycheck-describe-checker}@anchor{36}
@deffnx {Command} M@w{-}x flycheck@w{-}describe@w{-}checker

Show the documentation of a syntax checker.
@end deffn

@node Syntax checker configuration,Error reporting,Syntax checker selection<2>,Usage
@anchor{guide/usage syntax-checker-configuration}@anchor{8}@anchor{guide/usage id5}@anchor{67}
@section Syntax checker configuration


@menu
* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 

@end menu

@node Syntax checker executables,Syntax checker options,,Syntax checker configuration
@anchor{guide/usage id6}@anchor{68}@anchor{guide/usage syntax-checker-executables}@anchor{69}
@subsection Syntax checker executables


For each syntax checker, there is a buffer-local, customizable variable
@code{flycheck-@var{checker}-executable}, where @var{checker} is the name of
the syntax checker.

The value of this variable is either nil, or a string.  In the former case,
Flycheck uses the default executable from the syntax checker definition when
executing the syntax checker.  In the latter case, it uses the value of the
variable as executable.

Use these variables to override the executable from the definition per buffer.
For instance, you could use a different Emacs version with the @code{emacs-lisp} or
@code{emacs-lisp-checkdoc}.

You can either set these variables directly in your @code{init.el}, or change
them interactively:

@geindex flycheck-set-checker-executable; Emacs Lisp command

@deffn {Command} C@w{-}c ! e
@anchor{guide/usage el function flycheck-set-checker-executable}@anchor{1d}
@deffnx {Command} M@w{-}x flycheck@w{-}set@w{-}checker@w{-}executable

Set the executable of a syntax checker in the current buffer.

Prompt for a syntax checker and an executable file, and set the
executable variable of the syntax checker.
@end deffn


@deffn {Command} C@w{-}u C@w{-}c ! e

@deffnx {Command} C@w{-}u M@w{-}x flycheck@w{-}set@w{-}checker@w{-}executable

Reset the executable of a syntax checker in the current buffer.

Prompt for a syntax checker and reset its executable to the default.
@end deffn

@node Syntax checker options,Syntax checker configuration files,Syntax checker executables,Syntax checker configuration
@anchor{guide/usage id7}@anchor{6a}@anchor{guide/usage syntax-checker-options}@anchor{41}
@subsection Syntax checker options


Some syntax checkers can be configured via options.  See @ref{35,,Supported languages} for a
complete list of options for each syntax checkers.

All options are customizable via @code{M-x customize-group RET
flycheck-options}, and automatically buffer-local to easily set them in hooks.

Options are mainly intended to be used by @ref{b,,extensions}, and via File or Directory Local variables.  See
@ref{File Variables,,,emacs} and @ref{Directory Variables,,,emacs}
respectively.

@node Syntax checker configuration files,,Syntax checker options,Syntax checker configuration
@anchor{guide/usage syntax-checker-configuration-files}@anchor{6b}@anchor{guide/usage id8}@anchor{6c}
@subsection Syntax checker configuration files


Some syntax checkers also read configuration files, denoted by associated
@emph{configuration file variables}.  See @ref{35,,Supported languages} of these variables.

All options are customizable via @code{M-x customize-group RET
flycheck-config-files}, and automatically buffer-local to easily set them in
hooks.  You may also set them via File or Directory Local variables.  See
@ref{File Variables,,,emacs} and @ref{Directory Variables,,,emacs}
respectively.

When set to a string, Flycheck tries to locate the configuration file using the
functions in @ref{6d,,flycheck-locate-config-file-functions} and passes the name
of the file to the syntax checker:

@geindex flycheck-locate-config-file-functions; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-locate-config-file-functions}@anchor{6d}
@deffn {User Option} flycheck@w{-}locate@w{-}config@w{-}file@w{-}functions

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Functions to locate syntax checker configuration files.

Each function in this hook must accept two arguments: The value
of the configuration file variable, and the syntax checker
symbol.  It must return either a string with an absolute path to
the configuration file, or nil, if it cannot locate the
configuration file.

The functions in this hook are called in order of appearance, until a
function returns non-nil.  The configuration file returned by that
function is then given to the syntax checker if it exists.

This variable is an abnormal hook.  See Info
node @ref{Hooks,,,elisp}.
@end format
@end deffn

With the default value of this variable, configuration files are located by the
following algorithm:


@enumerate 

@item 
If the configuration file variable contains a path a directory
separator, expand the path against the buffer's default directory and
use the resulting path as configuration file.

@item 
If the buffer has a file name, search the buffer's directory and any
ancestors thereof for the configuration file.

@item 
Eventually attempt to locate the configuration file in the user's home
directory.
@end enumerate

If any of these steps succeeds, the subsequent steps are not executed.

@node Error reporting,Error messages,Syntax checker configuration,Usage
@anchor{guide/usage error-reporting}@anchor{7}@anchor{guide/usage id9}@anchor{6e}
@section Error reporting


Errors and warnings from a syntax checker are


@itemize -

@item 
reported in the mode line or in a popup buffer, depending on the length
of the error messages,

@item 
indicated according to @ref{6f,,flycheck-indication-mode},

@item 
and highlighted in the buffer with the corresponding faces, according to
@ref{70,,flycheck-highlighting-mode}
@end itemize

@geindex flycheck-error; Emacs Lisp face
@geindex flycheck-warning; Emacs Lisp face
@geindex flycheck-info; Emacs Lisp face
@anchor{guide/usage el face flycheck-error}@anchor{71}
@deffn {Face} flycheck@w{-}error
@anchor{guide/usage el face flycheck-warning}@anchor{72}
@deffnx {Face} flycheck@w{-}warning
@anchor{guide/usage el face flycheck-info}@anchor{73}
@deffnx {Face} flycheck@w{-}info

The faces to use to highlight errors, warnings and info messages
respectively.

@cartouche
@quotation Note 
The default faces provided by GNU Emacs are ill-suited to highlight errors
because these are relatively pale and do not specify a background color or
underline.  Hence highlights are easy to overlook and even @strong{invisible}
for white space.
@end quotation
@end cartouche

For best error highlighting customize these faces, or choose a color theme
that has reasonable Flycheck faces.  The popular Solarized@footnote{https://github.com/bbatsov/solarized-emacs} and Zenburn@footnote{https://github.com/bbatsov/zenburn-emacs}
themes are known to have good Flycheck faces.
@end deffn

@geindex flycheck-highlighting-mode; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-highlighting-mode}@anchor{70}
@deffn {User Option} flycheck@w{-}highlighting@w{-}mode

@cartouche
@quotation Variable properties 
This variable is safe as a file local variable if its value satisfies the predicate @code{symbolp}. 
@end quotation
@end cartouche

@format
The highlighting mode for Flycheck errors and warnings.

The highlighting mode controls how Flycheck highlights errors in
buffers.  The following modes are known:

@code{`columns'}
     Highlight the error column.  If the error does not have a column,
     highlight the whole line.

@code{`symbols'}
     Highlight the symbol at the error column, if there is any,
     otherwise behave like @code{`columns'}.  This is the default.

@code{`sexps'}
     Highlight the expression at the error column, if there is
     any, otherwise behave like @code{`columns'}.  Note that this mode
     can be *very* slow in some major modes.

@code{`lines'}
     Highlight the whole line.

nil
     Do not highlight errors at all.  However, errors will still
     be reported in the mode line and in error message popups,
     and indicated according to @ref{6f,,`flycheck-indication-mode'}.
@end format


This user option was introduced, or its default value was changed, in version 0.14 of the flycheck package.

@end deffn

@geindex flycheck-fringe-error; Emacs Lisp face
@geindex flycheck-fringe-warning; Emacs Lisp face
@geindex flycheck-fringe-info; Emacs Lisp face
@anchor{guide/usage el face flycheck-fringe-error}@anchor{74}
@deffn {Face} flycheck@w{-}fringe@w{-}error
@anchor{guide/usage el face flycheck-fringe-warning}@anchor{75}
@deffnx {Face} flycheck@w{-}fringe@w{-}warning
@anchor{guide/usage el face flycheck-fringe-info}@anchor{76}
@deffnx {Face} flycheck@w{-}fringe@w{-}info

The faces of fringe indicators for errors, warnings and info messages
respectively.
@end deffn

@geindex flycheck-indication-mode; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-indication-mode}@anchor{6f}
@deffn {User Option} flycheck@w{-}indication@w{-}mode

@cartouche
@quotation Variable properties 
This variable is safe as a file local variable if its value satisfies the predicate @code{symbolp}. 
@end quotation
@end cartouche

@format
The indication mode for Flycheck errors and warnings.

This variable controls how Flycheck indicates errors in buffers.
May either be @code{`left-fringe'}, @code{`right-fringe'}, or nil.

If set to @code{`left-fringe'} or @code{`right-fringe'}, indicate errors and
warnings via icons in the left and right fringe respectively.

If set to nil, do not indicate errors and warnings, but just
highlight them according to @ref{70,,`flycheck-highlighting-mode'}.
@end format
@end deffn

You can also completely customize error processing by hooking into Flycheck:

@geindex flycheck-process-error-functions; Emacs Lisp hook
@anchor{guide/usage el variable flycheck-process-error-functions}@anchor{77}
@deffn {Hook} flycheck@w{-}process@w{-}error@w{-}functions

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Functions to process errors.

Each function in this hook must accept a single argument: A
Flycheck error to process.

All functions in this hook are called in order of appearance,
until a function returns non-nil.  Thus, a function in this hook
may return nil, to allow for further processing of the error, or
any non-nil value, to indicate that the error was fully processed
and inhibit any further processing.

The functions are called for each newly parsed error immediately
after the corresponding syntax checker finished.  At this stage,
the overlays from the previous syntax checks are still present,
and there may be further syntax checkers in the chain.

This variable is an abnormal hook.  See Info
node @ref{Hooks,,,elisp}.
@end format


@subsubheading See also


@ref{78,,Error API}



This hook was introduced, or its default value was changed, in version 0.13 of the flycheck package.

@end deffn

If you hover a highlighted error with the mouse, a tooltip with the top-most
error message will be shown.

Ultimately, you can clear all reported errors at once:

@geindex flycheck-clear; Emacs Lisp command

@deffn {Command} C@w{-}c ! C
@anchor{guide/usage el function flycheck-clear}@anchor{79}
@deffnx {Command} M@w{-}x flycheck@w{-}clear

Clear all Flycheck errors and warnings in the current buffer.

You should not normally need this command, because Flycheck checks the buffer
periodically anyway.
@end deffn

@node Error messages,Error list<2>,Error reporting,Usage
@anchor{guide/usage id10}@anchor{7a}@anchor{guide/usage error-messages}@anchor{7b}
@section Error messages


Flycheck also displays error messages under point after a short delay:

@geindex flycheck-display-errors-delay; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-display-errors-delay}@anchor{7c}
@deffn {User Option} flycheck@w{-}display@w{-}errors@w{-}delay

@cartouche
@quotation Variable properties 
This variable is safe as a file local variable if its value satisfies the predicate @code{numberp}. 
@end quotation
@end cartouche

@format
Delay in seconds before displaying errors at point.

Use floating point numbers to express fractions of seconds.
@end format


This user option was introduced, or its default value was changed, in version 0.15 of the flycheck package.

@end deffn

The error is displayed via @ref{28,,flycheck-display-errors-function}:

@geindex flycheck-display-errors-function; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-display-errors-function}@anchor{28}
@deffn {User Option} flycheck@w{-}display@w{-}errors@w{-}function

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Function to display error messages.

If set to a function, call the function with the list of errors
to display as single argument.  Each error is an instance of the
@code{`flycheck-error'} struct.

If set to nil, do not display errors at all.
@end format


@subsubheading See also


The flycheck-pos-tip@footnote{https://github.com/flycheck/flycheck-pos-tip} extension provides a display function to show
errors at point in a graphical popup.



This user option was introduced, or its default value was changed, in version 0.13 of the flycheck package.

@end deffn

The default function displays the error messages in the echo area:

@geindex flycheck-display-error-messages; Emacs Lisp function
@anchor{guide/usage el function flycheck-display-error-messages}@anchor{7d}
@deffn {Function} flycheck@w{-}display@w{-}error@w{-}messages errors

@format
Display the messages of ERRORS.

Concatenate all non-nil messages of ERRORS separated by empty
lines, and display them with @code{`display-message-or-buffer'}, which
shows the messages either in the echo area or in a separate
buffer, depending on the number of lines.  See Info
node @ref{Displaying Messages,,,elisp} for more information.

In the latter case, show messages in
@code{`flycheck-error-message-buffer'}.
@end format
@end deffn

Alternatively, the following error display functions are available:

@geindex flycheck-display-error-messages-unless-error-list; Emacs Lisp function
@anchor{guide/usage el function flycheck-display-error-messages-unless-error-list}@anchor{7e}
@deffn {Function} flycheck@w{-}display@w{-}error@w{-}messages@w{-}unless@w{-}error@w{-}list errors

@format
Show messages of ERRORS unless the error list is visible.

Like @ref{7d,,`flycheck-display-error-messages'}, but only if the error
list (see @ref{47,,`flycheck-list-errors'}) is not visible in any window in
the current frame.
@end format
@end deffn

You can also work with the error messages at point, and copy them into the kill
ring or search them on Google:

@geindex flycheck-copy-messages-as-kill; Emacs Lisp command

@deffn {Command} C@w{-}c ! C@w{-}w
@anchor{guide/usage el function flycheck-copy-messages-as-kill}@anchor{7f}
@deffnx {Command} M@w{-}x flycheck@w{-}copy@w{-}messages@w{-}as@w{-}kill

Copy all Flycheck error messages at the current point into kill ring.
@end deffn

@geindex flycheck-google-messages; Emacs Lisp command

@deffn {Command} C@w{-}c ! /
@anchor{guide/usage el function flycheck-google-messages}@anchor{80}
@deffnx {Command} M@w{-}x flycheck@w{-}google@w{-}messages

Google for all Flycheck error messages at the current point.

If there are more than @ref{81,,flycheck-google-max-messages} errors at
point, signal an error, to avoid spamming your browser with Google tabs.

Requires the Google This@footnote{https://github.com/Bruce-Connor/emacs-google-this} library, which is available on MELPA@footnote{http://melpa.org}.

@geindex flycheck-google-max-messages; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-google-max-messages}@anchor{81}
@deffn {User Option} flycheck@w{-}google@w{-}max@w{-}messages

@cartouche
@quotation Variable properties 
This variable is safe as a file local variable if its value satisfies the predicate @code{numberp}. 
@end quotation
@end cartouche

@format
How many messages to google at once.

If set to an integer, @ref{80,,`flycheck-google-messages'} will signal an
error if there are more Flycheck messages at point than the value
of this variable.

If set to nil, @ref{80,,`flycheck-google-messages'} will always google *all*
messages at point.  This setting is *not* recommended.
@end format


This user option was introduced, or its default value was changed, in version 0.10 of the flycheck package.

@end deffn
@end deffn

@node Error list<2>,Error navigation,Error messages,Usage
@anchor{guide/usage id11}@anchor{82}@anchor{guide/usage error-list}@anchor{83}
@section Error list


You can also show a list with all errors in the current buffer:

@geindex flycheck-list-errors; Emacs Lisp command
@geindex list-flycheck-errors; Emacs Lisp command

@deffn {Command} C@w{-}c ! l
@anchor{guide/usage el function flycheck-list-errors}@anchor{47}
@deffnx {Command} M@w{-}x flycheck@w{-}list@w{-}errors
@anchor{guide/usage el function list-flycheck-errors}@anchor{84}
@deffnx {Command} M@w{-}x list@w{-}flycheck@w{-}errors

List all errors in the current buffer in a separate buffer.

The error list automatically refreshes after a syntax check, and follows the
current buffer and window, that is, if you switch to another buffer or
window, the error list is updated to show the errors of the new buffer or
window.
@end deffn

Every time the error list refreshes,
@ref{85,,flycheck-error-list-after-refresh-hook} is run:

@geindex flycheck-error-list-after-refresh-hook; Emacs Lisp hook
@anchor{guide/usage el variable flycheck-error-list-after-refresh-hook}@anchor{85}
@deffn {Hook} flycheck@w{-}error@w{-}list@w{-}after@w{-}refresh@w{-}hook

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Functions to run after the error list was refreshed.

This hook is run whenever the error list is refreshed.

This variable is a normal hook.  See Info node @ref{Hooks,,,elisp}.
@end format


This hook was introduced, or its default value was changed, in version 0.21 of the flycheck package.

@end deffn

When you move the point in the current buffer while the error list is visible,
all errors on the current line are highlighted in the error list with
@ref{86,,flycheck-error-list-highlight}:

@geindex flycheck-error-list-highlight; Emacs Lisp face
@anchor{guide/usage el face flycheck-error-list-highlight}@anchor{86}
@deffn {Face} flycheck@w{-}error@w{-}list@w{-}highlight

@format
Flycheck face to highlight errors in the error list.
@end format


This face was introduced, or its default value was changed, in version 0.15 of the flycheck package.

@end deffn

You can customize the appearance of the line and column numbers and of the
syntax checker name:

@geindex flycheck-error-list-line-number; Emacs Lisp face
@anchor{guide/usage el face flycheck-error-list-line-number}@anchor{87}
@deffn {Face} flycheck@w{-}error@w{-}list@w{-}line@w{-}number

@format
Face for line numbers in the error list.
@end format
@end deffn

@geindex flycheck-error-list-column-number; Emacs Lisp face
@anchor{guide/usage el face flycheck-error-list-column-number}@anchor{88}
@deffn {Face} flycheck@w{-}error@w{-}list@w{-}column@w{-}number

@format
Face for line numbers in the error list.
@end format
@end deffn

@geindex flycheck-error-list-checker-name; Emacs Lisp face
@anchor{guide/usage el face flycheck-error-list-checker-name}@anchor{89}
@deffn {Face} flycheck@w{-}error@w{-}list@w{-}checker@w{-}name

@format
Face for the syntax checker name in the error list.
@end format
@end deffn

@node Error navigation,Mode line,Error list<2>,Usage
@anchor{guide/usage id12}@anchor{8a}@anchor{guide/usage error-navigation}@anchor{8b}
@section Error navigation


Flycheck integrates into standard error navigation commands of Emacs.  If @strong{no}
compilation buffer (including those from @code{M-x compile}, @code{M-x grep},
@code{M-x occur}, etc.) is visible, @code{M-g n} (@code{next-error}) and @code{M-g p}
(@code{previous-error}) will navigate between Flycheck warnings and errors in the
current buffer.  See @ref{Compilation Mode,,,emacs} for more information
about these commands.

You can disable this integration by setting
@ref{8c,,flycheck-standard-error-navigation} to nil:

@geindex flycheck-standard-error-navigation; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-standard-error-navigation}@anchor{8c}
@deffn {User Option} flycheck@w{-}standard@w{-}error@w{-}navigation

@cartouche
@quotation Variable properties 
This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to support error navigation with @code{`next-error'}.

If non-nil, enable navigation of Flycheck errors with
@code{`next-error'}, @code{`previous-error'} and @code{`first-error'}.  Otherwise,
these functions just navigate errors from compilation modes.

Flycheck error navigation with @ref{45,,`flycheck-next-error'},
@ref{46,,`flycheck-previous-error'} and @ref{8d,,`flycheck-first-error'} is always
enabled, regardless of the value of this variable.

Note that this setting only takes effect when @ref{4e,,`flycheck-mode'} is
enabled.  Changing it will not affect buffers which already have
@ref{4e,,`flycheck-mode'} enabled.
@end format


This user option was introduced, or its default value was changed, in version 0.15 of the flycheck package.

@end deffn

Visible compilation buffers take precedence over Flycheck navigation.  If such a
buffer is visible, @code{M-g n} and @code{M-g p} will ignore Flycheck errors and
warnings, and navigate errors (or generally results) reported by the compilation
buffer instead.

To address this issue, Flycheck provides independent error navigation commands,
which are not affected by @ref{8c,,flycheck-standard-error-navigation}:

@geindex flycheck-next-error; Emacs Lisp command

@deffn {Command} C@w{-}c ! n
@anchor{guide/usage el function flycheck-next-error}@anchor{45}
@deffnx {Command} M@w{-}x flycheck@w{-}next@w{-}error

Jump to the next Flycheck error.

With prefix argument, jump forwards by as many errors as specified by
the prefix argument, e.g. @code{M-3 C-c ! n} will move to the 3rd error
from the current point.
@end deffn

@geindex flycheck-previous-error; Emacs Lisp command

@deffn {Command} C@w{-}c ! p
@anchor{guide/usage el function flycheck-previous-error}@anchor{46}
@deffnx {Command} M@w{-}x flycheck@w{-}previous@w{-}error

Jump to the previous Flycheck error.

With prefix argument, jump backwards by as many errors as specified by
the prefix argument, e.g. @code{M-3 C-c ! p} will move to the 3rd
previous error from the current point.
@end deffn

@geindex flycheck-first-error; Emacs Lisp command
@anchor{guide/usage el function flycheck-first-error}@anchor{8d}
@deffn {Command} M@w{-}x flycheck@w{-}first@w{-}error

Jump to the first Flycheck error.

With prefix argument, jump forwards to by as many errors as specified by
the prefix argument, e.g. @code{M-3 M-x flycheck-first-error} moves to
the 3rd error from the beginning of the buffer.
@end deffn

These commands consider all errors by default, but you can ignore errors below a
given level with @ref{8e,,flycheck-navigation-minimum-level}:

@geindex flycheck-navigation-minimum-level; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-navigation-minimum-level}@anchor{8e}
@deffn {User Option} flycheck@w{-}navigation@w{-}minimum@w{-}level

@cartouche
@quotation Variable properties 
This variable is safe as a file local variable if its value satisfies the predicate @code{flycheck-error-level-p}. 
@end quotation
@end cartouche

@format
The minimum level of errors to navigate.

If set to an error level, only navigate errors whose error level
is at least as severe as this one.  If nil, navigate all errors.
@end format


This user option was introduced, or its default value was changed, in version 0.21 of the flycheck package.

@end deffn

@node Mode line,,Error navigation,Usage
@anchor{guide/usage mode-line}@anchor{8f}@anchor{guide/usage id13}@anchor{90}
@section Mode line


Flycheck indicates its state in the mode line:


@table @asis

@item @code{FlyC}

There are no errors in the current buffer.

@item @code{FlyC*}

A syntax check is being performed currently.

@item @code{FlyC:3/4}

There are three errors and four warnings in the current buffer.

@item @code{FlyC-}

Automatic syntax checker selection did not find a suitable syntax checker.
See @ref{56,,Syntax checker selection} for more information.

@item @code{FlyC!}

The syntax check failed.  Inspect the @code{*Messages*} buffer for details.

@item @code{FlyC?}

The syntax check had a dubious result.  The definition of the syntax checker
may be flawed.  Inspect the @code{*Messages*} buffer for details.

This indicator should @strong{never} be displayed for built-in syntax checkers.
If it is, please report an issue to the Flycheck developers, as by
@ref{91,,Reporting issues}.
@end table

Change @ref{92,,flycheck-mode-line} to customize the mode line reporting:

@geindex flycheck-mode-line; Emacs Lisp user option
@anchor{guide/usage el variable flycheck-mode-line}@anchor{92}
@deffn {User Option} flycheck@w{-}mode@w{-}line

@cartouche
@quotation Variable properties 
This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Mode line lighter for Flycheck.

The value of this variable is a mode line template as in
@code{`mode-line-format'}.  See Info Node @ref{Mode Line Format,,,elisp} for
more information.  Note that it should contain a _single_ mode
line construct only.

Customize this variable to change how Flycheck reports its status
in the mode line.  You may use @ref{93,,`flycheck-mode-line-status-text'}
to obtain a human-readable status text, including an
error/warning count.

You may also assemble your own status text.  The current status
of Flycheck is available in @ref{94,,`flycheck-last-status-change'}.  The
errors in the current buffer are stored in
@ref{5b,,`flycheck-current-errors'}, and the function
@ref{95,,`flycheck-count-errors'} may be used to obtain the number of
errors grouped by error level.

Set this variable to nil to disable the mode line completely.
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn


@subsubheading See also


The flycheck-color-mode-line@footnote{https://github.com/flycheck/flycheck-color-mode-line} extension changes the background colour of the
mode line according to the result of the last syntax check.


@node Supported languages,Glossary,Usage,Top
@anchor{guide/languages flycheck-color-mode-line}@anchor{96}@anchor{guide/languages id1}@anchor{97}@anchor{guide/languages doc}@anchor{35}@anchor{guide/languages supported-languages}@anchor{5}
@chapter Supported languages


Flycheck supports the following 43 languages with
72 syntax checkers.

Each language has one or more syntax checkers, whose names follow a
@code{@var{language}-@var{tool}} convention, where @var{language} is the
programming language supported by this syntax checker, and @var{tool} the
specific syntax checker tool.

There are some 3rd party extensions which add support for more languages:


@itemize -

@item 
flycheck-ledger@footnote{https://github.com/purcell/flycheck-ledger} adds a syntax checker for the Ledger@footnote{http://ledger-cli.org/} accounting tool.

@item 
flycheck-mercury@footnote{https://github.com/flycheck/flycheck-mercury} adds a syntax checker for the Mercury@footnote{http://mercurylang.org/} language.
@end itemize

@menu
* Ada:: 
* AsciiDoc:: 
* C/C++:: 
* CFEngine:: 
* Chef:: 
* Coffeescript:: 
* Coq:: 
* CSS:: 
* D:: 
* Elixir:: 
* Emacs Lisp:: 
* Erlang:: 
* ERuby:: 
* Fortran:: 
* Go:: 
* Haml:: 
* Handlebars:: 
* Haskell:: 
* HTML:: 
* Javascript:: 
* JSON:: 
* LESS:: 
* Lua:: 
* Make:: 
* Perl:: 
* PHP:: 
* Puppet:: 
* Python:: 
* Racket:: 
* RPM SPEC:: 
* ReStructuredText:: 
* Ruby:: 
* Rust:: 
* Sass:: 
* Scala:: 
* Scss:: 
* Shell script languages:: 
* Slim:: 
* TeX/LaTeX:: 
* Texinfo:: 
* Verilog:: 
* XML:: 
* YAML:: 

@end menu

@node Ada,AsciiDoc,,Supported languages
@anchor{guide/languages ada}@anchor{98}
@section Ada


@geindex ada-gnat; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker ada-gnat}@anchor{99}
@deffn {Flycheck Syntax Checker} ada@w{-}gnat

@format
An Ada syntax checker using GNAT.

Uses the GNAT compiler from GCC.  See URL
`https://gcc.gnu.org/onlinedocs/gnat_ugn_unw/'@footnote{https://gcc.gnu.org/onlinedocs/gnat_ugn_unw/}.
@end format

@subsubheading Options


@geindex flycheck-gnat-include-path; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gnat-include-path}@anchor{9a}
@deffn {User Option} flycheck@w{-}gnat@w{-}include@w{-}path

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of include directories for GNAT.

The value of this variable is a list of strings, where each
string is a directory to add to the include path of gcc.
Relative paths are relative to the file being checked.

This variable is an option for the syntax checker @code{`ada-gnat'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gnat-language-standard; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gnat-language-standard}@anchor{9c}
@deffn {User Option} flycheck@w{-}gnat@w{-}language@w{-}standard

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The language standard to use in GNAT.

The value of this variable is either a string denoting a language
standard, or nil, to use the default standard. When non-nil, pass
the language standard via the @code{`-std'} option.

This variable is an option for the syntax checker @code{`ada-gnat'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gnat-warnings; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gnat-warnings}@anchor{9d}
@deffn {User Option} flycheck@w{-}gnat@w{-}warnings

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of additional Ada warnings to enable in GNAT.

The value of this variable is a list of strings, where each
string is the name of a warning category to enable. By default,
most optional warnings are recommended, as in @code{`-gnata'}.

Refer to Info Node @ref{Warning Message Control,,,gnat_ugn_unw} for
more information about GNAT warnings.

This variable is an option for the syntax checker @code{`ada-gnat'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn
@end deffn

@node AsciiDoc,C/C++,Ada,Supported languages
@anchor{guide/languages asciidoc}@anchor{9e}
@section AsciiDoc


@geindex asciidoc; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker asciidoc}@anchor{9f}
@deffn {Flycheck Syntax Checker} asciidoc

@format
A AsciiDoc syntax checker using the AsciiDoc compiler.

See URL `http://www.methods.co.nz/asciidoc'@footnote{http://www.methods.co.nz/asciidoc}.
@end format
@end deffn

@node C/C++,CFEngine,AsciiDoc,Supported languages
@anchor{guide/languages c-c}@anchor{a0}
@section C/C++


@geindex c/c++-clang; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker c/c++-clang}@anchor{a1}
@deffn {Flycheck Syntax Checker} c/c++@w{-}clang

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{a2,,c/c++-cppcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A C/C++ syntax checker using Clang.

See URL `http://clang.llvm.org/'@footnote{http://clang.llvm.org/}.
@end format

@subsubheading Options


@geindex flycheck-clang-blocks; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-blocks}@anchor{a3}
@deffn {User Option} flycheck@w{-}clang@w{-}blocks

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Enable blocks in Clang.

When non-nil, enable blocks in Clang with @code{`-fblocks'}.  See URL
`http://clang.llvm.org/docs/BlockLanguageSpec.html'@footnote{http://clang.llvm.org/docs/BlockLanguageSpec.html} for more
information about blocks.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-clang-definitions; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-definitions}@anchor{a4}
@deffn {User Option} flycheck@w{-}clang@w{-}definitions

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
Additional preprocessor definitions for Clang.

The value of this variable is a list of strings, where each
string is an additional definition to pass to Clang, via the @code{`-D'}
option.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.15 of the flycheck package.

@end deffn

@geindex flycheck-clang-include-path; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-include-path}@anchor{a5}
@deffn {User Option} flycheck@w{-}clang@w{-}include@w{-}path

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of include directories for Clang.

The value of this variable is a list of strings, where each
string is a directory to add to the include path of Clang.
Relative paths are relative to the file being checked.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.14 of the flycheck package.

@end deffn

@geindex flycheck-clang-includes; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-includes}@anchor{a6}
@deffn {User Option} flycheck@w{-}clang@w{-}includes

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of additional include files for Clang.

The value of this variable is a list of strings, where each
string is a file to include before syntax checking.  Relative
paths are relative to the file being checked.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.15 of the flycheck package.

@end deffn

@geindex flycheck-clang-language-standard; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-language-standard}@anchor{a7}
@deffn {User Option} flycheck@w{-}clang@w{-}language@w{-}standard

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The language standard to use in Clang.

The value of this variable is either a string denoting a language
standard, or nil, to use the default standard.  When non-nil,
pass the language standard via the @code{`-std'} option.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.15 of the flycheck package.

@end deffn

@geindex flycheck-clang-ms-extensions; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-ms-extensions}@anchor{a8}
@deffn {User Option} flycheck@w{-}clang@w{-}ms@w{-}extensions

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to enable Microsoft extensions to C/C++ in Clang.

When non-nil, enable Microsoft extensions to C/C++ via
@code{`-fms-extensions'}.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.16 of the flycheck package.

@end deffn

@geindex flycheck-clang-no-exceptions; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-no-exceptions}@anchor{a9}
@deffn {User Option} flycheck@w{-}clang@w{-}no@w{-}exceptions

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to disable exceptions in Clang.

When non-nil, disable exceptions for syntax checks, via
@code{`-fno-exceptions'}.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-clang-no-rtti; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-no-rtti}@anchor{aa}
@deffn {User Option} flycheck@w{-}clang@w{-}no@w{-}rtti

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to disable RTTI in Clang.

When non-nil, disable RTTI for syntax checks, via @code{`-fno-rtti'}.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.15 of the flycheck package.

@end deffn

@geindex flycheck-clang-standard-library; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-standard-library}@anchor{ab}
@deffn {User Option} flycheck@w{-}clang@w{-}standard@w{-}library

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The standard library to use for Clang.

The value of this variable is the name of a standard library as
string, or nil to use the default standard library.

Refer to the Clang manual at URL
`http://clang.llvm.org/docs/UsersManual.html'@footnote{http://clang.llvm.org/docs/UsersManual.html} for more
information about the standard library.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.15 of the flycheck package.

@end deffn

@geindex flycheck-clang-warnings; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-clang-warnings}@anchor{1b}
@deffn {User Option} flycheck@w{-}clang@w{-}warnings

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of additional warnings to enable in Clang.

The value of this variable is a list of strings, where each string
is the name of a warning category to enable.  By default, all
recommended warnings and some extra warnings are enabled (as by
@code{`-Wall'} and @code{`-Wextra'} respectively).

Refer to the Clang manual at URL
`http://clang.llvm.org/docs/UsersManual.html'@footnote{http://clang.llvm.org/docs/UsersManual.html} for more
information about warnings.

This variable is an option for the syntax checker @code{`c/c++-clang'}
@end format


This user option was introduced, or its default value was changed, in version 0.14 of the flycheck package.

@end deffn
@end deffn

@geindex c/c++-gcc; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker c/c++-gcc}@anchor{ac}
@deffn {Flycheck Syntax Checker} c/c++@w{-}gcc

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{a2,,c/c++-cppcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A C/C++ syntax checker using GCC.

Requires GCC 4.8 or newer.  See URL `https://gcc.gnu.org/'@footnote{https://gcc.gnu.org/}.
@end format

@subsubheading Options


@geindex flycheck-gcc-definitions; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gcc-definitions}@anchor{ad}
@deffn {User Option} flycheck@w{-}gcc@w{-}definitions

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
Additional preprocessor definitions for GCC.

The value of this variable is a list of strings, where each
string is an additional definition to pass to GCC, via the @code{`-D'}
option.

This variable is an option for the syntax checker @code{`c/c++-gcc'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gcc-include-path; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gcc-include-path}@anchor{ae}
@deffn {User Option} flycheck@w{-}gcc@w{-}include@w{-}path

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of include directories for GCC.

The value of this variable is a list of strings, where each
string is a directory to add to the include path of gcc.
Relative paths are relative to the file being checked.

This variable is an option for the syntax checker @code{`c/c++-gcc'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gcc-includes; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gcc-includes}@anchor{af}
@deffn {User Option} flycheck@w{-}gcc@w{-}includes

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of additional include files for GCC.

The value of this variable is a list of strings, where each
string is a file to include before syntax checking.  Relative
paths are relative to the file being checked.

This variable is an option for the syntax checker @code{`c/c++-gcc'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gcc-language-standard; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gcc-language-standard}@anchor{b0}
@deffn {User Option} flycheck@w{-}gcc@w{-}language@w{-}standard

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The language standard to use in GCC.

The value of this variable is either a string denoting a language
standard, or nil, to use the default standard.  When non-nil,
pass the language standard via the @code{`-std'} option.

This variable is an option for the syntax checker @code{`c/c++-gcc'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gcc-no-exceptions; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gcc-no-exceptions}@anchor{b1}
@deffn {User Option} flycheck@w{-}gcc@w{-}no@w{-}exceptions

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to disable exceptions in GCC.

When non-nil, disable exceptions for syntax checks, via
@code{`-fno-exceptions'}.

This variable is an option for the syntax checker @code{`c/c++-gcc'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gcc-no-rtti; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gcc-no-rtti}@anchor{b2}
@deffn {User Option} flycheck@w{-}gcc@w{-}no@w{-}rtti

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to disable RTTI in GCC.

When non-nil, disable RTTI for syntax checks, via @code{`-fno-rtti'}.

This variable is an option for the syntax checker @code{`c/c++-gcc'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gcc-openmp; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gcc-openmp}@anchor{b3}
@deffn {User Option} flycheck@w{-}gcc@w{-}openmp

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to enable OpenMP in GCC.

When non-nil, enable OpenMP for syntax checkers, via
@code{`-fopenmp'}.

This variable is an option for the syntax checker @code{`c/c++-gcc'}
@end format


This user option was introduced, or its default value was changed, in version 0.21 of the flycheck package.

@end deffn

@geindex flycheck-gcc-warnings; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gcc-warnings}@anchor{b4}
@deffn {User Option} flycheck@w{-}gcc@w{-}warnings

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of additional warnings to enable in GCC.

The value of this variable is a list of strings, where each string
is the name of a warning category to enable.  By default, all
recommended warnings and some extra warnings are enabled (as by
@code{`-Wall'} and @code{`-Wextra'} respectively).

Refer to the gcc manual at URL
`https://gcc.gnu.org/onlinedocs/gcc/'@footnote{https://gcc.gnu.org/onlinedocs/gcc/} for more information about
warnings.

This variable is an option for the syntax checker @code{`c/c++-gcc'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn
@end deffn

@geindex c/c++-cppcheck; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker c/c++-cppcheck}@anchor{a2}
@deffn {Flycheck Syntax Checker} c/c++@w{-}cppcheck

@format
A C/C++ checker using cppcheck.

See URL `http://cppcheck.sourceforge.net/'@footnote{http://cppcheck.sourceforge.net/}.
@end format

@subsubheading Options


@geindex flycheck-cppcheck-checks; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-cppcheck-checks}@anchor{b5}
@deffn {User Option} flycheck@w{-}cppcheck@w{-}checks

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
Enabled checks for Cppcheck.

The value of this variable is a list of strings, where each
string is the name of an additional check to enable.  By default,
all coding style checks are enabled.

See section "Enable message" in the Cppcheck manual at URL
`http://cppcheck.sourceforge.net/manual.pdf'@footnote{http://cppcheck.sourceforge.net/manual.pdf}, and the
documentation of the @code{`--enable'} option for more information,
including a list of supported checks.

This variable is an option for the syntax checker @code{`c/c++-cppcheck'}
@end format


This user option was introduced, or its default value was changed, in version 0.14 of the flycheck package.

@end deffn

@geindex flycheck-cppcheck-inconclusive; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-cppcheck-inconclusive}@anchor{b6}
@deffn {User Option} flycheck@w{-}cppcheck@w{-}inconclusive

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to enable Cppcheck inconclusive checks.

When non-nil, enable Cppcheck inconclusive checks.  This allows Cppcheck to
report warnings it's not certain of, but it may result in false positives.

This will have no effect when using Cppcheck 1.53 and older.

This variable is an option for the syntax checker @code{`c/c++-cppcheck'}
@end format


This user option was introduced, or its default value was changed, in version 0.19 of the flycheck package.

@end deffn
@end deffn


@subsubheading See also


The flycheck-google-cpplint@footnote{https://github.com/flycheck/flycheck-google-cpplint} extension adds a syntax checker using Google's
C++ style checker.


@node CFEngine,Chef,C/C++,Supported languages
@anchor{guide/languages cfengine}@anchor{b7}@anchor{guide/languages flycheck-google-cpplint}@anchor{b8}
@section CFEngine


@geindex cfengine; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker cfengine}@anchor{b9}
@deffn {Flycheck Syntax Checker} cfengine

@format
A CFEngine syntax checker using cf-promises.

See URL `http://cfengine.com/'@footnote{http://cfengine.com/}.
@end format
@end deffn

@node Chef,Coffeescript,CFEngine,Supported languages
@anchor{guide/languages chef}@anchor{ba}
@section Chef



@subsubheading See also


Chef@footnote{https://www.getchef.com/chef/}


@geindex chef-foodcritic; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker chef-foodcritic}@anchor{bb}
@deffn {Flycheck Syntax Checker} chef@w{-}foodcritic

@format
A Chef cookbooks syntax checker using Foodcritic.

See URL `http://acrmp.github.io/foodcritic/'@footnote{http://acrmp.github.io/foodcritic/}.
@end format
@end deffn

@node Coffeescript,Coq,Chef,Supported languages
@anchor{guide/languages coffeescript}@anchor{bc}@anchor{guide/languages id3}@anchor{bd}
@section Coffeescript


@geindex coffee; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker coffee}@anchor{be}
@deffn {Flycheck Syntax Checker} coffee

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{bf,,coffee-coffeelint}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A CoffeeScript syntax checker using coffee.

See URL `http://coffeescript.org/'@footnote{http://coffeescript.org/}.
@end format
@end deffn

@geindex coffee-coffeelint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker coffee-coffeelint}@anchor{bf}
@deffn {Flycheck Syntax Checker} coffee@w{-}coffeelint

@format
A CoffeeScript style checker using coffeelint.

This syntax checker requires coffeelint 1.0 or newer.

See URL `http://www.coffeelint.org/'@footnote{http://www.coffeelint.org/}.
@end format

@subsubheading Configuration file


@geindex flycheck-coffeelintrc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-coffeelintrc}@anchor{c0}
@deffn {User Option} flycheck@w{-}coffeelintrc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`coffee-coffeelint'}
@end format
@end deffn
@end deffn

@node Coq,CSS,Coffeescript,Supported languages
@anchor{guide/languages coq}@anchor{c1}
@section Coq


@geindex coq; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker coq}@anchor{c2}
@deffn {Flycheck Syntax Checker} coq

@format
A Coq syntax checker using the Coq compiler.

See URL `http://coq.inria.fr/'@footnote{http://coq.inria.fr/}.
@end format
@end deffn

@node CSS,D,Coq,Supported languages
@anchor{guide/languages css}@anchor{c3}
@section CSS


@geindex css-csslint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker css-csslint}@anchor{c4}
@deffn {Flycheck Syntax Checker} css@w{-}csslint

@format
A CSS syntax and style checker using csslint.

See URL `https://github.com/CSSLint/csslint'@footnote{https://github.com/CSSLint/csslint}.
@end format
@end deffn

@node D,Elixir,CSS,Supported languages
@anchor{guide/languages d}@anchor{c5}
@section D


@geindex d-dmd; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker d-dmd}@anchor{c6}
@deffn {Flycheck Syntax Checker} d@w{-}dmd

@format
A D syntax checker using the DMD compiler.

Requires DMD 2.066 or newer.  See URL `http://dlang.org/'@footnote{http://dlang.org/}.
@end format

@subsubheading Options


@geindex flycheck-dmd-include-path; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-dmd-include-path}@anchor{c7}
@deffn {User Option} flycheck@w{-}dmd@w{-}include@w{-}path

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of include directories for dmd.

The value of this variable is a list of strings, where each
string is a directory to add to the include path of dmd.
Relative paths are relative to the file being checked.

This variable is an option for the syntax checker @code{`d-dmd'}
@end format


This user option was introduced, or its default value was changed, in version 0.18 of the flycheck package.

@end deffn
@end deffn


@subsubheading See also


The flycheck-d-unittest@footnote{https://github.com/flycheck/flycheck-d-unittest} extension adds a syntax checker that runs D unit
tests on the fly.


@node Elixir,Emacs Lisp,D,Supported languages
@anchor{guide/languages flycheck-d-unittest}@anchor{c8}@anchor{guide/languages elixir}@anchor{c9}
@section Elixir


@geindex elixir; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker elixir}@anchor{ca}
@deffn {Flycheck Syntax Checker} elixir

@format
An Elixir syntax checker using the Elixir interpreter.

See URL `http://elixir-lang.org/'@footnote{http://elixir-lang.org/}.
@end format
@end deffn

@node Emacs Lisp,Erlang,Elixir,Supported languages
@anchor{guide/languages emacs-lisp}@anchor{cb}
@section Emacs Lisp



@subsubheading See also


Emacs@footnote{http://www.gnu.org/software/emacs/}, Emacs Lisp reference@footnote{http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html}


@geindex emacs-lisp; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker emacs-lisp}@anchor{cc}
@deffn {Flycheck Syntax Checker} emacs@w{-}lisp

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{cd,,emacs-lisp-checkdoc}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
An Emacs Lisp syntax checker using the Emacs Lisp Byte compiler.

See Info Node @ref{Byte Compilation,,,elisp}.
@end format

@subsubheading Options


@geindex flycheck-emacs-lisp-initialize-packages; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-emacs-lisp-initialize-packages}@anchor{ce}
@deffn {User Option} flycheck@w{-}emacs@w{-}lisp@w{-}initialize@w{-}packages

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Whether to initialize packages in the Emacs Lisp syntax checker.

To initialize packages, call @code{`package-initialize'} before
byte-compiling the file to check.

When nil, never initialize packages.  When @code{`auto'}, initialize
packages only when checking files from @code{`user-emacs-directory'}.
For any other non-nil value, always initialize packages.

This variable is an option for the syntax checker @code{`emacs-lisp'}
@end format


This user option was introduced, or its default value was changed, in version 0.14 of the flycheck package.

@end deffn

@geindex flycheck-emacs-lisp-load-path; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-emacs-lisp-load-path}@anchor{cf}
@deffn {User Option} flycheck@w{-}emacs@w{-}lisp@w{-}load@w{-}path

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Load path to use in the Emacs Lisp syntax checker.

When set to a list of strings, add each directory in this list to
the @code{`load-path'} before invoking the byte compiler.  Relative
paths in this list are expanded against the @code{`default-directory'}
of the buffer to check.  When nil, only use the built-in
@code{`load-path'} of Emacs.

The directory of the file being checked is always part of the
@code{`load-path'} while checking, regardless of the value of this
variable.

Set this variable to @code{`load-path'} to use the @code{`load-path'} of your
Emacs session for syntax checking.

Note that changing this variable can lead to wrong results of the
syntax check, e.g. if an unexpected version of a required library
is used.

This variable is an option for the syntax checker @code{`emacs-lisp'}
@end format


This user option was introduced, or its default value was changed, in version 0.14 of the flycheck package.

@end deffn

@geindex flycheck-emacs-lisp-package-user-dir; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-emacs-lisp-package-user-dir}@anchor{d0}
@deffn {User Option} flycheck@w{-}emacs@w{-}lisp@w{-}package@w{-}user@w{-}dir

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable may be risky if used as a file-local variable.  
@end quotation
@end cartouche

@format
Package directory for the Emacs Lisp syntax checker.

When set to a string, set @code{`package-user-dir'} to the value of this
variable before initializing packages.

This variable has no effect, if
@ref{ce,,`flycheck-emacs-lisp-initialize-packages'} is nil.

This variable is an option for the syntax checker @code{`emacs-lisp'}
@end format


This user option was introduced, or its default value was changed, in version 0.14 of the flycheck package.

@end deffn


@subsubheading See also


With the flycheck-cask@footnote{https://github.com/flycheck/flycheck-cask} extension this syntax checker automatically uses
packages from Cask@footnote{https://github.com/cask/cask} projects.

@end deffn

@geindex emacs-lisp-checkdoc; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker emacs-lisp-checkdoc}@anchor{cd}
@deffn {Flycheck Syntax Checker} emacs@w{-}lisp@w{-}checkdoc

@format
An Emacs Lisp style checker using CheckDoc.

The checker runs @code{`checkdoc-current-buffer'}.
@end format


@subsubheading See also


@ref{Documentation Tips,,,elisp}

@end deffn

@node Erlang,ERuby,Emacs Lisp,Supported languages
@anchor{guide/languages erlang}@anchor{d1}@anchor{guide/languages cask}@anchor{d2}
@section Erlang


@geindex erlang; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker erlang}@anchor{d3}
@deffn {Flycheck Syntax Checker} erlang

@format
An Erlang syntax checker using the Erlang interpreter.

See URL `http://www.erlang.org/'@footnote{http://www.erlang.org/}.
@end format
@end deffn

@node ERuby,Fortran,Erlang,Supported languages
@anchor{guide/languages eruby}@anchor{d4}
@section ERuby


@geindex eruby-erubis; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker eruby-erubis}@anchor{d5}
@deffn {Flycheck Syntax Checker} eruby@w{-}erubis

@format
A eRuby syntax checker using the @code{`erubis'} command.

See URL `http://www.kuwata-lab.com/erubis/'@footnote{http://www.kuwata-lab.com/erubis/}.
@end format
@end deffn

@node Fortran,Go,ERuby,Supported languages
@anchor{guide/languages fortran}@anchor{d6}
@section Fortran


@geindex fortran-gfortran; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker fortran-gfortran}@anchor{d7}
@deffn {Flycheck Syntax Checker} fortran@w{-}gfortran

@format
An Fortran syntax checker using GCC.

Uses GCC's Fortran compiler gfortran.  See URL
`https://gcc.gnu.org/onlinedocs/gfortran/'@footnote{https://gcc.gnu.org/onlinedocs/gfortran/}.
@end format

@subsubheading Options


@geindex flycheck-gfortran-include-path; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gfortran-include-path}@anchor{d8}
@deffn {User Option} flycheck@w{-}gfortran@w{-}include@w{-}path

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of include directories for GCC Fortran.

The value of this variable is a list of strings, where each
string is a directory to add to the include path of gcc.
Relative paths are relative to the file being checked.

This variable is an option for the syntax checker @code{`fortran-gfortran'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gfortran-language-standard; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gfortran-language-standard}@anchor{d9}
@deffn {User Option} flycheck@w{-}gfortran@w{-}language@w{-}standard

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The language standard to use in GFortran.

The value of this variable is either a string denoting a language
standard, or nil, to use the default standard.  When non-nil,
pass the language standard via the @code{`-std'} option.

This variable is an option for the syntax checker @code{`fortran-gfortran'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-gfortran-layout; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gfortran-layout}@anchor{da}
@deffn {User Option} flycheck@w{-}gfortran@w{-}layout

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  
@end quotation
@end cartouche

@format
The source code layout to use in GFortran.

The value of this variable is one of the following symbols:

nil
     Let gfortran determine the layout from the extension

@code{`free'}
     Use free form layout


@code{`fixed'}
     Use fixed form layout

In any other case, an error is signaled.

This variable is an option for the syntax checker @code{`fortran-gfortran'}
@end format
@end deffn

@geindex flycheck-gfortran-warnings; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gfortran-warnings}@anchor{db}
@deffn {User Option} flycheck@w{-}gfortran@w{-}warnings

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  
@end quotation
@end cartouche

@format
A list of warnings for GCC Fortran.

The value of this variable is a list of strings, where each string
is the name of a warning category to enable.  By default, all
recommended warnings and some extra warnings are enabled (as by
@code{`-Wall'} and @code{`-Wextra'} respectively).

Refer to the gfortran manual at URL
`https://gcc.gnu.org/onlinedocs/gfortran/'@footnote{https://gcc.gnu.org/onlinedocs/gfortran/} for more information
about warnings

This variable is an option for the syntax checker @code{`fortran-gfortran'}
@end format
@end deffn
@end deffn

@node Go,Haml,Fortran,Supported languages
@anchor{guide/languages go}@anchor{dc}
@section Go


@geindex go-gofmt; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker go-gofmt}@anchor{dd}
@deffn {Flycheck Syntax Checker} go@w{-}gofmt

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{de,,go-golint}, if there are no errors above level @code{warning}

@item 
@ref{df,,go-vet}, if there are no errors above level @code{warning}

@item 
@ref{e0,,go-build}, if there are no errors above level @code{warning}

@item 
@ref{e1,,go-test}, if there are no errors above level @code{warning}

@item 
@ref{e2,,go-errcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Go syntax and style checker using the gofmt utility.

See URL `http://golang.org/cmd/gofmt/'@footnote{http://golang.org/cmd/gofmt/}.
@end format
@end deffn

@geindex go-golint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker go-golint}@anchor{de}
@deffn {Flycheck Syntax Checker} go@w{-}golint

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{df,,go-vet}

@item 
@ref{e0,,go-build}

@item 
@ref{e1,,go-test}

@item 
@ref{e2,,go-errcheck}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Go style checker using Golint.

See URL `https://github.com/golang/lint'@footnote{https://github.com/golang/lint}.
@end format
@end deffn

@geindex go-vet; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker go-vet}@anchor{df}
@deffn {Flycheck Syntax Checker} go@w{-}vet

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{e0,,go-build}

@item 
@ref{e1,,go-test}

@item 
@ref{e2,,go-errcheck}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Go syntax checker using the @code{go tool vet} command.

See URL `http://golang.org/cmd/go/'@footnote{http://golang.org/cmd/go/} and URL
`http://godoc.org/code.google.com/p/go.tools/cmd/vet'@footnote{http://godoc.org/code.google.com/p/go.tools/cmd/vet}.
@end format

@subsubheading Options


@geindex flycheck-go-vet-print-functions; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-go-vet-print-functions}@anchor{e3}
@deffn {User Option} flycheck@w{-}go@w{-}vet@w{-}print@w{-}functions

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A comma-separated list of print-like functions for @code{go tool vet}.

Go vet will check these functions for format string problems and
issues, such as a mismatch between the number of formats used,
and the number of arguments given.

Each entry is in the form Name:N where N is the zero-based
argument position of the first argument involved in the print:
either the format or the first print argument for non-formatted
prints.  For example, if you have Warn and Warnf functions that
take an io.Writer as their first argument, like Fprintf,
-printfuncs=Warn:1,Warnf:1 

This variable is an option for the syntax checker @code{`go-vet'}
@end format
@end deffn
@end deffn

@geindex go-build; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker go-build}@anchor{e0}
@deffn {Flycheck Syntax Checker} go@w{-}build

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{e2,,go-errcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Go syntax and type checker using the @code{go build} command.

See URL `http://golang.org/cmd/go'@footnote{http://golang.org/cmd/go}.
@end format
@end deffn

@geindex go-test; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker go-test}@anchor{e1}
@deffn {Flycheck Syntax Checker} go@w{-}test

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{e2,,go-errcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Go syntax and type checker using the @code{go test} command.

See URL `http://golang.org/cmd/go'@footnote{http://golang.org/cmd/go}.
@end format
@end deffn

@geindex go-errcheck; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker go-errcheck}@anchor{e2}
@deffn {Flycheck Syntax Checker} go@w{-}errcheck

@format
A Go checker for unchecked errors.

See URL `https://github.com/kisielk/errcheck'@footnote{https://github.com/kisielk/errcheck}.
@end format
@end deffn

@node Haml,Handlebars,Go,Supported languages
@anchor{guide/languages haml}@anchor{e4}
@section Haml


@geindex haml; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker haml}@anchor{e5}
@deffn {Flycheck Syntax Checker} haml

@format
A Haml syntax checker using the Haml compiler.

See URL `http://haml.info'@footnote{http://haml.info}.
@end format
@end deffn

@node Handlebars,Haskell,Haml,Supported languages
@anchor{guide/languages handlebars}@anchor{e6}
@section Handlebars


@geindex handlebars; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker handlebars}@anchor{e7}
@deffn {Flycheck Syntax Checker} handlebars

@format
A Handlebars syntax checker using the Handlebars compiler.

See URL `http://handlebarsjs.com/'@footnote{http://handlebarsjs.com/}.
@end format
@end deffn

@node Haskell,HTML,Handlebars,Supported languages
@anchor{guide/languages haskell}@anchor{e8}
@section Haskell


@geindex haskell-ghc; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker haskell-ghc}@anchor{e9}
@deffn {Flycheck Syntax Checker} haskell@w{-}ghc

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{ea,,haskell-hlint}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Haskell syntax and type checker using ghc.

See URL `http://www.haskell.org/ghc/'@footnote{http://www.haskell.org/ghc/}.
@end format

@subsubheading Options


@geindex flycheck-ghc-language-extensions; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-ghc-language-extensions}@anchor{eb}
@deffn {User Option} flycheck@w{-}ghc@w{-}language@w{-}extensions

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
Language extensions for GHC.

The value of this variable is a list of strings, where each
string is a Haskell language extension, as in the LANGUAGE
pragma.  Each extension is enabled via @code{`-X'}.

This variable is an option for the syntax checker @code{`haskell-ghc'}
@end format


This user option was introduced, or its default value was changed, in version 0.19 of the flycheck package.

@end deffn

@geindex flycheck-ghc-no-user-package-database; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-ghc-no-user-package-database}@anchor{ec}
@deffn {User Option} flycheck@w{-}ghc@w{-}no@w{-}user@w{-}package@w{-}database

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to disable the user package database in GHC.

When non-nil, disable the user package database in GHC, via
@code{`-no-user-package-db'}.

This variable is an option for the syntax checker @code{`haskell-ghc'}
@end format


This user option was introduced, or its default value was changed, in version 0.16 of the flycheck package.

@end deffn

@geindex flycheck-ghc-package-databases; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-ghc-package-databases}@anchor{ed}
@deffn {User Option} flycheck@w{-}ghc@w{-}package@w{-}databases

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
Additional module databases for GHC.

The value of this variable is a list of strings, where each
string is a directory of a package database.  Each package
database is given to GHC via @code{`-package-db'}.

This variable is an option for the syntax checker @code{`haskell-ghc'}
@end format


This user option was introduced, or its default value was changed, in version 0.16 of the flycheck package.

@end deffn

@geindex flycheck-ghc-search-path; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-ghc-search-path}@anchor{ee}
@deffn {User Option} flycheck@w{-}ghc@w{-}search@w{-}path

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
Module search path for GHC.

The value of this variable is a list of strings, where each
string is a directory containing Haskell modules.  Each directory
is added to the GHC search path via @code{`-i'}.

This variable is an option for the syntax checker @code{`haskell-ghc'}
@end format


This user option was introduced, or its default value was changed, in version 0.16 of the flycheck package.

@end deffn


@subsubheading See also


The flycheck-haskell@footnote{https://github.com/flycheck/flycheck-haskell} extension configures this syntax checker according
to the corresponding Cabal project, and adds Cabal sandboxes.

@end deffn

@geindex haskell-hlint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker haskell-hlint}@anchor{ea}
@deffn {Flycheck Syntax Checker} haskell@w{-}hlint

@format
A Haskell style checker using hlint.

See URL `https://github.com/ndmitchell/hlint'@footnote{https://github.com/ndmitchell/hlint}.
@end format
@end deffn


@subsubheading See also


The flycheck-hdevtools@footnote{https://github.com/flycheck/flycheck-hdevtools} extension adds a Haskell syntax checker using
hdevtools@footnote{https://github.com/bitc/hdevtools/}.


@node HTML,Javascript,Haskell,Supported languages
@anchor{guide/languages hdevtools}@anchor{ef}@anchor{guide/languages html}@anchor{f0}
@section HTML


@geindex html-tidy; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker html-tidy}@anchor{f1}
@deffn {Flycheck Syntax Checker} html@w{-}tidy

@format
A HTML syntax and style checker using Tidy.

See URL `https://github.com/w3c/tidy-html5'@footnote{https://github.com/w3c/tidy-html5}.
@end format

@subsubheading Configuration file


@geindex flycheck-tidyrc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-tidyrc}@anchor{f2}
@deffn {User Option} flycheck@w{-}tidyrc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`html-tidy'}
@end format
@end deffn
@end deffn

@node Javascript,JSON,HTML,Supported languages
@anchor{guide/languages javascript}@anchor{f3}
@section Javascript


@geindex javascript-jshint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker javascript-jshint}@anchor{f4}
@deffn {Flycheck Syntax Checker} javascript@w{-}jshint

@format
A JavaScript syntax and style checker using jshint.

See URL `http://www.jshint.com'@footnote{http://www.jshint.com}.
@end format

@subsubheading Configuration file


@geindex flycheck-jshintrc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-jshintrc}@anchor{f5}
@deffn {User Option} flycheck@w{-}jshintrc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`javascript-jshint'}
@end format
@end deffn
@end deffn

@geindex javascript-eslint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker javascript-eslint}@anchor{f6}
@deffn {Flycheck Syntax Checker} javascript@w{-}eslint

@format
A JavaScript syntax and style checker using eslint.

See URL `https://github.com/eslint/eslint'@footnote{https://github.com/eslint/eslint}.
@end format

@subsubheading Options


@geindex flycheck-eslint-rulesdir; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-eslint-rulesdir}@anchor{f7}
@deffn {User Option} flycheck@w{-}eslint@w{-}rulesdir

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The directory of custom rules for ESLint.

The value of this variable is either a string containing the path
to a directory with custom rules, or nil, to not give any custom
rules to ESLint.

Refer to the ESLint manual at URL
`https://github.com/eslint/eslint/tree/master/docs/command-line-interface#--rulesdir'@footnote{https://github.com/eslint/eslint/tree/master/docs/command-line-interface#--rulesdir}
for more information about the custom directory.

This variable is an option for the syntax checker @code{`javascript-eslint'}
@end format


This user option was introduced, or its default value was changed, in version 0.16 of the flycheck package.

@end deffn

@subsubheading Configuration file


@geindex flycheck-eslintrc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-eslintrc}@anchor{f8}
@deffn {User Option} flycheck@w{-}eslintrc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`javascript-eslint'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn
@end deffn

@geindex javascript-gjslint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker javascript-gjslint}@anchor{f9}
@deffn {Flycheck Syntax Checker} javascript@w{-}gjslint

@format
A JavaScript syntax and style checker using Closure Linter.

See URL `https://developers.google.com/closure/utilities'@footnote{https://developers.google.com/closure/utilities}.
@end format

@subsubheading Configuration file


@geindex flycheck-gjslintrc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-gjslintrc}@anchor{fa}
@deffn {User Option} flycheck@w{-}gjslintrc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`javascript-gjslint'}
@end format
@end deffn
@end deffn

@node JSON,LESS,Javascript,Supported languages
@anchor{guide/languages json}@anchor{fb}
@section JSON


@geindex json-jsonlint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker json-jsonlint}@anchor{fc}
@deffn {Flycheck Syntax Checker} json@w{-}jsonlint

@format
A JSON syntax and style checker using jsonlint.

See URL `https://github.com/zaach/jsonlint'@footnote{https://github.com/zaach/jsonlint}.
@end format
@end deffn

@node LESS,Lua,JSON,Supported languages
@anchor{guide/languages less}@anchor{fd}
@section LESS


@geindex less; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker less}@anchor{fe}
@deffn {Flycheck Syntax Checker} less

@format
A LESS syntax checker using lessc.

At least version 1.4 of lessc is required.

See URL `http://lesscss.org'@footnote{http://lesscss.org}.
@end format
@end deffn

@node Lua,Make,LESS,Supported languages
@anchor{guide/languages lua}@anchor{ff}
@section Lua


@geindex lua; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker lua}@anchor{100}
@deffn {Flycheck Syntax Checker} lua

@format
A Lua syntax checker using the Lua compiler.

See URL `http://www.lua.org/'@footnote{http://www.lua.org/}.
@end format
@end deffn

@node Make,Perl,Lua,Supported languages
@anchor{guide/languages make}@anchor{101}
@section Make


@geindex make; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker make}@anchor{102}
@deffn {Flycheck Syntax Checker} make

@format
A Makefile syntax checker using the POSIX compatible Make command.

See URL `http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html'@footnote{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html}.
@end format


@subsubheading See also


GNU Make@footnote{http://www.gnu.org/software/make/}, NetBSD Make@footnote{http://netbsd.gw.com/cgi-bin/man-cgi?make++NetBSD-current}, FreeBSD Make@footnote{http://www.freebsd.org/cgi/man.cgi?query=make&sektion=1}, OpenBSD Make@footnote{http://www.openbsd.org/cgi-bin/man.cgi?query=make}

@end deffn

@node Perl,PHP,Make,Supported languages
@anchor{guide/languages openbsd-make}@anchor{103}@anchor{guide/languages perl}@anchor{104}
@section Perl


@geindex perl; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker perl}@anchor{105}
@deffn {Flycheck Syntax Checker} perl

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{106,,perl-perlcritic}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Perl syntax checker using the Perl interpreter.

See URL `http://www.perl.org'@footnote{http://www.perl.org}.
@end format
@end deffn

@geindex perl-perlcritic; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker perl-perlcritic}@anchor{106}
@deffn {Flycheck Syntax Checker} perl@w{-}perlcritic

@format
A Perl syntax checker using Perl::Critic.

See URL `https://metacpan.org/pod/Perl::Critic'@footnote{https://metacpan.org/pod/Perl::Critic}.
@end format

@subsubheading Options


@geindex flycheck-perlcritic-verbosity; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-perlcritic-verbosity}@anchor{107}
@deffn {User Option} flycheck@w{-}perlcritic@w{-}verbosity

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{integerp}. 
@end quotation
@end cartouche

@format
The message severity for Perl Critic.

The value of this variable is a severity level as integer, for
the @code{`--severity'} option to Perl Critic.

This variable is an option for the syntax checker @code{`perl-perlcritic'}
@end format


This user option was introduced, or its default value was changed, in version 0.18 of the flycheck package.

@end deffn
@end deffn

@node PHP,Puppet,Perl,Supported languages
@anchor{guide/languages php}@anchor{108}
@section PHP


@geindex php; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker php}@anchor{109}
@deffn {Flycheck Syntax Checker} php

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{10a,,php-phpmd}, if there are no errors above level @code{warning}

@item 
@ref{10b,,php-phpcs}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A PHP syntax checker using the PHP command line interpreter.

See URL `http://php.net/manual/en/features.commandline.php'@footnote{http://php.net/manual/en/features.commandline.php}.
@end format
@end deffn

@geindex php-phpmd; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker php-phpmd}@anchor{10a}
@deffn {Flycheck Syntax Checker} php@w{-}phpmd

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{10b,,php-phpcs}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A PHP style checker using PHP Mess Detector.

See URL `http://phpmd.org/'@footnote{http://phpmd.org/}.
@end format

@subsubheading Options


@geindex flycheck-phpmd-rulesets; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-phpmd-rulesets}@anchor{10c}
@deffn {User Option} flycheck@w{-}phpmd@w{-}rulesets

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
The rule sets for PHP Mess Detector.

Set default rule sets and custom rule set files.

See section "Using multiple rule sets" in the PHP Mess Detector
manual at URL `http://phpmd.org/documentation/index.html'@footnote{http://phpmd.org/documentation/index.html}.

This variable is an option for the syntax checker @code{`php-phpmd'}
@end format
@end deffn
@end deffn

@geindex php-phpcs; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker php-phpcs}@anchor{10b}
@deffn {Flycheck Syntax Checker} php@w{-}phpcs

@format
A PHP style checker using PHP_CodeSniffer.

See URL `http://pear.php.net/package/PHP_CodeSniffer/'@footnote{http://pear.php.net/package/PHP_CodeSniffer/}.
@end format

@subsubheading Options


@geindex flycheck-phpcs-standard; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-phpcs-standard}@anchor{10d}
@deffn {User Option} flycheck@w{-}phpcs@w{-}standard

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The coding standard for PHP CodeSniffer.

When nil, use the default standard from the global PHP
CodeSniffer configuration.  When set to a string, pass the string
to PHP CodeSniffer which will interpret it as name as a standard,
or as path to a standard specification.

This variable is an option for the syntax checker @code{`php-phpcs'}
@end format
@end deffn
@end deffn

@node Puppet,Python,PHP,Supported languages
@anchor{guide/languages puppet}@anchor{10e}
@section Puppet


@geindex puppet-parser; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker puppet-parser}@anchor{10f}
@deffn {Flycheck Syntax Checker} puppet@w{-}parser

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{110,,puppet-lint}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Puppet DSL syntax checker using puppet's own parser.

See URL `http://puppetlabs.com/'@footnote{http://puppetlabs.com/}.
@end format
@end deffn

@geindex puppet-lint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker puppet-lint}@anchor{110}
@deffn {Flycheck Syntax Checker} puppet@w{-}lint

@format
A Puppet DSL style checker using puppet-lint.

See URL `http://puppet-lint.com/'@footnote{http://puppet-lint.com/}.
@end format
@end deffn

@node Python,Racket,Puppet,Supported languages
@anchor{guide/languages python}@anchor{111}
@section Python


@geindex python-flake8; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker python-flake8}@anchor{112}
@deffn {Flycheck Syntax Checker} python@w{-}flake8

@format
A Python syntax and style checker using Flake8.

For best error reporting, use Flake8 2.0 or newer.

See URL `https://pypi.python.org/pypi/flake8'@footnote{https://pypi.python.org/pypi/flake8}.
@end format

@subsubheading Options


@geindex flycheck-flake8-maximum-complexity; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-flake8-maximum-complexity}@anchor{113}
@deffn {User Option} flycheck@w{-}flake8@w{-}maximum@w{-}complexity

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{integerp}. 
@end quotation
@end cartouche

@format
The maximum McCabe complexity of methods.

If nil, do not check the complexity of methods.  If set to an
integer, report any complexity greater than the value of this
variable as warning.

If set to an integer, this variable overrules any similar setting
in the configuration file denoted by @ref{114,,`flycheck-flake8rc'}.

This variable is an option for the syntax checker @code{`python-flake8'}
@end format
@end deffn

@geindex flycheck-flake8-maximum-line-length; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-flake8-maximum-line-length}@anchor{115}
@deffn {User Option} flycheck@w{-}flake8@w{-}maximum@w{-}line@w{-}length

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{integerp}. 
@end quotation
@end cartouche

@format
The maximum length of lines.

If set to an integer, the value of this variable denotes the
maximum length of lines, overruling any similar setting in the
configuration file denoted by @ref{114,,`flycheck-flake8rc'}.  An error will
be reported for any line longer than the value of this variable.

If set to nil, use the maximum line length from the configuration
file denoted by @ref{114,,`flycheck-flake8rc'}, or the PEP 8 recommendation
of 79 characters if there is no configuration with this setting.

This variable is an option for the syntax checker @code{`python-flake8'}
@end format
@end deffn

@subsubheading Configuration file


@geindex flycheck-flake8rc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-flake8rc}@anchor{114}
@deffn {User Option} flycheck@w{-}flake8rc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`python-flake8'}
@end format
@end deffn
@end deffn

@geindex python-pylint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker python-pylint}@anchor{116}
@deffn {Flycheck Syntax Checker} python@w{-}pylint

@format
A Python syntax and style checker using Pylint.

This syntax checker requires Pylint 1.0 or newer.

See URL `http://www.pylint.org/'@footnote{http://www.pylint.org/}.
@end format

@subsubheading Configuration file


@geindex flycheck-pylintrc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-pylintrc}@anchor{117}
@deffn {User Option} flycheck@w{-}pylintrc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`python-pylint'}
@end format
@end deffn
@end deffn


@subsubheading See also


flycheck-pyflakes@footnote{https://github.com/Wilfred/flycheck-pyflakes} adds a Python syntax checker using Pyflakes.


@node Racket,RPM SPEC,Python,Supported languages
@anchor{guide/languages flycheck-pyflakes}@anchor{118}@anchor{guide/languages racket}@anchor{119}
@section Racket


@geindex racket; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker racket}@anchor{11a}
@deffn {Flycheck Syntax Checker} racket

@format
A Racket syntax checker using the Racket compiler.

See URL `http://racket-lang.org/'@footnote{http://racket-lang.org/}.
@end format
@end deffn

@node RPM SPEC,ReStructuredText,Racket,Supported languages
@anchor{guide/languages rpm-spec}@anchor{11b}
@section RPM SPEC


@geindex rpm-rpmlint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker rpm-rpmlint}@anchor{11c}
@deffn {Flycheck Syntax Checker} rpm@w{-}rpmlint

@format
A RPM SPEC file syntax checker using rpmlint.

See URL `http://sourceforge.net/projects/rpmlint/'@footnote{http://sourceforge.net/projects/rpmlint/}.
@end format
@end deffn

@node ReStructuredText,Ruby,RPM SPEC,Supported languages
@anchor{guide/languages restructuredtext}@anchor{11d}
@section ReStructuredText


@geindex rst; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker rst}@anchor{11e}
@deffn {Flycheck Syntax Checker} rst

@format
A ReStructuredText (RST) syntax checker using Docutils.

See URL `http://docutils.sourceforge.net/'@footnote{http://docutils.sourceforge.net/}.
@end format
@end deffn

@geindex rst-sphinx; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker rst-sphinx}@anchor{11f}
@deffn {Flycheck Syntax Checker} rst@w{-}sphinx

@format
A ReStructuredText (RST) syntax checker using Sphinx.

Requires Sphinx 1.2 or newer.  See URL `http://sphinx-doc.org'@footnote{http://sphinx-doc.org}.
@end format

@subsubheading Options


@geindex flycheck-sphinx-warn-on-missing-references; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-sphinx-warn-on-missing-references}@anchor{120}
@deffn {User Option} flycheck@w{-}sphinx@w{-}warn@w{-}on@w{-}missing@w{-}references

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to warn about missing references in Sphinx.

When non-nil (the default), warn about all missing references in
Sphinx via @code{`-n'}.

This variable is an option for the syntax checker @code{`rst-sphinx'}
@end format


This user option was introduced, or its default value was changed, in version 0.17 of the flycheck package.

@end deffn
@end deffn

@node Ruby,Rust,ReStructuredText,Supported languages
@anchor{guide/languages ruby}@anchor{121}
@section Ruby


@geindex ruby-rubocop; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker ruby-rubocop}@anchor{122}
@deffn {Flycheck Syntax Checker} ruby@w{-}rubocop

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{123,,ruby-rubylint}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Ruby syntax and style checker using the RuboCop tool.

See URL `http://batsov.com/rubocop/'@footnote{http://batsov.com/rubocop/}.
@end format

@subsubheading Options


@geindex flycheck-rubocop-lint-only; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-rubocop-lint-only}@anchor{124}
@deffn {User Option} flycheck@w{-}rubocop@w{-}lint@w{-}only

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  
@end quotation
@end cartouche

@format
Whether to only report code issues in Rubocop.

When non-nil, only report code issues in Rubocop, via @code{`--lint'}.
Otherwise report style issues as well.

This variable is an option for the syntax checker @code{`ruby-rubocop'}
@end format
@end deffn

@subsubheading Configuration file


@geindex flycheck-rubocoprc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-rubocoprc}@anchor{125}
@deffn {User Option} flycheck@w{-}rubocoprc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`ruby-rubocop'}
@end format
@end deffn
@end deffn

@geindex ruby-rubylint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker ruby-rubylint}@anchor{123}
@deffn {Flycheck Syntax Checker} ruby@w{-}rubylint

@format
A Ruby syntax and code analysis checker using ruby-lint.

Requires ruby-lint 2.0 or newer.  To use @ref{126,,`flycheck-rubylintrc'},
ruby-lint 2.0.2 or newer is required.  See URL
`https://github.com/YorickPeterse/ruby-lint'@footnote{https://github.com/YorickPeterse/ruby-lint}.
@end format

@subsubheading Configuration file


@geindex flycheck-rubylintrc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-rubylintrc}@anchor{126}
@deffn {User Option} flycheck@w{-}rubylintrc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`ruby-rubylint'}
@end format

@cartouche
@quotation Warning 
You need ruby-lint version 2.0.2 or newer to use this variable.
@end quotation
@end cartouche
@end deffn
@end deffn

@geindex ruby; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker ruby}@anchor{127}
@deffn {Flycheck Syntax Checker} ruby

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{123,,ruby-rubylint}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Ruby syntax checker using the standard Ruby interpreter.

Please note that the output of different Ruby versions and
implementations varies wildly.  This syntax checker supports
current versions of MRI and JRuby, but may break when used with
other implementations or future versions of these
implementations.

Please consider using @code{`ruby-rubocop'} or @code{`ruby-rubylint'} instead.

See URL `https://www.ruby-lang.org/'@footnote{https://www.ruby-lang.org/}.
@end format
@end deffn

@geindex ruby-jruby; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker ruby-jruby}@anchor{128}
@deffn {Flycheck Syntax Checker} ruby@w{-}jruby

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{123,,ruby-rubylint}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Ruby syntax checker using the JRuby interpreter.

This syntax checker is very primitive, and may break on future
versions of JRuby.

Please consider using @code{`ruby-rubocop'} or @code{`ruby-rubylint'} instead.

See URL `http://jruby.org/'@footnote{http://jruby.org/}.
@end format
@end deffn

@node Rust,Sass,Ruby,Supported languages
@anchor{guide/languages rust}@anchor{129}
@section Rust


@geindex rust; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker rust}@anchor{12a}
@deffn {Flycheck Syntax Checker} rust

@format
A Rust syntax checker using Rust compiler.

This syntax checker needs Rust 0.10 or newer.

See URL `http://www.rust-lang.org'@footnote{http://www.rust-lang.org}.
@end format

@subsubheading Options


@geindex flycheck-rust-check-tests; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-rust-check-tests}@anchor{12b}
@deffn {User Option} flycheck@w{-}rust@w{-}check@w{-}tests

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to check test code in Rust.

When non-nil, @code{`rustc'} is passed the @code{`--test'} flag, which will
check any code marked with the @code{#[cfg(test)]} attribute and any
functions marked with @code{#[test]}. Otherwise, @code{`rustc'} is not passed
@code{`--test'} and test code will not be checked.  Skipping @code{`--test'} is
necessary when using @code{#![no_std]}, because compiling the test
runner requires @code{`std'}.

This variable is an option for the syntax checker @code{`rust'}
@end format
@end deffn

@geindex flycheck-rust-crate-root; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-rust-crate-root}@anchor{12c}
@deffn {User Option} flycheck@w{-}rust@w{-}crate@w{-}root

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
A path to the crate root for the current buffer.

The value of this variable is either a string with the path to
the crate root for the current buffer, or nil if the current buffer
is a crate.  A relative path is relative to the current buffer.

If this variable is non nil the current buffer will only be checked
if it is not modified, i.e. after it has been saved.

This variable is an option for the syntax checker @code{`rust'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@geindex flycheck-rust-crate-type; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-rust-crate-type}@anchor{12d}
@deffn {User Option} flycheck@w{-}rust@w{-}crate@w{-}type

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The type of the Rust Crate to check.

The value of this variable is a string denoting the crate type,
for the @code{`--crate-type'} flag.

This variable is an option for the syntax checker @code{`rust'}
@end format
@end deffn

@geindex flycheck-rust-library-path; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-rust-library-path}@anchor{12e}
@deffn {User Option} flycheck@w{-}rust@w{-}library@w{-}path

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of library directories for Rust.

The value of this variable is a list of strings, where each
string is a directory to add to the library path of Rust.
Relative paths are relative to the file being checked.

This variable is an option for the syntax checker @code{`rust'}
@end format


This user option was introduced, or its default value was changed, in version 0.18 of the flycheck package.

@end deffn


@subsubheading See also


The flycheck-rust@footnote{https://github.com/flycheck/flycheck-rust} extension customizes this syntax checker according to
the Cargo project layout and settings.

@end deffn

@node Sass,Scala,Rust,Supported languages
@anchor{guide/languages flycheck-rust}@anchor{12f}@anchor{guide/languages sass}@anchor{130}
@section Sass


@geindex sass; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker sass}@anchor{131}
@deffn {Flycheck Syntax Checker} sass

@format
A Sass syntax checker using the Sass compiler.

See URL `http://sass-lang.com'@footnote{http://sass-lang.com}.
@end format

@subsubheading Options


@geindex flycheck-sass-compass; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-sass-compass}@anchor{132}
@deffn {User Option} flycheck@w{-}sass@w{-}compass

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to enable the Compass CSS framework.

When non-nil, enable the Compass CSS framework, via @code{`--compass'}.

This variable is an option for the syntax checker @code{`sass'}
@end format


This user option was introduced, or its default value was changed, in version 0.16 of the flycheck package.

@end deffn
@end deffn

@node Scala,Scss,Sass,Supported languages
@anchor{guide/languages scala}@anchor{133}
@section Scala


@geindex scala; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker scala}@anchor{134}
@deffn {Flycheck Syntax Checker} scala

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{135,,scala-scalastyle}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Scala syntax checker using the Scala compiler.

See URL `http://www.scala-lang.org/'@footnote{http://www.scala-lang.org/}.
@end format
@end deffn

@geindex scala-scalastyle; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker scala-scalastyle}@anchor{135}
@deffn {Flycheck Syntax Checker} scala@w{-}scalastyle

@format
A Scala style checker using scalastyle.

Note that this syntax checker is not used if
@ref{136,,`flycheck-scalastyle-jar'} or @ref{137,,`flycheck-scalastylerc'} are nil or
point to non-existing files.

See URL `http://www.scalastyle.org'@footnote{http://www.scalastyle.org}.
@end format

@subsubheading Options


@geindex flycheck-scalastyle-jar; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-scalastyle-jar}@anchor{136}
@deffn {User Option} flycheck@w{-}scalastyle@w{-}jar

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
The path to the main JAR file of Scalastyle.

If this option is nil, or points to a non-existing file,
@code{`scala-scalastyle'} can not be used.

This variable is an option for the syntax checker @code{`scala-scalastyle'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn

@subsubheading Configuration file


@geindex flycheck-scalastylerc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-scalastylerc}@anchor{137}
@deffn {User Option} flycheck@w{-}scalastylerc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`scala-scalastyle'}
@end format


This user option was introduced, or its default value was changed, in version 0.20 of the flycheck package.

@end deffn
@end deffn

@node Scss,Shell script languages,Scala,Supported languages
@anchor{guide/languages scss}@anchor{138}
@section Scss


@geindex scss; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker scss}@anchor{139}
@deffn {Flycheck Syntax Checker} scss

@format
A SCSS syntax checker using the SCSS compiler.

See URL `http://sass-lang.com'@footnote{http://sass-lang.com}.
@end format

@subsubheading Options


@geindex flycheck-scss-compass; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-scss-compass}@anchor{13a}
@deffn {User Option} flycheck@w{-}scss@w{-}compass

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{booleanp}. 
@end quotation
@end cartouche

@format
Whether to enable the Compass CSS framework.

When non-nil, enable the Compass CSS framework, via @code{`--compass'}.

This variable is an option for the syntax checker @code{`scss'}
@end format


This user option was introduced, or its default value was changed, in version 0.16 of the flycheck package.

@end deffn
@end deffn

@node Shell script languages,Slim,Scss,Supported languages
@anchor{guide/languages shell-script-languages}@anchor{13b}
@section Shell script languages


@geindex sh-bash; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker sh-bash}@anchor{13c}
@deffn {Flycheck Syntax Checker} sh@w{-}bash

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{13d,,sh-shellcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Bash syntax checker using the Bash shell.

See URL `http://www.gnu.org/software/bash/'@footnote{http://www.gnu.org/software/bash/}.
@end format
@end deffn

@geindex sh-posix-dash; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker sh-posix-dash}@anchor{13e}
@deffn {Flycheck Syntax Checker} sh@w{-}posix@w{-}dash

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{13d,,sh-shellcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A POSIX Shell syntax checker using the Dash shell.

See URL `http://gondor.apana.org.au/~herbert/dash/'@footnote{http://gondor.apana.org.au/~herbert/dash/}.
@end format


@subsubheading See also


POSIX Shell Command Language@footnote{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html}

@end deffn

@geindex sh-posix-bash; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker sh-posix-bash}@anchor{13f}
@deffn {Flycheck Syntax Checker} sh@w{-}posix@w{-}bash

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{13d,,sh-shellcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A POSIX Shell syntax checker using the Bash shell.

See URL `http://www.gnu.org/software/bash/'@footnote{http://www.gnu.org/software/bash/}.
@end format


@subsubheading See also


GNU Bash POSIX Mode@footnote{http://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html#Bash-POSIX-Mode}, POSIX Shell Command Language@footnote{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html}

@end deffn

@geindex sh-zsh; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker sh-zsh}@anchor{140}
@deffn {Flycheck Syntax Checker} sh@w{-}zsh

@cartouche
@quotation Chained syntax checkers 
The following syntax checkers are @ref{57,,chained} after this syntax checker:



@enumerate 

@item 
@ref{13d,,sh-shellcheck}, if there are no errors above level @code{warning}
@end enumerate


The @strong{first} suitable syntax checker is used.
@end quotation
@end cartouche

@format
A Zsh syntax checker using the Zsh shell.

See URL `http://www.zsh.org/'@footnote{http://www.zsh.org/}.
@end format
@end deffn

@geindex sh-shellcheck; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker sh-shellcheck}@anchor{13d}
@deffn {Flycheck Syntax Checker} sh@w{-}shellcheck

@format
A shell script syntax and style checker using Shellcheck.

See URL `https://github.com/koalaman/shellcheck/'@footnote{https://github.com/koalaman/shellcheck/}.
@end format

@subsubheading Options


@geindex flycheck-shellcheck-excluded-warnings; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-shellcheck-excluded-warnings}@anchor{141}
@deffn {User Option} flycheck@w{-}shellcheck@w{-}excluded@w{-}warnings

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @ref{9b,,flycheck-string-list-p}. 
@end quotation
@end cartouche

@format
A list of excluded warnings for ShellCheck.

The value of this variable is a list of strings, where each
string is a warning code to be excluded from ShellCheck reports.
By default, no warnings are excluded.

This variable is an option for the syntax checker @code{`sh-shellcheck'}
@end format


This user option was introduced, or its default value was changed, in version 0.21 of the flycheck package.

@end deffn
@end deffn

@node Slim,TeX/LaTeX,Shell script languages,Supported languages
@anchor{guide/languages gnu-bash-posix-mode}@anchor{142}@anchor{guide/languages slim}@anchor{143}
@section Slim


@geindex slim; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker slim}@anchor{144}
@deffn {Flycheck Syntax Checker} slim

@format
A Slim syntax checker using the Slim compiler.

See URL `http://slim-lang.com'@footnote{http://slim-lang.com}.
@end format
@end deffn

@node TeX/LaTeX,Texinfo,Slim,Supported languages
@anchor{guide/languages tex-latex}@anchor{145}
@section TeX/LaTeX



@subsubheading See also


LaTeX@footnote{http://www.latex-project.org/}, TeX Live@footnote{http://www.tug.org/texlive/}


@geindex tex-chktex; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker tex-chktex}@anchor{146}
@deffn {Flycheck Syntax Checker} tex@w{-}chktex

@format
A TeX and LaTeX syntax and style checker using chktex.

See URL `http://www.nongnu.org/chktex/'@footnote{http://www.nongnu.org/chktex/}.
@end format

@subsubheading Configuration file


@geindex flycheck-chktexrc; Emacs Lisp user option
@anchor{guide/languages el variable flycheck-chktexrc}@anchor{147}
@deffn {User Option} flycheck@w{-}chktexrc

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  This variable is safe as a file local variable if its value satisfies the predicate @code{stringp}. 
@end quotation
@end cartouche

@format
Configuration file for @code{`tex-chktex'}
@end format
@end deffn
@end deffn

@geindex tex-lacheck; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker tex-lacheck}@anchor{148}
@deffn {Flycheck Syntax Checker} tex@w{-}lacheck

@format
A LaTeX syntax and style checker using lacheck.

See URL `http://www.ctan.org/pkg/lacheck'@footnote{http://www.ctan.org/pkg/lacheck}.
@end format
@end deffn

@node Texinfo,Verilog,TeX/LaTeX,Supported languages
@anchor{guide/languages tex-live}@anchor{149}@anchor{guide/languages texinfo}@anchor{14a}
@section Texinfo


@geindex texinfo; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker texinfo}@anchor{14b}
@deffn {Flycheck Syntax Checker} texinfo

@format
A Texinfo syntax checker using makeinfo.

See URL `http://www.gnu.org/software/texinfo/'@footnote{http://www.gnu.org/software/texinfo/}.
@end format
@end deffn

@node Verilog,XML,Texinfo,Supported languages
@anchor{guide/languages verilog}@anchor{14c}
@section Verilog


@geindex verilog-verilator; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker verilog-verilator}@anchor{14d}
@deffn {Flycheck Syntax Checker} verilog@w{-}verilator

@format
A Verilog syntax checker using the Verilator Verilog HDL simulator.

See URL `http://www.veripool.org/wiki/verilator'@footnote{http://www.veripool.org/wiki/verilator}.
@end format
@end deffn

@node XML,YAML,Verilog,Supported languages
@anchor{guide/languages xml}@anchor{14e}
@section XML


@geindex xml-xmlstarlet; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker xml-xmlstarlet}@anchor{14f}
@deffn {Flycheck Syntax Checker} xml@w{-}xmlstarlet

@format
A XML syntax checker and validator using the xmlstarlet utility.

See URL `http://xmlstar.sourceforge.net/'@footnote{http://xmlstar.sourceforge.net/}.
@end format
@end deffn

@geindex xml-xmllint; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker xml-xmllint}@anchor{150}
@deffn {Flycheck Syntax Checker} xml@w{-}xmllint

@format
A XML syntax checker and validator using the xmllint utility.

The xmllint is part of libxml2, see URL
`http://www.xmlsoft.org/'@footnote{http://www.xmlsoft.org/}.
@end format
@end deffn

@node YAML,,XML,Supported languages
@anchor{guide/languages yaml}@anchor{151}
@section YAML


@geindex yaml-jsyaml; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker yaml-jsyaml}@anchor{152}
@deffn {Flycheck Syntax Checker} yaml@w{-}jsyaml

@format
A YAML syntax checker using JS-YAML.

See URL `https://github.com/nodeca/js-yaml'@footnote{https://github.com/nodeca/js-yaml}.
@end format
@end deffn

@geindex yaml-ruby; Emacs Lisp Flycheck syntax checker
@anchor{guide/languages el flycheck-checker yaml-ruby}@anchor{153}
@deffn {Flycheck Syntax Checker} yaml@w{-}ruby

@format
A YAML syntax checker using Ruby's YAML parser.

This syntax checker uses the YAML parser from Ruby's standard
library.

See URL `http://www.ruby-doc.org/stdlib-2.0.0/libdoc/yaml/rdoc/YAML.html'@footnote{http://www.ruby-doc.org/stdlib-2.0.0/libdoc/yaml/rdoc/YAML.html}.
@end format
@end deffn

@node Glossary,Flycheck releases,Supported languages,Top
@anchor{guide/glossary glossary}@anchor{154}@anchor{guide/glossary doc}@anchor{155}
@chapter Glossary



@table @asis
@anchor{guide/glossary term-syntax-checker}@anchor{64}
@geindex syntax checker

@item syntax checker

A symbol which is defined as syntax checker with
@ref{19,,flycheck-define-checker}
@anchor{guide/glossary term-registered-syntax-checker}@anchor{61}
@geindex registered syntax checker

@item registered syntax checker

A @ref{64,,syntax checker} available for automatic selection, i.e. that is
contained in @ref{5f,,flycheck-checkers}.
@anchor{guide/glossary term-disabled-syntax-checker}@anchor{156}
@geindex disabled syntax checker

@item disabled syntax checker

A @ref{64,,syntax checker} explicitly excluded from available selection,
i.e. that is contained in @ref{60,,flycheck-disabled-checkers}.
@anchor{guide/glossary term-enabled-syntax-checker}@anchor{63}
@geindex enabled syntax checker

@item enabled syntax checker

A @ref{61,,registered syntax checker} which is not a @ref{156,,disabled syntax checker}.
@anchor{guide/glossary term-suitable-syntax-checker}@anchor{50}
@geindex suitable syntax checker

@item suitable syntax checker

A @ref{64,,syntax checker} which can be used to check the current buffer.
Precisely, a syntax checker which


@itemize -

@item 
which can be used for the current major mode,

@item 
and whose predicate succeeds,

@item 
and whose syntax checker tool exists.
@end itemize
@anchor{guide/glossary term-chaining}@anchor{57}
@geindex chaining

@item chaining

In some languages, multiple @ref{64,,syntax checkers} can
be applied to a buffer.  In such a case, each syntax checker specifies
which checkers are to be used after it and when.  The result is a “syntax
checker chain”, specifying all syntax checkers to be applied to the
buffer.

For instance, Haskell buffers are first checked with GHC for syntax and
type errors, and then with @code{hlint} for idiomatic and semantic mistakes.
Hence, the syntax checker chain consists of @ref{e9,,haskell-ghc}
and @ref{ea,,haskell-hlint}.
@end table

@node Flycheck releases,Extending Flycheck,Glossary,Top
@anchor{guide/releases/index flycheck-releases}@anchor{157}@anchor{guide/releases/index doc}@anchor{158}
@chapter Flycheck releases


This document contains the release announcements for Flycheck, and the complete
changelog.

@menu
* Release announcements:: 
* Changelog:: 

@end menu

@node Release announcements,Changelog,,Flycheck releases
@anchor{guide/releases/index release-announcements}@anchor{159}
@section Release announcements


@menu
* Flycheck 0.21: Flycheck 0 21. 
* Flycheck 0.20: Flycheck 0 20. 
* Flycheck 0.19: Flycheck 0 19. 
* Flycheck 0.18: Flycheck 0 18. 
* Flycheck 0.17: Flycheck 0 17. 
* Flycheck 0.16: Flycheck 0 16. 
* Flycheck 0.15: Flycheck 0 15. 

@end menu

@node Flycheck 0 21,Flycheck 0 20,,Release announcements
@anchor{guide/releases/flycheck-0 21 doc}@anchor{15a}@anchor{guide/releases/flycheck-0 21 flycheck-0-21}@anchor{15b}
@subsection Flycheck 0.21


@*date: 
Oct 26, 2014


@*version: 
0.21


Flycheck 0.21 is out, with new syntax checkers, many new options, improvements
and bug fixes, and some important breaking changes.

This announcement covers the most important changes.  For details, please refer
to the @ref{15c,,Changelog}.

@menu
* Breaking changes:: 
* Language support:: 
* Error list changes:: 
* Error navigation and display:: 
* Syntax checker definition and extension:: 
* Obtaining the new release:: 

@end menu

@node Breaking changes,Language support,,Flycheck 0 21
@anchor{guide/releases/flycheck-0 21 breaking-changes}@anchor{15d}
@subsubsection Breaking changes


@cartouche
@quotation Warning 
The value of the @code{:next-checkers} property changed in a
backwards-incompatible way.  The custom symbols @code{no-errors} and
@code{warnings-only} are gone.  Instead the first item of each cons cell is the
@emph{maximum permissible error level} now.  For instance, @code{:next-checkers
((no-errors . foo))} now becomes @code{:next-checkers ((warning . foo))}.  Please
update all your syntax checker definitions accordingly.
@end quotation
@end cartouche

The @ref{f1,,html-tidy} syntax checker does not check Web Mode buffers
anymore, because will frequently contain strictly invalid HTML.

The @ref{c6,,d-dmd} syntax checker requires DMD 2.066 or newer now, to
add columns to error locations.

The error list highlights all errors at the current line now.  Highlighting of
errors at point, i.e. the @code{flycheck-error-list-highlight-at-point} face and
related functionality, was removed, because it would frequently cause odd and
confusing highlighting.

@node Language support,Error list changes,Breaking changes,Flycheck 0 21
@anchor{guide/releases/flycheck-0 21 language-support}@anchor{15e}
@subsubsection Language support


Flycheck now supports the Coq proof language and RPM spec files with the new
syntax checkers @ref{c2,,coq} and @ref{11c,,rpm-rpmlint}
respectively.

@menu
* C/C++: C/C++<2>. 
* D: D<2>. 
* Go: Go<2>. 
* HTML: HTML<2>. 
* Less:: 
* Shell scripts:: 

@end menu

@node C/C++<2>,D<2>,,Language support
@anchor{guide/releases/flycheck-0 21 c-c}@anchor{15f}
@subsubsection C/C++


The new @ref{b3,,flycheck-gcc-openmp} enables OpenMP for the
@ref{ac,,c/c++-gcc} checker to suppress warnings about OpenMP pragmas.

The @ref{ac,,c/c++-gcc} expands templates during syntax checks now.

The @ref{a1,,c/c++-clang} syntax checker now handles empty messages from
@code{#error} and @code{#warning} pragmas correctly.

@node D<2>,Go<2>,C/C++<2>,Language support
@anchor{guide/releases/flycheck-0 21 d}@anchor{160}
@subsubsection D


The @ref{c6,,d-dmd} syntax checker reports columns now, making error
locations more precise.  This requires DMD 2.066.  Support for earlier DMD
versions was dropped.

@node Go<2>,HTML<2>,D<2>,Language support
@anchor{guide/releases/flycheck-0 21 go}@anchor{161}
@subsubsection Go


@ref{e2,,go-errcheck} now handles packages correctly, fixing many faulty
warnings.

@node HTML<2>,Less,Go<2>,Language support
@anchor{guide/releases/flycheck-0 21 html}@anchor{162}
@subsubsection HTML


@ref{f1,,html-tidy} does not check Web Mode buffers anymore.

@node Less,Shell scripts,HTML<2>,Language support
@anchor{guide/releases/flycheck-0 21 less}@anchor{163}
@subsubsection Less


@ref{fe,,less} now correctly resolves relative paths in @code{data-uri}.

@node Shell scripts,,Less,Language support
@anchor{guide/releases/flycheck-0 21 shell-scripts}@anchor{164}
@subsubsection Shell scripts


The new @ref{141,,flycheck-shellcheck-excluded-warnings} allows to exclude
specific warnings from reports of the @ref{13d,,sh-shellcheck} checker.

In a related change, @ref{13d,,sh-shellcheck} now includes the warning code
into all reported errors, which makes it easier to set
@ref{141,,flycheck-shellcheck-excluded-warnings} accordingly.

@node Error list changes,Error navigation and display,Language support,Flycheck 0 21
@anchor{guide/releases/flycheck-0 21 error-list-changes}@anchor{165}
@subsubsection Error list changes


The error list at @ref{47,,flycheck-list-errors} was refined and fixed:


@itemize -

@item 
Mouse support is restored: You can now click onto error messages again, to
navigate to the error source.

@item 
When navigating inside the error list with @code{n} or @code{p}, the error
list does not randomly alter the point position anymore.

@item 
The syntax checker name now appears in a separate column.  The appearance of
this column can be customized with new face :face:
@code{flycheck-error-list-checker-name}.

@item 
Errors can be sorted by syntax checker name and message now.

@item 
The new hook @ref{85,,flycheck-error-list-after-refresh-hook} now runs every
time the error list was refreshed.

@item 
The error list does not highlight errors at point separately anymore, to avoid
confusing highlighting.
@end itemize

@node Error navigation and display,Syntax checker definition and extension,Error list changes,Flycheck 0 21
@anchor{guide/releases/flycheck-0 21 error-navigation-and-display}@anchor{166}
@subsubsection Error navigation and display


The new option @ref{8e,,flycheck-navigation-minimum-level} allows to skip errors
of specific error levels in error navigation, i.e. @code{M-g n} or @code{C-c !
n}.  Errors of levels below the value of this new option are still shown in the
buffer and in the error list, but they are skipped in any of the navigation
commands.

The new function @ref{7e,,flycheck-display-error-messages-unless-error-list}
shows messages of the errors at point in the echo area, but only if the error
list is @emph{not} visible.  Use this function for
@code{flycheck-error-display-function} to make use of this feature.

@node Syntax checker definition and extension,Obtaining the new release,Error navigation and display,Flycheck 0 21
@anchor{guide/releases/flycheck-0 21 syntax-checker-definition-and-extension}@anchor{167}
@subsubsection Syntax checker definition and extension


The @code{:next-checkers} property requires a maximum permissible error level now.
The custom predicates @code{no-errors} and @code{warnings-only} are gone.

Syntax checker definitions can use the new @code{null-device} symbol to add the name
of the system null device (e.g. @code{/dev/null} on Unix, @code{NUL} on Windows) to the
syntax checker arguments.  Typically, this would be used to ignore files
generated by the syntax checker.  See the definition of the
@ref{ac,,c/c++-gcc} syntax checker for an example.

The new function @ref{168,,flycheck-add-mode} adds major modes to existing
syntax checkers, by extending the @code{:modes} property.

@node Obtaining the new release,,Syntax checker definition and extension,Flycheck 0 21
@anchor{guide/releases/flycheck-0 21 obtaining-the-new-release}@anchor{169}
@subsubsection Obtaining the new release


Follow the @ref{2f,,installation instructions}.  If you already
have Flycheck installed, just update it from @code{M-x list-packages}.

@node Flycheck 0 20,Flycheck 0 19,Flycheck 0 21,Release announcements
@anchor{guide/releases/flycheck-0 20 flycheck-0-20}@anchor{16a}@anchor{guide/releases/flycheck-0 20 doc}@anchor{16b}
@subsection Flycheck 0.20


@*date: 
Aug 12, 2014


@*version: 
0.20


Flycheck 0.20 is out, with new syntax checkers, many new options, improvements
and bug fixes, and some important breaking changes.

This announcement covers the most important changes.  For details, please refer
to the @ref{15c,,Changelog}.

@menu
* Breaking changes: Breaking changes<2>. 
* Language support: Language support<2>. 
* Error list improvements:: 
* User interface improvements:: 
* Miscellaneous new features:: 
* Miscellaneous fixes:: 
* Get it:: 

@end menu

@node Breaking changes<2>,Language support<2>,,Flycheck 0 20
@anchor{guide/releases/flycheck-0 20 breaking-changes}@anchor{16c}
@subsubsection Breaking changes


@cartouche
@quotation Warning 
The internals of syntax checker definitions changed in a
backwards-incompatible way.  Due to the way macros work in Emacs Lisp @strong{all
packages depending on Flycheck} must be recompiled after upgrading to
Flycheck 0.20!
@end quotation
@end cartouche

Furthermore, the special meaning of a trailing equals sign in @code{(config …)} and
@code{(config-file …)} is removed.  Syntax checker definitions now need to explicitly
specify a function to concatenate the option and its arguments.  @code{(option
"--foo=" foo)} now becomes @code{(option "--foo=" foo concat)}.

As a consequence of this change, the position of the @code{filter} in @code{(option …)}
changed.  The @code{filter} is now in the @strong{forth} element.  Hence, @code{(option "--foo"
foo flycheck-option-int)} now becomes @code{(option "--foo" foo nil
flycheck-option-int)}.

@node Language support<2>,Error list improvements,Breaking changes<2>,Flycheck 0 20
@anchor{guide/releases/flycheck-0 20 language-support}@anchor{16d}
@subsubsection Language support


Flycheck now supports Ada and Fortran with @ref{99,,ada-gnat} and
@ref{d7,,fortran-gfortran} respectively.

@menu
* C/C++: C/C++<3>. 
* Rust: Rust<2>. 
* Scala: Scala<2>. 
* Sass/SCSS:: 
* Javascript: Javascript<2>. 
* Ruby: Ruby<2>. 

@end menu

@node C/C++<3>,Rust<2>,,Language support<2>
@anchor{guide/releases/flycheck-0 20 c-c}@anchor{16e}
@subsubsection C/C++


C/C++ can now be checked with GCC (@ref{ac,,c/c++-gcc}) as an alternative
to Clang.  GCC supports the same options as Clang, with the exception of
@ref{a3,,flycheck-clang-blocks}.

The Clang syntax checker now supports the Clang block syntax with the new option
@ref{a3,,flycheck-clang-blocks}, and allows to disable exceptions with
@ref{a9,,flycheck-clang-no-exceptions}.

Furthermore, temporary files for the Clang syntax checker are now created in the
system temporary directory.

@node Rust<2>,Scala<2>,C/C++<3>,Language support<2>
@anchor{guide/releases/flycheck-0 20 rust}@anchor{16f}
@subsubsection Rust


Support for Rust creates is greatly improved.  You can now specify the type of
crate to check with @code{flycheck-rust-crate-type}, and the root file of the crate
with @code{flycheck-rust-crate-root}.  The former avoids redundant warnings due to
unused code, and the latter helps to resolve relative module references.

Flycheck also parses info messages from Rust now.

@node Scala<2>,Sass/SCSS,Rust<2>,Language support<2>
@anchor{guide/releases/flycheck-0 20 scala}@anchor{170}
@subsubsection Scala


Flycheck now supports Scalastyle@footnote{http://www.scalastyle.org/} with @ref{135,,scala-scalastyle}.

@node Sass/SCSS,Javascript<2>,Scala<2>,Language support<2>
@anchor{guide/releases/flycheck-0 20 scalastyle}@anchor{171}@anchor{guide/releases/flycheck-0 20 sass-scss}@anchor{172}
@subsubsection Sass/SCSS


@ref{131,,sass} and @ref{139,,scss} now use a temporary directory for
their cache and do not clutter the source directory anymore.

@node Javascript<2>,Ruby<2>,Sass/SCSS,Language support<2>
@anchor{guide/releases/flycheck-0 20 javascript}@anchor{173}
@subsubsection Javascript


@ref{f8,,flycheck-eslintrc} is now @code{nil} by default.  ESLint@footnote{http://eslint.org/} will now find its
configuration file by itself, which enables configuration cascading.  See
Configuring ESLint@footnote{http://eslint.org/docs/configuring/} for more information.

@node Ruby<2>,,Javascript<2>,Language support<2>
@anchor{guide/releases/flycheck-0 20 ruby}@anchor{174}@anchor{guide/releases/flycheck-0 20 configuring-eslint}@anchor{175}
@subsubsection Ruby


@ref{123,,ruby-rubylint} now supports configuration files with
@ref{126,,flycheck-rubylintrc}.  This requires ruby-lint 2.0.2 or newer.

@node Error list improvements,User interface improvements,Language support<2>,Flycheck 0 20
@anchor{guide/releases/flycheck-0 20 error-list-improvements}@anchor{176}
@subsubsection Error list improvements


The error list (@ref{47,,flycheck-list-errors}) got a bunch of improvements:


@itemize -

@item 
Errors can now be sorted by error level and by error location, either by
clicking on the headers of @code{line} and @code{level} respectively, or by pressing
@code{S} when the point is on the text of the corresponding column.

@item 
Pressing @code{RET} on any error in the error list now jumps immediately to
the error location.

@item 
@code{n} and @code{p} now move by errors instead by lines, even with
multi-line error messages, and display the error location in another window
while navigating.
@end itemize

@node User interface improvements,Miscellaneous new features,Error list improvements,Flycheck 0 20
@anchor{guide/releases/flycheck-0 20 user-interface-improvements}@anchor{177}
@subsubsection User interface improvements


The mode line indicator of Flycheck is now customizable with
@ref{92,,flycheck-mode-line}, which is a mode line template (see
@ref{Mode Line Format,,,elisp}).  The mode line of the error list buffer is
customizable as well, with @code{flycheck-error-list-mode-line}.

The Flycheck menu at @emph{Tools -> Syntax Checking} was improved.  It
now provides an item to toggle Flycheck Mode in the current buffer.  Items that
are not available currently are now disabled.  The menu is also shown on the
mode line indicator now.

@code{flycheck-compile} now prompts for a syntax checker to use, defaulting
to the last used for the current buffer.

When Flycheck asks for a syntax checker in the minibuffer, it now presents a
reasonable default.

@node Miscellaneous new features,Miscellaneous fixes,User interface improvements,Flycheck 0 20
@anchor{guide/releases/flycheck-0 20 miscellaneous-new-features}@anchor{178}
@subsubsection Miscellaneous new features


The new hook @ref{59,,flycheck-status-changed-functions} lets extensions and
customization react on any status change in Flycheck.

Error levels defined with @code{flycheck-define-error-level} can now have a numeric
severity used for sorting, with @code{:severity}.

@node Miscellaneous fixes,Get it,Miscellaneous new features,Flycheck 0 20
@anchor{guide/releases/flycheck-0 20 miscellaneous-fixes}@anchor{179}
@subsubsection Miscellaneous fixes


Flycheck now properly unloads with @code{unload-feature}.

The @ref{cc,,emacs-lisp} checker does not longer choke when
@code{package-initialize} signals an error.

@node Get it,,Miscellaneous fixes,Flycheck 0 20
@anchor{guide/releases/flycheck-0 20 get-it}@anchor{17a}
@subsubsection Get it


Follow the @ref{2f,,installation instructions}.  If you already
have Flycheck installed, just update it from @code{M-x list-packages}.

@node Flycheck 0 19,Flycheck 0 18,Flycheck 0 20,Release announcements
@anchor{guide/releases/flycheck-0 19 flycheck-0-19}@anchor{17b}@anchor{guide/releases/flycheck-0 19 doc}@anchor{17c}
@subsection Flycheck 0.19


@*date: 
Jun 12, 2014


@*version: 
0.19


We are pleased to announce the release of Flycheck 0.19.

@menu
* Breaking changes: Breaking changes<3>. 
* Languages:: 
* New features:: 
* Bug fixes:: 
* Misc changes:: 
* Get it: Get it<2>. 

@end menu

@node Breaking changes<3>,Languages,,Flycheck 0 19
@anchor{guide/releases/flycheck-0 19 breaking-changes}@anchor{17d}
@subsubsection Breaking changes


@ref{123,,ruby-rubylint} requires Ruby Lint 2.0 or newer, due to some
breaking changes in the command line interface of Ruby Lint.

@node Languages,New features,Breaking changes<3>,Flycheck 0 19
@anchor{guide/releases/flycheck-0 19 languages}@anchor{17e}
@subsubsection Languages


@menu
* C/C++: C/C++<4>. 
* Emacs Lisp: Emacs Lisp<2>. 
* Go: Go<3>. 
* Haskell: Haskell<2>. 
* Rust: Rust<3>. 

@end menu

@node C/C++<4>,Emacs Lisp<2>,,Languages
@anchor{guide/releases/flycheck-0 19 c-c}@anchor{17f}
@subsubsection C/C++


The new @ref{b6,,flycheck-cppcheck-inconclusive} enables
@ref{a2,,c/c++-cppcheck} tests that might yield false positives.

When reporting errors in included files, @ref{a1,,c/c++-clang} now
includes the error messages in the faulty include file in the error message on
the affected @code{#include} statement.

@node Emacs Lisp<2>,Go<3>,C/C++<4>,Languages
@anchor{guide/releases/flycheck-0 19 emacs-lisp}@anchor{180}
@subsubsection Emacs Lisp


Flycheck now removes redundant whitespace in the error messages reported by the
@ref{cc,,emacs-lisp} syntax checker.

@node Go<3>,Haskell<2>,Emacs Lisp<2>,Languages
@anchor{guide/releases/flycheck-0 19 go}@anchor{181}
@subsubsection Go


Go code is now checked for unhandled error return values with the new
@ref{e2,,go-errcheck} syntax checker.

Flycheck does not longer signal errors in Go Mode, when the @code{go} executable is
not available.

@node Haskell<2>,Rust<3>,Go<3>,Languages
@anchor{guide/releases/flycheck-0 19 haskell}@anchor{182}
@subsubsection Haskell


Flycheck now dedents the error messages reported by @ref{e9,,haskell-ghc},
and properly checks Haskell files without extensions.

@node Rust<3>,,Haskell<2>,Languages
@anchor{guide/releases/flycheck-0 19 rust}@anchor{183}
@subsubsection Rust


@ref{12a,,rust} has a new @ref{12b,,flycheck-rust-check-tests} option, to
disable syntax checking of test code.

@node New features,Bug fixes,Languages,Flycheck 0 19
@anchor{guide/releases/flycheck-0 19 new-features}@anchor{184}
@subsubsection New features


Syntax checkers may now use the @code{:error-filter} argument to
@ref{19,,flycheck-define-checker} to apply a function to all errors after
parsing.  The function is given the list of parsed errors, and shall return the
list of errors that Flycheck is to use as the result of the syntax checker.  It
may modify the list and all error objects therein in-place.

The new option @code{flycheck-keymap-prefix} lets you change the prefix key
used by Flycheck.  The default is still @code{C-c !}.

@cartouche
@quotation Warning 
The Flycheck manual assumes that you are using the default prefix key.  You
are encouraged to leave the prefix key unchanged, and instead add your own
custom bindings to the Flycheck key map:

@example
(eval-after-load 'flycheck
  '(define-key flycheck-mode-map (kbd "<f8>") #'flycheck-list-errors))
@end example
@end quotation
@end cartouche

Likewise, you now can configure the prefix of in-place temporary files created
by Flycheck with @ref{5d,,flycheck-temp-prefix}.

@cartouche
@quotation Warning 
Changing the prefix may break syntax checkers.  In doubt, stick to the
default prefix.
@end quotation
@end cartouche

@node Bug fixes,Misc changes,New features,Flycheck 0 19
@anchor{guide/releases/flycheck-0 19 bug-fixes}@anchor{185}
@subsubsection Bug fixes


Flycheck now correctly kills running process and removes the temporary files
when stopping a syntax check or killing the buffer.

Also, Flycheck does not long warn if a syntax checker only reports errors for
other files.

@node Misc changes,Get it<2>,Bug fixes,Flycheck 0 19
@anchor{guide/releases/flycheck-0 19 misc-changes}@anchor{186}
@subsubsection Misc changes


Flycheck now has an official logo, and its own mail address.  You can see both
on the Github profile@footnote{https://github.com/flycheck/} of the Flycheck project.

@node Get it<2>,,Misc changes,Flycheck 0 19
@anchor{guide/releases/flycheck-0 19 get-it}@anchor{187}@anchor{guide/releases/flycheck-0 19 github-profile}@anchor{188}
@subsubsection Get it


See @ref{30,,Installation}.

@node Flycheck 0 18,Flycheck 0 17,Flycheck 0 19,Release announcements
@anchor{guide/releases/flycheck-0 18 doc}@anchor{189}@anchor{guide/releases/flycheck-0 18 flycheck-0-18}@anchor{18a}
@subsection Flycheck 0.18


@*date: 
Mar 24, 2014


@*version: 
0.18


Today, we release Flycheck 0.18.

It's quite some time since the last release, but there are not many big changes,
as Flycheck becomes more and more mature, and slowly approaches a 1.0 release.

@menu
* Breaking changes: Breaking changes<4>. 
* Syntax checkers: Syntax checkers<2>. 
* Bug fixes: Bug fixes<2>. 
* Get it: Get it<3>. 

@end menu

@node Breaking changes<4>,Syntax checkers<2>,,Flycheck 0 18
@anchor{guide/releases/flycheck-0 18 breaking-changes}@anchor{18b}
@subsubsection Breaking changes


There are some small breaking changes.  Most notably, the naming conventions of
various shell script syntax checkers were changed.  All of them now use the
prefix @code{sh-}, and the former @code{sh-} checkers now have the prefix @code{sh-posix-}.
This affects their executable variables as well.

Furthermore, the version requirements for some syntax checker tools changed:


@itemize -

@item 
@ref{12a,,rust}  needs upcoming Rust 0.10 now, because Flycheck followed
backwards-incompatible upstream changes in the @code{rustc} options.

@item 
@ref{11f,,rst-sphinx} needs Sphinx 1.2 now, because Flycheck uses a
special writer now, which is not present in previous releases.
@end itemize

@node Syntax checkers<2>,Bug fixes<2>,Breaking changes<4>,Flycheck 0 18
@anchor{guide/releases/flycheck-0 18 syntax-checkers}@anchor{18c}
@subsubsection Syntax checkers


Flycheck can now check BSD Makefile with BSD Make as well.  The
@ref{102,,make} syntax checker does not use GNU Make specific options
anymore, and will work with any POSIX compatible variant of Make.

Go syntax checking got a major update with new syntax checkers based on Golint@footnote{https://github.com/golang/lint}
(@ref{de,,go-golint}) and @code{go tool vet} (@ref{df,,go-vet}).  Go now
has one of the most complete and powerful syntax checker chains in Flycheck.

Support for Perl and for shell scripts was greatly improved by introducing two
new syntax checkers:


@itemize -

@item 
@ref{106,,perl-perlcritic} checks Perl with the powerful Perl-Critic@footnote{https://metacpan.org/pod/Perl::Critic}
tool.

@item 
@ref{13d,,sh-shellcheck} checks Shell scripts with the awesome
Shellcheck@footnote{https://github.com/koalaman/shellcheck} tool, which finds all sorts of idiomatic and semantics mistakes
in shell scripts of various shell languages, and will greatly improve your
shell scripting.
@end itemize

D users can now tell @ref{c6,,d-dmd} about include directories with the
new option @ref{c7,,flycheck-dmd-include-path}.  Likewise, Rust users can use
@ref{12e,,flycheck-rust-library-path} now.

@node Bug fixes<2>,Get it<3>,Syntax checkers<2>,Flycheck 0 18
@anchor{guide/releases/flycheck-0 18 shellcheck}@anchor{18d}@anchor{guide/releases/flycheck-0 18 bug-fixes}@anchor{18e}
@subsubsection Bug fixes


As always, a good deal of bugs and issues was fixed:


@itemize -

@item 
@ref{110,,puppet-lint} includes the name of the corresponding check in
the error message now.

@item 
@ref{11e,,rst} handles @code{.. include::} directives with relative file
names now.

@item 
@ref{11f,,rst-sphinx} will no longer choke if the document being checked
contains custom nodes without @code{text}  writers.

@item 
@ref{12a,,rust} will not longer emit pointless warnings about missing
@code{main} functions in library creates.

@item 
Various error parsing problems were corrected in @ref{a1,,c/c++-clang},
@ref{e0,,go-build} and @ref{e1,,go-test}.
@end itemize

@node Get it<3>,,Bug fixes<2>,Flycheck 0 18
@anchor{guide/releases/flycheck-0 18 get-it}@anchor{18f}
@subsubsection Get it


See @ref{30,,Installation}.

@node Flycheck 0 17,Flycheck 0 16,Flycheck 0 18,Release announcements
@anchor{guide/releases/flycheck-0 17 flycheck-0-17}@anchor{190}@anchor{guide/releases/flycheck-0 17 doc}@anchor{191}
@subsection Flycheck 0.17


@*date: 
Feb 1, 2014


@*version: 
0.17



Flycheck 0.17 was released today.  Though it's just about two weeks since the
last release, there are quite some changes.

@menu
* Breaking changes: Breaking changes<5>. 
* New online manual:: 
* Syntax checkers: Syntax checkers<3>. 
* Extending syntax checkers:: 
* Other bug fixes and improvements:: 

@end menu

@node Breaking changes<5>,New online manual,,Flycheck 0 17
@anchor{guide/releases/flycheck-0 17 breaking-changes}@anchor{192}
@subsubsection Breaking changes


The default value of @ref{66,,flycheck-completion-system} was changed to @code{nil},
i.e. Flycheck now uses plain @code{completing-read} as default completion system.  To
restore the previous default (i.e. IDO), customize it with @code{M-x
customize-variable RET flycheck-completion-system} or add the following to your
@code{init.el}:

@example
(eval-after-load 'flycheck '(setq flycheck-completion-system 'ido))
@end example

Also, @ref{95,,flycheck-count-errors} was changed to count errors of all
levels.  It returns an alist mapping error levels to the amount of errors of
that level.

@node New online manual,Syntax checkers<3>,Breaking changes<5>,Flycheck 0 17
@anchor{guide/releases/flycheck-0 17 new-online-manual}@anchor{193}
@subsubsection New online manual


The most notable change is the new online documentation at
@indicateurl{http://flycheck.readthedocs.org}, which replaces the old online manual at
@indicateurl{http://flycheck.github.io}.  The latter now redirects to the former.

The new manual is written with Sphinx@footnote{http://sphinx-doc.org} instead of Texinfo@footnote{http://www.gnu.org/software/texinfo/}.  The underlying
markup is ReStructuredText@footnote{http://docutils.sourceforge.net/rst.html}, which is simpler, less cluttered, and more powerful
than the TeX dialect of Texinfo@footnote{http://www.gnu.org/software/texinfo/}.  It is also more popular, as nowadays Sphinx
has become a standard tool among Python developers, and is also increasingly
used with other languages as well.  For instance, the LLVM documentation@footnote{http://llvm.org/docs/} is
written in Sphinx.

Besides providing a better HTML documentation, we hope that the new manual
lowers the barrier to external contributors and increases the amount of
contributions to the documentation.

The documentation is now automatically re-build after each push to the Github
repository, so that @indicateurl{http://flycheck.readthedocs.org/en/latest} now always hosts
the up to date documentation.  Besides, there are separate sites for each
versioned release of Flycheck.  For instance,
@indicateurl{http://flycheck.readthedocs.org/en/0.17} now hosts the documentation of Flycheck
0.17 now.

Beyond the manual itself, the new documentation now also includes the release
notes, which were previously hosted at @indicateurl{http://www.lunaryorn.com}, and the
@ref{d,,comparison with Flymake}, which was previously
hosted at the Github Wiki of Flycheck.  The Github Wiki is disabled now, to make
all documentation available from a single place.

Unfortunately, the Info manual included in the Flycheck ELPA packages is
somewhat inferior now, because there is some idiomatic gap between Sphinx and
Texinfo.  It's still usable, though, and we hope to overcome the most striking
shortcomings over the time.

@node Syntax checkers<3>,Extending syntax checkers,New online manual,Flycheck 0 17
@anchor{guide/releases/flycheck-0 17 syntax-checkers}@anchor{194}@anchor{guide/releases/flycheck-0 17 llvm-documentation}@anchor{195}
@subsubsection Syntax checkers


Flycheck can now check GNU Makefiles (see [GH-321]) with the new @code{make-gmake}
syntax checker.

The @ref{12a,,rust} syntax checker now uses @code{--no-trans} to check for more
than just syntax errors.  For instance, it will report unused variables now.

As part of the transition to the new manual, Flycheck now provides a syntax
checker for Sphinx documents (@ref{11f,,rst-sphinx}).  The
@ref{11e,,rst} syntax checker does not check documents within a Sphinx
project anymore, do avoid false positives from Sphinx-specific markup.

@node Extending syntax checkers,Other bug fixes and improvements,Syntax checkers<3>,Flycheck 0 17
@anchor{guide/releases/flycheck-0 17 extending-syntax-checkers}@anchor{196}
@subsubsection Extending syntax checkers


@node Other bug fixes and improvements,,Extending syntax checkers,Flycheck 0 17
@anchor{guide/releases/flycheck-0 17 other-bug-fixes-and-improvements}@anchor{197}
@subsubsection Other bug fixes and improvements



@itemize -

@item 
Flycheck does not longer attach syntax checker processes to the buffer
anymore, improving compatibility with Tabbar Mode ([GH-298]).

@item 
The @ref{cc,,emacs-lisp} and @ref{cd,,emacs-lisp-checkdoc} syntax
checkers do not visit the file being checked anymore, to avoid unintended side
effects from unsafe local variables, etc. ([GH-319])

@item 
When a buffer changes while being checked, Flycheck immediately re-checks the
buffer after the check finished, to avoid outdated errors ([GH-301]).
@end itemize

@node Flycheck 0 16,Flycheck 0 15,Flycheck 0 17,Release announcements
@anchor{guide/releases/flycheck-0 16 flycheck-0-16}@anchor{198}@anchor{guide/releases/flycheck-0 16 doc}@anchor{199}
@subsection Flycheck 0.16


@*date: 
Jan 12, 2014


@*version: 
0.16


Time for a new release of Flycheck, the modern syntax-checking extension for
Emacs:


In two months since the last release, Flycheck got a bunch of new syntax
checkers, a brand-new error list, and the ability to override the executables of
syntax checkers.

Let's go through the list of important changes.  For a detailed list, please
read the @ref{15c,,Changelog}.

@menu
* Breaking changes: Breaking changes<6>. 
* Syntax checkers: Syntax checkers<4>. 
* New features: New features<2>. 
* Improved error list:: 
* Get it: Get it<4>. 

@end menu

@node Breaking changes<6>,Syntax checkers<4>,,Flycheck 0 16
@anchor{guide/releases/flycheck-0 16 breaking-changes}@anchor{19a}
@subsubsection Breaking changes



@itemize -

@item 
The Hdevtools syntax checker was removed from Flycheck into a separate package
flycheck-hdevtools@footnote{https://github.com/flycheck/flycheck-hdevtools} due to various issues ([GH-275]).

@item 
Support for coffeelint 0.x is dropped.
@end itemize

@node Syntax checkers<4>,New features<2>,Breaking changes<6>,Flycheck 0 16
@anchor{guide/releases/flycheck-0 16 syntax-checkers}@anchor{19b}@anchor{guide/releases/flycheck-0 16 flycheck-hdevtools}@anchor{19c}
@subsubsection Syntax checkers


@menu
* New languages and checkers:: 
* Better Haskell support:: 
* Miscellaneous new options:: 

@end menu

@node New languages and checkers,Better Haskell support,,Syntax checkers<4>
@anchor{guide/releases/flycheck-0 16 new-languages-and-checkers}@anchor{19d}
@subsubsection New languages and checkers


Flycheck supports @emph{eight} new languages: AsciiDoc@footnote{http://asciidoc.org/}, Cfengine@footnote{http://cfengine.com/}, Chef@footnote{https://www.getchef.com/} recipes,
ERuby@footnote{http://www.kuwata-lab.com/erubis/}, Handlebars@footnote{http://handlebarsjs.com/}, Racket@footnote{http://racket-lang.org/}, Texinfo@footnote{https://www.gnu.org/software/texinfo}, and Verilog@footnote{https://en.wikipedia.org/wiki/Verilog}.  Additionally, there are a
new syntax checker for Javascript (eslint@footnote{https://github.com/eslint/eslint}), Ruby (ruby-lint@footnote{https://github.com/YorickPeterse/ruby-lint}), and YAML
(js-yaml@footnote{https://github.com/nodeca/js-yaml}).

@node Better Haskell support,Miscellaneous new options,New languages and checkers,Syntax checkers<4>
@anchor{guide/releases/flycheck-0 16 js-yaml}@anchor{19e}@anchor{guide/releases/flycheck-0 16 better-haskell-support}@anchor{19f}
@subsubsection Better Haskell support


Despite the aforementioned removal of Hdevtools, Haskell support made a leap
forward.  The GHC syntax checker resolves local imports properly now, and has
new options to change the search path and the package databases.

The brand-new flycheck-haskell@footnote{https://github.com/flycheck/flycheck-haskell} extension makes use of these variables to
configure the syntax checker properly in Cabal projects.  The extensions adds
all source directories of a Cabal project to the GHC search path, and enables
the package database of the project's Cabal sandbox.

@node Miscellaneous new options,,Better Haskell support,Syntax checkers<4>
@anchor{guide/releases/flycheck-0 16 miscellaneous-new-options}@anchor{1a0}@anchor{guide/releases/flycheck-0 16 flycheck-haskell}@anchor{1a1}
@subsubsection Miscellaneous new options



@itemize -

@item 
The SASS and SCSS syntax checkers support the Compass framework now, via
@ref{132,,flycheck-sass-compass} and @ref{13a,,flycheck-scss-compass}
respectively.

@item 
Clang can enable Microsoft C/C++ extensions now, via
@ref{a8,,flycheck-clang-ms-extensions}.

@item 
Rubocop can inhibit all style hints via the new
@ref{124,,flycheck-rubocop-lint-only}.
@end itemize

@node New features<2>,Improved error list,Syntax checkers<4>,Flycheck 0 16
@anchor{guide/releases/flycheck-0 16 new-features}@anchor{1a2}
@subsubsection New features


@menu
* Syntax checker executables: Syntax checker executables<2>. 
* Disable syntax checkers easily:: 

@end menu

@node Syntax checker executables<2>,Disable syntax checkers easily,,New features<2>
@anchor{guide/releases/flycheck-0 16 syntax-checker-executables}@anchor{1a3}
@subsubsection Syntax checker executables


You can now override the executables of syntax checkers.  See
@ref{69,,Syntax checker executables} for details.

@node Disable syntax checkers easily,,Syntax checker executables<2>,New features<2>
@anchor{guide/releases/flycheck-0 16 disable-syntax-checkers-easily}@anchor{1a4}
@subsubsection Disable syntax checkers easily


Flycheck as a new customization options @ref{60,,flycheck-disabled-checkers}, to
easily disable syntax checkers.

Previously, you needed to remove syntax checkers from
@ref{5f,,flycheck-checkers} to disable them, either via the Customization
interface, or by custom Emacs Lisp:

@example
(setq flycheck-checkers (delq 'emacs-lisp-checkdoc flycheck-checkers))
@end example

With the new variable, there is no need for this convoluted code anymore.
Instead, just set the variable:

@example
(setq flycheck-disabled-checkers '(emacs-lisp-checkdoc))
@end example

Even better, you can easily use this variable in file or directory variables.
For instance, you can use @code{M-x add-file-local-variable RET
flycheck-disabled-checkers RET (emacs-lisp-checkdoc)} in your @code{init.el} to
disable Checkdoc warnings while editing your @code{init.el}.

@node Improved error list,Get it<4>,New features<2>,Flycheck 0 16
@anchor{guide/releases/flycheck-0 16 improved-error-list}@anchor{1a5}
@subsubsection Improved error list


This release continues the improvements to the error list started in the last
release.  The error list is now based on Tabulated List Mode (see [GH-230]), to
address a number of issues in the old Compile Mode-based error list
(e.g. misleading commands and menu items such as “Recompile”).

The new error list, which you can see in the screenshot above, fixes these
issues, and has an improved visual appearance.  The columns are aligned now, and
the superfluous file name is omitted.

@node Get it<4>,,Improved error list,Flycheck 0 16
@anchor{guide/releases/flycheck-0 16 get-it}@anchor{1a6}
@subsubsection Get it


See @ref{30,,Installation}.

@node Flycheck 0 15,,Flycheck 0 16,Release announcements
@anchor{guide/releases/flycheck-0 15 flycheck-0-15}@anchor{1a7}@anchor{guide/releases/flycheck-0 15 doc}@anchor{1a8}
@subsection Flycheck 0.15


@*date: 
Nov 15, 2013


@*version: 
0.15


I have the honour and pleasure to announce a new release of Flycheck, the
modern syntax-checking extension for Emacs.


It is three months since the last release, so this release brings quite a lot of
changes.  For a complete list of all changes, please read the complete list of
@ref{15c,,Changelog}.  This article will just cover the most important changes.

@menu
* Breaking changes: Breaking changes<7>. 
* New syntax checkers:: 
* New error list:: 
* C/C++ support:: 
* New info level messages:: 
* Custom error levels:: 
* Other improvements:: 
* Get it: Get it<5>. 

@end menu

@node Breaking changes<7>,New syntax checkers,,Flycheck 0 15
@anchor{guide/releases/flycheck-0 15 breaking-changes}@anchor{1a9}
@subsubsection Breaking changes


This release introduces three breaking changes.  Two of these are related to the
@ref{1aa,,new-error-list}:

@cartouche
@quotation Warning 
@code{flycheck-display-errors-in-list} is gone.  If you had previously set
@ref{28,,flycheck-display-errors-function} to this function, @strong{remove} this
setting from your configuration.
@end quotation
@end cartouche

Besides, @code{flycheck-list-errors} does not take a prefix argument anymore.  It
cannot list errors at point any longer.

The third breaking change is the removal of @code{flycheck-declare-checker}, which
was obsolete already since the last release.  Unless you have custom syntax
checkers not yet ported to @ref{19,,flycheck-define-checker}, this won't affect
you in any way.  I am not aware of any 3rd party extension which still uses
@code{flycheck-declare-checker}.

@node New syntax checkers,New error list,Breaking changes<7>,Flycheck 0 15
@anchor{guide/releases/flycheck-0 15 new-syntax-checkers}@anchor{1ab}
@subsubsection New syntax checkers


Two new languages made it into this release:  YAML (using the YAML parser from
the Ruby standard library) and Slim@footnote{http://slim-lang.com}.

Additionally there are new syntax checkers for Javascript and PHP.  Flycheck can
check Javascript with Google's Closure Linter@footnote{https://code.google.com/p/closure-linter/}, in place of Jshint.  For PHP,
Flycheck now uses the PHP Mess Detector@footnote{http://phpmd.org/} to check for semantic errors, in
@emph{addition} to a syntax checks with PHP CLI and a style checks with PHP
CodeSniffer.

@node New error list,C/C++ support,New syntax checkers,Flycheck 0 15
@anchor{guide/releases/flycheck-0 15 new-error-list}@anchor{1aa}@anchor{guide/releases/flycheck-0 15 id1}@anchor{1ac}
@subsubsection New error list


The error list at @code{C-c ! l} has been redesigned.

It is no longer a static list filled once by @code{C-c ! l}.  Instead, it
automatically updates after each syntax check, and follows the current window,
i.e. if you switch to another window, the error list is updated to show the
errors of the corresponding buffer.

Furthermore, the error list highlights the errors at point and at the current
line.  If you move the point to an error location, the error list automatically
scrolls to the corresponding error, and highlights it with the new
@code{flycheck-error-list-highlight-at-point} face.  Additionally, it highlights all
other errors at the current line with the new
@ref{86,,flycheck-error-list-highlight} face.

@node C/C++ support,New info level messages,New error list,Flycheck 0 15
@anchor{guide/releases/flycheck-0 15 c-c-support}@anchor{1ad}
@subsubsection C/C++ support


The @ref{a1,,c/c++-clang} syntax checker for C and C++ got a bunch
of new options:


@itemize -

@item 
Set additional preprocessor definitions for syntax checking with
@ref{a4,,flycheck-clang-definitions}, corresponding to the @code{-D} option for
@code{clang}.

@item 
Include additional headers or files during syntax checking with
@ref{a6,,flycheck-clang-includes}, corresponding to the @code{-include} option for
@code{clang}.

@item 
Choose the language standard, e.g. C++98 or C++11, with
@ref{a7,,flycheck-clang-language-standard}, corresponding to the @code{-std} option
for @code{clang}.

@item 
Disable RTTI during syntax checking with @ref{aa,,flycheck-clang-no-rtti},
corresponding to the @code{-fno-rtti} option for @code{clang}.  In current Clang
versions, however, this does not cause errors or warnings when using RTTI.

@item 
Choose the standard library for syntax checking with
@ref{ab,,flycheck-clang-standard-library}, corresponding to the @code{-stdlib}
option for @code{clang}.  Currently, Clang supports @code{libstdc++} for the good old
GNU standard library, and @code{libc++} for the modern Libc++ from the LLVM project.
@end itemize

Besides, the Clang syntax checker was changed to correctly handle local include
files, e.g. @code{#include "foo.h"}.

@node New info level messages,Custom error levels,C/C++ support,Flycheck 0 15
@anchor{guide/releases/flycheck-0 15 new-info-level-messages}@anchor{1ae}
@subsubsection New @code{info} level messages


In addition to the @code{warning} and @code{error} levels, Flycheck now has a new @code{info}
level, which is intended for informational messages which provide additional
information about a specific location in the source code.  With this new level,
the semantics of error levels is as follows:


@table @asis

@item @code{error}

Definite errors which must be fixed for the source code to work correctly

@item @code{warning}

Potential errors and issues, which can be ignored, but still deserve to be
fixed

@item @code{info}

Additional information about a specific source code location, which does not
indicate an error or issue, but is still worth noting
@end table

Some syntax checkers were changed to use this new level for messages, which do
not really fit into the @code{warning} level:


@itemize -

@item 
@ref{a1,,c/c++-clang} for @code{note:} messages

@item 
@ref{112,,python-flake8} for PEP8 naming issues emitted by the
@code{pep8-naming} plugin

@item 
@ref{116,,python-pylint} for convention level messages, e.g. naming
issues, etc.
@end itemize

The new level is already supported by the popular Solarized@footnote{https://github.com/bbatsov/solarized-emacs} and Zenburn@footnote{https://github.com/bbatsov/zenburn-emacs}
themes.

@node Custom error levels,Other improvements,New info level messages,Flycheck 0 15
@anchor{guide/releases/flycheck-0 15 custom-error-levels}@anchor{1af}@anchor{guide/releases/flycheck-0 15 id2}@anchor{1b0}
@subsubsection Custom error levels


The new @code{info} level is backed by a generic mechanism to define new error
levels, using the new function @ref{25,,flycheck-define-error-level}.  For
instance, the @code{warning} level is now defined as follows:

@example
(flycheck-define-error-level 'warning
  :overlay-category 'flycheck-warning-overlay
  :fringe-bitmap 'question-mark
  :fringe-face 'flycheck-fringe-warning)
@end example

A error level consists of a category for overlays, which defines the appearance
and priority of overlays for this level, and bitmap and face for fringe
indicators.

After defining an error level, you can use it the error patterns of a syntax
checker as usual.

@node Other improvements,Get it<5>,Custom error levels,Flycheck 0 15
@anchor{guide/releases/flycheck-0 15 other-improvements}@anchor{1b1}
@subsubsection Other improvements


Beside these important changes, there are also a number of smaller improvements:


@itemize -

@item 
Flycheck does not longer check encrypted files for obvious reasons.

@item 
The @ref{cd,,emacs-lisp-checkdoc} syntax checker does not check
@code{.dir-locals.el} anymore.

@item 
@ref{116,,python-pylint} now parses error columns from the output of
@code{pylint}.

@item 
Spurious “flawed definition” warnings in @ref{100,,lua},
@ref{11e,,rst} and @ref{e0,,go-build} were fixed.

@item 
@ref{a2,,c/c++-cppcheck} output now parses correctly when using the pure
Emacs Lisp XML parser in @code{xml.el}.

@cartouche
@quotation Note 
Nonetheless, you are advised to use Emacs with @code{libxml} support.  Most
Linux distributions ship Emacs packages with @code{libxml} support, but if you
are building your own, or use a source-based distribution such as Gentoo,
take care to enable @code{libxml} for Emacs.
@end quotation
@end cartouche
@end itemize

@node Get it<5>,,Other improvements,Flycheck 0 15
@anchor{guide/releases/flycheck-0 15 get-it}@anchor{1b2}
@subsubsection Get it


See @ref{30,,Installation}.

@node Changelog,,Release announcements,Flycheck releases
@anchor{guide/releases/index id1}@anchor{1b3}@anchor{guide/releases/index changelog}@anchor{15c}
@section Changelog


@menu
* 0.21 (Oct 26@comma{} 2014): 0 21 Oct 26 2014. 
* 0.20 (Aug 12@comma{} 2014): 0 20 Aug 12 2014. 
* 0.19 (Jun 12@comma{} 2014): 0 19 Jun 12 2014. 
* 0.18 (Mar 24@comma{} 2014): 0 18 Mar 24 2014. 
* 0.17 (Feb 1@comma{} 2014): 0 17 Feb 1 2014. 
* 0.16 (Jan 11@comma{} 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15@comma{} 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16@comma{} 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15@comma{} 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28@comma{} 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18@comma{} 2013): 0 12 May 18 2013. 
* 0.11 (May 01@comma{} 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21@comma{} 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13@comma{} 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9@comma{} 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23@comma{} 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14@comma{} 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30@comma{} 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29@comma{} 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28@comma{} 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21@comma{} 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21@comma{} 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25@comma{} 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11@comma{} 2012): 0 1 Oct 11 2012. 

@end menu

@node 0 21 Oct 26 2014,0 20 Aug 12 2014,,Changelog
@anchor{guide/releases/index oct-26-2014}@anchor{1b4}
@subsection 0.21 (Oct 26, 2014)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
@code{html-tidy} is not enabled in Web Mode anymore [GH-464]

@item 
@code{d-dmd} now requires DMD 2.066 or newer [GH-460]

@item 
@code{:next-checkers} now requires the maximum permissible level instead of a
custom predicate [GH-472]

@item 
Remove @code{flycheck-error-list-highlight-at-point} face and related
functionality [GH-490]
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
Coq

@item 
RPM spec files with @code{rpmlint} [GH-480] [GH-481]
@end itemize

@item 
New features:


@itemize -

@item 
Add @code{null-device} symbol for syntax checker commands

@item 
Add @code{flycheck-display-error-messages-unless-error-list} for
@code{flycheck-error-display-function}

@item 
Add @code{flycheck-error-list-after-refresh-hook} to run after the error list
refreshes

@item 
Add @code{flycheck-navigation-minimum-level} to restrict error levels available
for navigation [GH-398] [GH-485]

@item 
The error list can be sorted by message and syntax checker name now [GH-500]

@item 
Add @code{flycheck-error-list-checker-name} face to customize the appearance of
the syntax checker name in the error list [GH-500]

@item 
Add @code{flycheck-shellcheck-excluded-warnings} to exclude warnings from
ShellCheck reports [GH-499]

@item 
Add @code{flycheck-add-mode} to add a new major mode to a syntax checker [GH-506]

@item 
Add @code{flycheck-gcc-openmp} to enable OpenMP for GCC in C/C++ [GH-507]
@end itemize

@item 
Improvements:


@itemize -

@item 
Improve GCC syntax checking by expanding templates [GH-459]

@item 
@code{d-dmd} reports errors with columns now [GH-460]

@item 
Remove Projectile-based config file search [GH-461]

@item 
Do not change point when navigating in the error list [GH-487]

@item 
ShellCheck warnings now include the corresponding warning code
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Expand @code{default-directory} before using it, to handle abbreviated paths
gracefully [GH-434]

@item 
Restore mouse support in the error list [GH-468]

@item 
@code{less} now correctly resolves relative paths in @code{data-uri} [GH-471]

@item 
@code{go-errcheck} now properly uses package names as syntax checker arguments

@item 
@code{c/c++-clang} now handles empty error messages [GH-497]
@end itemize
@end itemize

@node 0 20 Aug 12 2014,0 19 Jun 12 2014,0 21 Oct 26 2014,Changelog
@anchor{guide/releases/index aug-12-2014}@anchor{1b5}
@subsection 0.20 (Aug 12, 2014)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
The internal names of syntax checker properties changed.  @strong{All packages
depending on Flycheck must be recompiled!}

@item 
@code{flycheck-substitute-argument} always returns a list now

@item 
The special meaning of a trailing @code{=} in @code{(option …)} and @code{(config-file
…)} is removed.  Both arguments must now explicitly specify @code{concat} to
prepend the option as string.
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
C/C++ with GCC [GH-408]

@item 
Scala with scalastyle [GH-425]

@item 
Fortran with GFortran [GH-414] [GH-450]

@item 
Ada with GNAT [GH-414] [GH-457]
@end itemize

@item 
New features:


@itemize -

@item 
Add @code{flycheck-clang-no-exceptions} and @code{flycheck-gcc-no-exceptions} to
flag exceptions as errors in C++ [GH-412]

@item 
Add @code{flycheck-rust-crate-root} to resolve inter-crate references in @code{rust}
[GH-417]

@item 
Add @code{flycheck-clang-blocks} to enable the block syntax in Clang [GH-420]

@item 
@code{read-flycheck-checker} now accepts a default value

@item 
Add @code{flycheck-status-changed-functions} to react on status changes

@item 
Make the mode line lighter of Flycheck customizable with
@code{flycheck-mode-line}

@item 
Add @code{flycheck-rubylintrc} to support configuration files for
@code{ruby-rubylint} [GH-424]

@item 
Add @code{flycheck-rust-crate-type} to make the Crate type customizable [GH-446]

@item 
The mode line of the error list is now customizable with
@code{flycheck-error-list-mode-line} [GH-454]

@item 
Pressing @code{n} or @code{p} in the error list now shows the error at point in a
separate window [GH-452] [GH-454]

@item 
Pressing @code{RET} in the error list now jumps to the error at point [GH-454]

@item 
The error list can now be sorted by error level by clicking on the
corresponding list header, or by pressing @code{S} with point on the column text
[GH-454]

@item 
Error levels defined with @code{flycheck-define-error-level} can now have a
numeric severity used for sorting [GH-454]
@end itemize

@item 
Improvements:


@itemize -

@item 
Use proper temporary files in @code{python-flake8} [GH-421]

@item 
Demote errors from @code{package-initialize} in the @code{emacs-lisp} checker [GH-423]

@item 
@code{flycheck-select-checker} now uses the last used syntax checker as default
when reading from minibuffer

@item 
@code{flycheck-compile} now prompts for the syntax checker to run as @code{compile}
command [GH-428]

@item 
The @code{rust} syntax checker shows info messages now [GH-439]

@item 
The @code{sass} and @code{scss} syntax checkers now use a temporary directory for
their cache [GH-443] [GH-454]

@item 
Change the default of @code{flycheck-eslintrc} to @code{nil} [GH-447]

@item 
Show the menu on the mode line lighter [GH-365]

@item 
Greatly improve Flycheck's menu

@item 
@code{n} and @code{p} now navigate the error list by errors, not by lines [GH-452]
[GH-444]

@item 
@code{c/c++-clang} does not use in-place temporary files anymore [GH-456]
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Properly support @code{unload-feature} now
@end itemize

@item 
Other changes:


@itemize -

@item 
Remove dependencies on f.el and s.el
@end itemize
@end itemize

@node 0 19 Jun 12 2014,0 18 Mar 24 2014,0 20 Aug 12 2014,Changelog
@anchor{guide/releases/index jun-12-2014}@anchor{1b6}
@subsection 0.19 (Jun 12, 2014)



@itemize -

@item 
Flycheck now has an official logo [GH-331]

@item 
@strong{Breaking changes}:


@itemize -

@item 
The @code{ruby-rubylint} syntax checker now requires Ruby Lint 2.0 or
newer. [GH-405]
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
Go with @code{errcheck} [GH-393]
@end itemize

@item 
New features:


@itemize -

@item 
Add @code{flycheck-keymap-prefix} to change the prefix key for Flycheck
keybindings [GH-381]

@item 
Make the prefix of Flycheck's temporary files customizable with
@code{flycheck-temp-prefix} [GH-387]

@item 
Add @code{:error-filter} property for syntax checkers to apply a custom function
to modify or filter errors after parsing [GH-397]

@item 
Add @code{flycheck-rust-check-tests} to disable syntax checking of test code in
Rust [GH-406]

@item 
Add @code{flycheck-cppcheck-inconclusive} to enable cppcheck tests that might
give false positives [GH-407]
@end itemize

@item 
Improvements:


@itemize -

@item 
Collapse redundant whitespace in messages from @code{emacs-lisp} [GH-397]

@item 
Dedent messages from @code{haskell-ghc} [GH-397]

@item 
Fold errors in included files into the error messages of the corresponding
include in @code{c/c++-clang} [GH-397]

@item 
The @code{ruby-rubylint} syntax checker now supports ruby-lint 2.0 and
newer [GH-405]
@end itemize

@item 
Bug fixes:


@itemize -

@item 
When stopping Flycheck, correctly kill running processes and cleanup their
temporary files [GH-334]

@item 
Do not choke on files without extensions in @code{haskell-ghc}

@item 
Fix spurious warning when a syntax checker reports errors, but not for the
file being checked [GH-391]

@item 
Do not signal errors in Go Mode, when @code{go} is not available
@end itemize
@end itemize

@node 0 18 Mar 24 2014,0 17 Feb 1 2014,0 19 Jun 12 2014,Changelog
@anchor{guide/releases/index mar-24-2014}@anchor{1b7}
@subsection 0.18 (Mar 24, 2014)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
The POSIX script syntax checkers @code{sh-bash} and @code{sh-dash} were renamed to
@code{sh-posix-bash} and @code{sh-posix-dash} respectively.  The @code{bash} and @code{zsh}
syntax checkers were renamed to @code{sh-bash} and @code{sh-zsh} respectively.  Thus,
all shell script syntax checkers now live in the @code{sh-} prefix.

@item 
@code{rst-sphinx} requires Sphinx 1.2 or newer now.

@item 
@code{rustc} requires Rust 0.10 (not yet released at the time of writing) or
newer now [GH-353]
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
Perl with Perl Critic [GH-88]

@item 
Replace GNU Make with POSIX Make [GH-322]

@item 
Shellcheck [GH-267]

@item 
Go with @code{golint} [GH-328]

@item 
Go with @code{go tool vet} [GH-329]
@end itemize

@item 
New features:


@itemize -

@item 
Add @code{flycheck-rust-library-path} to specify library locations for @code{rust}

@item 
Add @code{flycheck-dmd-include-path} to change the include path of @code{d-dmd}
[GH-344]
@end itemize

@item 
Improvements:


@itemize -

@item 
@code{flycheck-parse-checkstyle} supports @code{info} level messages now

@item 
Correctly parse multiline error messages of @code{go-build} and @code{go-test}

@item 
@code{rst-sphinx} supports custom nodes without explicit writer support now, by
using the @code{pseudoxml} builder.

@item 
Avoid warnings about missing main functions in @code{rust}

@item 
Properly resolve relative filenames in @code{.. include::} directives in @code{rst}

@item 
Use @code{--unix_mode} option in @code{javascript-gjslint} to get the file name
[GH-348]

@item 
Puppet Lint messages now include the name of the corresponding check

@item 
@code{rustc} supports upcoming Rust 0.10 now [GH-353]

@item 
Flycheck now handles Clang errors from included files [GH-367]
@end itemize
@end itemize

@node 0 17 Feb 1 2014,0 16 Jan 11 2014,0 18 Mar 24 2014,Changelog
@anchor{guide/releases/index feb-1-2014}@anchor{1b8}
@subsection 0.17 (Feb 1, 2014)



@itemize -

@item 
The manual was ported to Sphinx@footnote{http://sphinx-doc.org} and is now located at
@indicateurl{http://flycheck.readthedocs.org} [GH-274]

@item 
@strong{Breaking changes}:


@itemize -

@item 
The default @code{flycheck-completion-system} was changed to nil, i.e. the
built-in @code{completing-read}, for compliance with Emacs' defaults.  To restore
the previous behaviour, add @code{(eval-after-load 'flycheck '(setq
flycheck-completion-system 'ido))} to your @code{init.el}.

@item 
@code{flycheck-count-errors} counts errors of all levels now, and returns an
alist mapping error symbols to error counts.
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
RST (ReStructuredText) using Sphinx

@item 
GNU Make [GH-321]
@end itemize

@item 
New features:


@itemize -

@item 
Extend syntax checkers with @code{flycheck-add-next-checkers} [GH-266]
@end itemize

@item 
Improvements:


@itemize -

@item 
Immediately re-check the buffer when it was changed during a syntax check
[GH-301]

@item 
Do not defer syntax checker after idle change timeout [GH-305]

@item 
Do not use the generic @code{rst} syntax checker in Sphinx projects anymore, to
avoid false positives by Sphinx-only markup

@item 
Check for more than just syntax errors in @code{rust} [GH-314]

@item 
@code{chef-foodcritic} supports @code{enh-ruby-mode} now
@end itemize

@item 
Bug fixes


@itemize -

@item 
Do not attach syntax checker processes to the buffer anymore [GH-298]

@item 
Do not visit the file to check in @code{emacs-lisp} and @code{emacs-lisp-checkdoc} to
avoid unintended side effects [GH-319]
@end itemize
@end itemize

@node 0 16 Jan 11 2014,0 15 Nov 15 2013,0 17 Feb 1 2014,Changelog
@anchor{guide/releases/index sphinx}@anchor{1b9}@anchor{guide/releases/index jan-11-2014}@anchor{1ba}
@subsection 0.16 (Jan 11, 2014)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
Argument substitution is no longer performed on syntax checker executables.
The executable must be a string.

@item 
Split out @code{haskell-hdevtools} into a separate package.  See
flycheck-hdevtools@footnote{https://github.com/flycheck/flycheck-hdevtools} [GH-275]

@item 
Drop support for coffeelint 0.x

@item 
The error list is reimplemented on top of Tabulated List Mode.  This greatly
changes the appearance and behaviour of the error list [GH-230]
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
Ruby with @code{ruby-lint} [GH-250]

@item 
Handlebars [GH-270]

@item 
YAML with @code{yaml-jsyaml} [GH-253]

@item 
Chef recipes with @code{foodcritic} [GH-255]

@item 
AsciiDoc [GH-276]

@item 
CFEngine [GH-271]

@item 
Racket [GH-277]

@item 
Texinfo

@item 
Verilog [GH-296]

@item 
Javascript with @code{eslint} [GH-291]

@item 
ERuby [GH-285]
@end itemize

@item 
New features:


@itemize -

@item 
Define variables to override the executables of syntax checkers [GH-272]

@item 
Interactively set the executable of a syntax checker with
@code{flycheck-set-checker-executable} [GH-272]

@item 
Disable syntax checkers easily with @code{flycheck-disabled-checkers} [GH-269]

@item 
Add support for the Compass CSS framework in the @code{sass} and @code{scss} checkers,
with @code{flycheck-sass-compass} and @code{flycheck-scss-compass} respectively
[GH-268]

@item 
Disable style checks in @code{ruby-rubocop} with @code{flycheck-rubocop-lint-only}
[GH-287]

@item 
Add support for Microsoft extensions in @code{c/c++-clang} via
@code{flycheck-clang-ms-extensions} [GH-283]

@item 
New faces @code{flycheck-error-list-info}, @code{flycheck-error-list-warning},
@code{flycheck-error-list-error}, @code{flycheck-error-list-line-number} and
@code{flycheck-error-list-column-number} [GH-230]

@item 
Add @code{flycheck-ghc-no-user-package-database} to disable the user package
database for @code{haskell-ghc}

@item 
Add @code{flycheck-ghc-package-databases} to add additional package databases to
@code{haskell-ghc}

@item 
Add @code{flycheck-ghc-search-path} to add additional directories to the search
path of @code{haskell-ghc}
@end itemize

@item 
Improvements:


@itemize -

@item 
Demote Rubocop convention messages to @code{info} level

@item 
Stop Flycheck before the buffer is reverted [GH-282]

@item 
Properly resolve local module imports in @code{haskell-ghc}
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Make relative imports work with @code{python-pylint} [GH-280]

@item 
Fix parsing of errors in @code{scss} and @code{sass}
@end itemize
@end itemize

@node 0 15 Nov 15 2013,0 14 1 Aug 16 2013,0 16 Jan 11 2014,Changelog
@anchor{guide/releases/index nov-15-2013}@anchor{1bb}@anchor{guide/releases/index flycheck-hdevtools}@anchor{1bc}
@subsection 0.15 (Nov 15, 2013)



@itemize -

@item 
Flycheck has a new home at @indicateurl{https://github.com/flycheck/flycheck},
the online manual moved to @indicateurl{http://flycheck.github.io}.

@item 
@strong{Breaking changes}:


@itemize -

@item 
Do not add the current directory to the @code{emacs-lisp} syntax checker load
path

@item 
@code{flycheck-list-errors} cannot list errors at point anymore.  It does not
accept a prefix argument anymore, and takes zero arguments now [GH-214]

@item 
@code{flycheck-display-errors-in-list} is gone.  The error list automatically
highlights the error at point now [GH-214]

@item 
Remove obsolete @code{flycheck-declare-checker}
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
YAML [GH-236]

@item 
Javascript with @code{gjslint} [GH-245]

@item 
Slim [GH-246]

@item 
PHP using @code{phpmd} [GH-249]
@end itemize

@item 
New features:


@itemize -

@item 
Support IDO or Grizzl@footnote{https://github.com/d11wtq/grizzl} as completion systems for @code{flycheck-select-checker}
at @code{C-c ! s}

@item 
Disable standard error navigation with @code{flycheck-standard-error-navigation}
[GH-202]

@item 
Add @code{flycheck-clang-language-standard} to choose the language standard for
C/C++ syntax checking [GH-207]

@item 
Add @code{flycheck-clang-definitions} to set additional definitions for C/C++
syntax checking [GH-207]

@item 
Add @code{flycheck-clang-no-rtti} to disable RTTI for C/C++ syntax checking
[GH-207]

@item 
Add new option cell @code{option-flag} for boolean flags in syntax checker
commands

@item 
Add @code{flycheck-clang-includes} to include additional files for C/C++ syntax
checking [GH-207]

@item 
Add configuration file variable @code{flycheck-pylintrc} for Pylint

@item 
New faces @code{flycheck-error-list-highlight-at-point} and
@code{flycheck-error-list-highlight} to highlight the errors at point and at the
current line respectively in the error list [GH-214]

@item 
The error list now automatically updates to show the errors of the current
buffer [GH-214]

@item 
Define new error levels with @code{flycheck-define-error-level} [GH-212]

@item 
Add @code{flycheck-clang-standard-library} to choose the standard library for
C/C++ syntax checking [GH-234]

@item 
Customize the delay for displaying errors via
@code{flycheck-display-errors-delay} [GH-243]

@item 
Add @code{info} level for informational annotations by syntax checkers [GH-215]

@item 
Add a new symbol @code{temporary-file-name} to pass temporary file names to
syntax checkers [GH-259]
@end itemize

@item 
Improvements:


@itemize -

@item 
The error list now refreshes automatically after each syntax check [GH-214]

@item 
The errors at point are now automatically highlighted in the error list
[GH-214]

@item 
@code{emacs-lisp-checkdoc} does not longer check @code{.dir-locals.el} files

@item 
Do not automatically check syntax in encrypted files [GH-222]

@item 
Parse notes from @code{c/c++-clang} into info level messages [GH-215]

@item 
Parse convention warnings from @code{pylint} to info level [GH-204]

@item 
Demote naming warnings from @code{python-flake8} to info level [GH-215]

@item 
Support @code{enh-ruby-mode} in Ruby syntax checkers [GH-256]

@item 
Parse columns from @code{python-pylint} errors

@item 
Do not compress temporary files for syntax checks if the original file was
compressed
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Find local includes in the Clang syntax checker [GH-225]

@item 
Do not emit spurious flawed definition warning in the @code{rst} syntax checker

@item 
Handle abbreviated file names in @code{luac} output, by simply ignoring them
[GH-251]

@item 
Correctly redirect the output binary of the @code{go-build} syntax checker
[GH-259]

@item 
Fix Cppcheck parsing with the built-in Emacs XML parser [GH-263]
@end itemize
@end itemize

@node 0 14 1 Aug 16 2013,0 14 Aug 15 2013,0 15 Nov 15 2013,Changelog
@anchor{guide/releases/index grizzl}@anchor{1bd}@anchor{guide/releases/index aug-16-2013}@anchor{1be}
@subsection 0.14.1 (Aug 16, 2013)



@itemize -

@item 
Bug fixes:


@itemize -

@item 
Add a missing dependency [GH-194]
@end itemize
@end itemize

@node 0 14 Aug 15 2013,0 13 Jun 28 2013,0 14 1 Aug 16 2013,Changelog
@anchor{guide/releases/index aug-15-2013}@anchor{1bf}
@subsection 0.14 (Aug 15, 2013)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
Introduce @code{flycheck-define-checker} and obsolete @code{flycheck-declare-checker}
[GH-163]

@item 
Remove the obsolete @code{flycheck-error-face} and @code{flycheck-warning-face}

@item 
Do not initialize packages by default in @code{emacs-lisp} syntax checker for
non-configuration files [GH-176]

@item 
Change the default @code{flycheck-highlighting-mode} to @code{symbols} [GH-179]

@item 
Drop support for Pylint 0.x in @code{python-pylint} [GH-184]
@end itemize

@item 
New features:


@itemize -

@item 
List errors at point only with prefix arg to @code{flycheck-list-errors} [GH-166]

@item 
Add new display function @code{flycheck-display-errors-in-list} to display errors
at point in the error list [GH-166]

@item 
New @code{option-list} argument cell to pass option lists to a syntax checker

@item 
New @code{flycheck-emacs-lisp-load-path} option to customize the @code{load-path} used
by the @code{emacs-lisp} syntax checker [GH-174]

@item 
New @code{flycheck-emacs-lisp-initialize-packages} option to initialize packages
in the @code{emacs-lisp} syntax checker [GH-176]

@item 
New @code{flycheck-emacs-lisp-package-user-dir} option to configure the package
directory for the @code{emacs-lisp} syntax checker [GH-176]

@item 
New option filter @code{flycheck-option-comma-separated-list} for options with
comma separated lists as values

@item 
New highlighting mode @code{symbols} to highlight the symbol pointed to by an
error [GH-179]
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
LESS [GH-160]

@item 
Haskell with @code{ghc}, @code{hdevtools} and @code{hlint} [GH-162]

@item 
C/C++ with @code{cppcheck} [GH-170]

@item 
C/C++ with @code{clang} [GH-172]

@item 
CoffeeScript with @code{coffee}

@item 
XML with @code{xmllint} [GH-180]

@item 
D with @code{dmd} [GH-167]
@end itemize

@item 
Improvements:


@itemize -

@item 
Support Web Mode in @code{html-tidy} syntax checker [GH-157]

@item 
Support Rubocop 0.9 and drop support for older Rubocop releases [GH-159]

@item 
Include the message ID in error messages from @code{python-pylint}
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Fix warnings about flawed definitions in @code{emacs-lisp} and
@code{emacs-lisp-checkdoc}, caused by faulty formatting of sexps

@item 
Refresh error lists when pressing @code{g} [GH-166]

@item 
Do not obscure active minibuffer input when displaying errors in the echo
area [GH-175]

@item 
Fix universal prefix argument for @code{flycheck-next-error} at @code{C-c ! n}

@item 
Correctly parse output of @code{coffeelint} 0.5.7 [GH-192]

@item 
Correctly parse output of @code{pylint} 1.0 [GH-184]
@end itemize
@end itemize

@node 0 13 Jun 28 2013,0 12 May 18 2013,0 14 Aug 15 2013,Changelog
@anchor{guide/releases/index jun-28-2013}@anchor{1c0}
@subsection 0.13 (Jun 28, 2013)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
Obsolete @code{flycheck-warning-face} and @code{flycheck-error-face} in favor
@code{flycheck-warning} and @code{flycheck-error} respectively

@item 
Obsolete @code{:predicate} forms in favor of @code{:predicate} functions

@item 
@code{flycheck-def-config-file-var} does not automatically mark variables as safe
anymore
@end itemize

@item 
New features:


@itemize -

@item 
Make fringe indicator faces customizable independently with
@code{flycheck-fringe-error} and @code{flycheck-fringe-warning}

@item 
Improve the default faces by using underlines instead of foreground colors,
if possible

@item 
Customizable error processing with @code{flycheck-process-error-functions}
[GH-141]

@item 
Make the delay before starting a syntax check customizable via
@code{flycheck-idle-change-delay} [GH-144]

@item 
Make display of errors under point customizable via
@code{flycheck-display-errors-function} [GH-156]
@end itemize

@item 
Improvements


@itemize -

@item 
Always highlight errors on top of warnings now

@item 
Do not trigger syntax checks in the middle of commands [GH-141]

@item 
Add the current directory to load path in the @code{emacs-lisp} syntax checker

@item 
Do not longer use the @code{emacs-lisp-checkdoc} syntax checker in Scratch
buffers

@item 
Do not flush temporary files onto disk [GH-149]

@item 
Syntax checkers may have error patterns and error parser now

@item 
Predicate forms are now wrapped into functions and compiled into functions
during byte compilation

@item 
Copy each message separately in @code{flycheck-copy-messages-as-kill}

@item 
Mark some customizable variables as safe for file variable usage, most
notably @code{flycheck-indication-mode}, @code{flycheck-highlighting-mode} and
@code{flycheck-idle-change-delay}.
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Fix error when searching for a configuration file outside a Projectile
project

@item 
Do not start a syntax check before the @code{flycheck-mode-hook} was run

@item 
Do not start automatic syntax checks if Flycheck Mode is disabled

@item 
Defer the initial syntax check until after the current interactive command
[GH-143]

@item 
Correctly clean up information about running processes

@item 
Fix compatibility with Emacs 24.2 and earlier [GH-150]

@item 
Fix version information on Emacs trunk builds
@end itemize
@end itemize

@node 0 12 May 18 2013,0 11 May 01 2013,0 13 Jun 28 2013,Changelog
@anchor{guide/releases/index may-18-2013}@anchor{1c1}
@subsection 0.12 (May 18, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
Ruby using @code{jruby} [GH-136]

@item 
Puppet [GH-138]
@end itemize

@item 
New features:


@itemize -

@item 
Highlight error expressions by default, with the new @code{sexps} highlighting
mode

@item 
Automatically check syntax some time after the last change in the buffer
[GH-140]

@item 
Add @code{flycheck-version} to determine the installed Flycheck version

@item 
Add @code{flycheck-list-errors}, mapped to @code{C-c ! l}, to list all errors in a
separate buffer
@end itemize

@item 
Improvements:


@itemize -

@item 
Defer syntax checks while a buffer is reverted, to avoid race conditions
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Correctly parse syntax errors from JRuby [GH-136]
@end itemize
@end itemize

@node 0 11 May 01 2013,0 10 Apr 21 2013,0 12 May 18 2013,Changelog
@anchor{guide/releases/index may-01-2013}@anchor{1c2}
@subsection 0.11 (May 01, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
Scala [GH-124]
@end itemize

@item 
New features:


@itemize -

@item 
Customizable error indication with control of the fringe side, via
@code{flycheck-indication-mode}

@item 
Customizable automatic syntax checking, via
@code{flycheck-check-syntax-automatically} [GH-128]

@item 
Customizable configuration file search, via
@code{flycheck-locate-config-file-functions} [GH-133]

@item 
Find configuration files in Projectile@footnote{https://github.com/bbatsov/projectile} projects

@item 
Add @code{flycheck-before-syntax-check-hook} and
@code{flycheck-syntax-check-failed-hook}
@end itemize

@item 
Improvements:


@itemize -

@item 
The @code{ruby} syntax checker now differentiates warnings from errors [GH-123]

@item 
Faces are now in a separate customization group
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Add missing customization group for syntax checker options
@end itemize
@end itemize

@node 0 10 Apr 21 2013,0 9 Apr 13 2013,0 11 May 01 2013,Changelog
@anchor{guide/releases/index apr-21-2013}@anchor{1c3}@anchor{guide/releases/index projectile}@anchor{1c4}
@subsection 0.10 (Apr 21, 2013)



@itemize -

@item 
Flycheck uses @code{cl-lib} now.  This library is built-in as of GNU Emacs 24.3.
For earlier releases of GNU Emacs 24 an additional compatibility library will
be installed from GNU ELPA.

@item 
New syntax checkers:


@itemize -

@item 
POSIX Shell script using @code{bash} [GH-112]

@item 
Ruby using @code{rubocop} [GH-113]

@item 
Elixir [GH-108]

@item 
Erlang [GH-122]
@end itemize

@item 
Removed syntax checkers:


@itemize -

@item 
Python using Pyflakes.  Use the superior Flake8 syntax checker [GH-115]
@end itemize

@item 
New features:


@itemize -

@item 
Add @code{flycheck-copy-messages-as-kill}, mapped to @code{C-c ! C-w}, to copy all
error messages under point into kill ring

@item 
Add @code{flycheck-google-messages}, mapped to @code{C-c ! /}, to google for error
messages under point.  Needs the Google This@footnote{https://github.com/Bruce-Connor/emacs-google-this} library

@item 
Syntax checkers can redirect output to a temporary directory now using the
@code{temporary-directory} argument symbol
@end itemize

@item 
Improvements:


@itemize -

@item 
Call option filters for @code{nil} values, too

@item 
Improve error parsing in Bash syntax checker [GH-112]

@item 
Error navigation does not cross restrictions in narrowed buffers anymore

@item 
Try to preserve the non-directory part of the buffer's file name when
substituting the @code{source} symbol [GH-99]
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Fix error highlighting and navigation in narrowed buffers

@item 
Use a hopefully more reliable way to parse output of PHP CodeSniffer
[GH-118]
@end itemize
@end itemize

@node 0 9 Apr 13 2013,0 8 Apr 9 2013,0 10 Apr 21 2013,Changelog
@anchor{guide/releases/index apr-13-2013}@anchor{1c5}@anchor{guide/releases/index google-this}@anchor{1c6}
@subsection 0.9 (Apr 13, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
SCSS using @code{scss} [GH-103]

@item 
RST (ReStructuredText) using Docutils

@item 
Go using @code{go build} and @code{go test} [GH-107]
@end itemize

@item 
Improvements:


@itemize -

@item 
Quit the error message window when navigating away from error locations
@end itemize
@end itemize

@node 0 8 Apr 9 2013,0 7 1 Feb 23 2013,0 9 Apr 13 2013,Changelog
@anchor{guide/releases/index apr-9-2013}@anchor{1c7}
@subsection 0.8 (Apr 9, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
Go using @code{gofmt} [GH-91]

@item 
Rust using @code{rustc} [GH-101]
@end itemize

@item 
New features:


@itemize -

@item 
Add a global Flycheck mode.  @code{(global-flycheck-mode)} is now the recommended
way to enable Flycheck [GH-29]

@item 
Add support for syntax checker options [GH-72]

@item 
Add option for the coding standard used by the @code{php-phpcs} syntax
checker

@item 
Add options for the maximum McCabe complexity and the maximum line
length to @code{python-flake8}
@end itemize

@item 
Improvements:


@itemize -

@item 
Support McCabe warnings in @code{python-flake8}

@item 
Support warnings from @code{flake8} 2

@item 
Show long error messages in a popup buffer [GH-94]

@item 
Show all error messages at point [GH-96]

@item 
Add support for naming warings from @code{flake8} 2 [GH-98]

@item 
Flycheck mode is not longer enabled for buffers whose names start with a
space

@item 
Improve highlighting to reduce screen flickering [GH-100]
@end itemize
@end itemize

@node 0 7 1 Feb 23 2013,0 7 Feb 14 2013,0 8 Apr 9 2013,Changelog
@anchor{guide/releases/index feb-23-2013}@anchor{1c8}
@subsection 0.7.1 (Feb 23, 2013)



@itemize -

@item 
Bug fixes:


@itemize -

@item 
Do not signal errors from @code{flycheck-mode} [GH-87]

@item 
Correctly fall back to @code{$HOME} when searching configuration files

@item 
Correctly ascend to parent directory when searching configuration files
@end itemize

@item 
API changes:


@itemize -

@item 
Rename @code{config} cell to @code{config-file}

@item 
Allow to pass the result of @code{config-file} cells as single argument

@item 
Add support for evaluating Lisp forms in syntax checker commands [GH-86]
@end itemize
@end itemize

@node 0 7 Feb 14 2013,0 6 1 Jan 30 2013,0 7 1 Feb 23 2013,Changelog
@anchor{guide/releases/index feb-14-2013}@anchor{1c9}
@subsection 0.7 (Feb 14, 2013)



@itemize -

@item 
New features:


@itemize -

@item 
Navigate to source of syntax checker declarations from syntax checker help

@item 
Add online Info manual [GH-60]
@end itemize

@item 
Improvements:


@itemize -

@item 
Use pipes instead of TTYs to read output from syntax checkers

@item 
Defer syntax checks for invisible buffers [GH-80]

@item 
Immediately display error messages after error navigation [GH-62]
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Never select deleted buffers

@item 
Do not let the debugger interfere with necessary cleanup actions

@item 
Do not attempt to parse empty XML trees [GH-78]

@item 
Fix infinite recursion on Windows [GH-81]
@end itemize
@end itemize

@node 0 6 1 Jan 30 2013,0 6 Jan 29 2013,0 7 Feb 14 2013,Changelog
@anchor{guide/releases/index jan-30-2013}@anchor{1ca}
@subsection 0.6.1 (Jan 30, 2013)



@itemize -

@item 
Fix package dependencies
@end itemize

@node 0 6 Jan 29 2013,0 5 Dec 28 2012,0 6 1 Jan 30 2013,Changelog
@anchor{guide/releases/index jan-29-2013}@anchor{1cb}
@subsection 0.6 (Jan 29, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
Emacs Lisp with @code{checkdoc-current-buffer} [GH-53]

@item 
PHP with PHP CodeSniffer [GH-72]
@end itemize

@item 
Removed syntax checkers:


@itemize -

@item 
Javascript with @code{jsl}
@end itemize

@item 
New features:


@itemize -

@item 
Error navigation with @code{next-error} and @code{previous-error} [GH-26]

@item 
Fringe icons instead of error indicators [GH-33]

@item 
Menu entry for Flycheck [GH-59]

@item 
Customizable error highlighting, taking the column number into account
[GH-35]

@item 
Configuration files for syntax checkers

@item 
Add configuration file support to the syntax checkers @code{coffee-coffeelint},
@code{html-tidy}, @code{javascript-jshint}, @code{pyton-flake8} and @code{tex-chktex}

@item 
Allow to compile a buffer with a syntax checker for testing purposes [GH-58]

@item 
Use multiple syntax checkers during a syntax check [GH-31]

@item 
Add dedicated help for syntax checkers [GH-52]
@end itemize

@item 
Improvements:


@itemize -

@item 
Match error patterns in order of declaration [GH-55]
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Inherit highlighting faces from built-in faces [GH-24]

@item 
Correct error patterns of the HTML syntax checker [GH-36]

@item 
Detect syntax errors in the @code{python-flake8} syntax checker [GH-42]

@item 
Fix various regressions after introducing unit tests

@item 
Inhibit syntax checking during package installation [GH-45]

@item 
Disable syntax checking in Tramp buffers [GH-54]

@item 
Preserve whitespace in error messages [GH-65]
@end itemize

@item 
API changes:


@itemize -

@item 
Replace syntax checker variables with syntax checker declarations [GH-41]

@item 
Support parsing errors with arbitrary functions instead of error patterns
[GH-38]

@item 
Add an error parser for Checkstyle-like XML output [GH-38]
@end itemize
@end itemize

@node 0 5 Dec 28 2012,0 4 Nov 21 2012,0 6 Jan 29 2013,Changelog
@anchor{guide/releases/index dec-28-2012}@anchor{1cc}
@subsection 0.5 (Dec 28, 2012)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
SASS [GH-15]

@item 
Perl [GH-21]

@item 
XML

@item 
Lua [GH-30]
@end itemize

@item 
New features:


@itemize -

@item 
Support manual buffer-local selection of syntax checker [GH-25]

@item 
Add customizable error indicators [GH-28]

@item 
Echo error messages at point without 3rd-party libraries like flymake-cursor
[GH-27]
@end itemize

@item 
Improvements:


@itemize -

@item 
Remember the last automatically selected syntax checker [GH-24]
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Fix syntax checking of buffers without backing files [GH-19]
@end itemize

@item 
API changes:


@itemize -

@item 
Replace underlying Flymake API with a custom syntax checking implementation
[GH-15]
@end itemize
@end itemize

@node 0 4 Nov 21 2012,0 3 Nov 21 2012,0 5 Dec 28 2012,Changelog
@anchor{guide/releases/index nov-21-2012}@anchor{1cd}@anchor{guide/releases/index flymake-cursor}@anchor{1ce}
@subsection 0.4 (Nov 21, 2012)



@itemize -

@item 
Rename the project to Flycheck [GH-5]

@item 
New syntax checkers


@itemize -

@item 
HAML [GH-9]

@item 
CSS [GH-9]

@item 
Javascript with @code{jsl} [GH-9]

@item 
Javascript with @code{jshint} [GH-16]

@item 
JSON [GH-12]

@item 
LaTeX with @code{lacheck}
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Fix type error when checking compressed Emacs Lisp [GH-10]
@end itemize
@end itemize

@node 0 3 Nov 21 2012,0 2 Oct 25 2012,0 4 Nov 21 2012,Changelog
@anchor{guide/releases/index id2}@anchor{1cf}
@subsection 0.3 (Nov 21, 2012)



@itemize -

@item 
Replace @code{flymake-mode} with a custom syntax checking minor mode [GH-4]
@end itemize

@node 0 2 Oct 25 2012,0 1 Oct 11 2012,0 3 Nov 21 2012,Changelog
@anchor{guide/releases/index oct-25-2012}@anchor{1d0}
@subsection 0.2 (Oct 25, 2012)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
PHP
@end itemize

@item 
API changes:


@itemize -

@item 
Simplify syntax checker declarations [GH-2]
@end itemize
@end itemize

@node 0 1 Oct 11 2012,,0 2 Oct 25 2012,Changelog
@anchor{guide/releases/index oct-11-2012}@anchor{1d1}
@subsection 0.1 (Oct 11, 2012)


Initial release as flymake-checkers


@itemize -

@item 
New syntax checkers:


@itemize -

@item 
TeX/LaTeX

@item 
Shell scripts

@item 
Python

@item 
Ruby

@item 
Coffeescript

@item 
Emacs Lisp
@end itemize
@end itemize

@node Extending Flycheck,Flycheck API,Flycheck releases,Top
@anchor{dev/extending doc}@anchor{1d2}@anchor{dev/extending extending-flycheck}@anchor{1d3}
@chapter Extending Flycheck


This chapter explains how to add new syntax checkers to Flycheck, and
provides examples for common use cases.

If you define a new syntax checker, @emph{please} contribute it to Flycheck to make
it available to other users, too.  See @ref{1d4,,Contributing syntax checkers} for
more information.

@menu
* Defining new syntax checkers:: 
* Registering new syntax checkers:: 
* Error levels: Error levels<2>. 
* Error parsers:: 
* Extending syntax checkers: Extending syntax checkers<2>. 
* Examples:: 

@end menu

@node Defining new syntax checkers,Registering new syntax checkers,,Extending Flycheck
@anchor{dev/extending defining-new-syntax-checkers}@anchor{a}@anchor{dev/extending id1}@anchor{1d5}
@section Defining new syntax checkers


You define new syntax checkers with @ref{19,,flycheck-define-checker}:

@geindex flycheck-define-checker; Emacs Lisp macro
@anchor{dev/extending el function flycheck-define-checker}@anchor{19}
@deffn {Macro} flycheck@w{-}define@w{-}checker symbol docstring &rest  properties

@format
Define SYMBOL as syntax checker with DOCSTRING and PROPERTIES.

DOCSTRING provides documentation for the new syntax checker.  Use
@ref{36,,`flycheck-describe-checker'} to view the documentation of a syntax
checker.

The following PROPERTIES constitute a syntax checker.  @code{`:command'}
is mandatory.  A syntax checker must also have either @code{`:modes'} or
@code{`:predicate'}, and either @code{`:error-patterns'} or @code{`:error-parser'}.
@code{`:next-checkers'} is entirely optional.

Signal an error at macro-expansion time if a mandatory property
is missing or if any property as an invalid value.

Any syntax checker defined with this macro is eligible for manual
syntax checker selection with @ref{22,,`flycheck-select-checker'}.  To make
the new syntax checker available for automatic selection, it must
be registered in @ref{5f,,`flycheck-checkers'}.

@code{:command (EXECUTABLE ARG ...)}
     An unquoted list describing the syntax checker command to
     execute.

     EXECUTABLE must be a string with the executable of this
     syntax checker.

     A variable @code{`flycheck-CHECKER-executable'} is implicitly
     defined to allow overriding of the executable.  The variable
     is customizable and buffer-local.  If this variable is
     non-nil, Flycheck uses the value of the variable as
     executable, otherwise it falls back to EXECUTABLE.  In
     either case, the executable is checked with
     @code{`executable-find'} before use.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     @ref{1d6,,`flycheck-substitute-argument'}, which see.

@code{:error-patterns ((LEVEL SEXP ...) ...)}
     An unquoted list of error patterns to parse the output of
     the syntax checker @code{`:command'}.

     LEVEL is either @code{`error'} or @code{`warning'} and denotes the
     severity of errors matched by the pattern.  The LEVEL is
     followed by one or more RX @code{`SEXP'}s which parse the error and
     extract line, column, file name and error message.

     See @code{`rx'} for general information about RX, and
     @ref{1d7,,`flycheck-rx-to-string'} for special RX forms provided by
     Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

@code{:error-parser FUNCTION}
@code{:error-parser (lambda (output checker buffer) BODY ...)}
     A function to parse errors with, either as unquoted symbol,
     or @code{`lambda'} form.

     The function must accept three arguments OUTPUT CHECKER
     BUFFER, where OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of @code{`flycheck-error'} objects parsed from
     OUTPUT.

@code{:error-filter FUNCTION}
@code{:error-filter (lambda (errors) BODY ...)}
     A function to filter or modify errors parsed by
     @code{`:error-parser'} or @code{`:error-patterns'}.

     The function takes the list of parsed @code{`flycheck-error'}
     objects as sole argument and shall return a list of
     @code{`flycheck-error'} as the result of the syntax checker.  The
     function is free to add or remove errors, or modify
     individual errors.  It may modify the list of errors as well
     as individual errors in place.

     Syntax checkers will mostly use this feature to fix
     misplaced error locations, or improve error messages.

@code{:modes MODE}
@code{:modes (MODE ...)}
     An unquoted major mode symbol or a list thereof.  If
     present, the syntax checker is only used if the major mode
     of the buffer to check is equal (as in @code{`eq'}) to any given
     MODE.

     If a @code{`:predicate'} is present, it is additionally used in
     each buffer of these MODEs.

@code{:predicate FUNCTION}
@code{:predicate (lambda () BODY ...)}
     A function to determine whether to use the syntax checker in
     the current buffer, either as unquoted function symbol or
     @code{`lambda'} form.  The syntax checker is only used if this
     function returns non-nil when called in the buffer to check.
     If @code{`:modes'} is given, the function is only called in
     matching modes.

@code{:next-checkers (ITEM ...)}
     An unquoted list defining the syntax checker to run after
     this syntax checker.

     Each ITEM is a cons cell @code{(LEVEL . CHECKER)}.  CHECKER is a
     syntax checker to run after this syntax checker.  LEVEL is
     an error level.  CHECKER will only be used if there are no
     current errors of at least LEVEL.  LEVEL may also be t, in
     which case CHECKER is used regardless of the current errors.

     ITEM may also be a syntax checker symbol, which is
     equivalent to @code{(t . ITEM)}.

     Flycheck tries all items in order of declaration, and uses
     the first whose LEVEL matches and whose CHECKER is
     registered and can be used for the current buffer.
@end format
@end deffn

@geindex flycheck-def-config-file-var; Emacs Lisp macro
@anchor{dev/extending el function flycheck-def-config-file-var}@anchor{1d8}
@deffn {Macro} flycheck@w{-}def@w{-}config@w{-}file@w{-}var symbol checker &optional  file-name &rest  custom-args

@format
Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable, buffer-local variable using
@code{`defcustom'}, to provide a configuration file for the given syntax
CHECKER.  CUSTOM-ARGS are forwarded to @code{`defcustom'}.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.

Use this together with the @code{`config-file'} form in the @code{`:command'}
argument to @ref{19,,`flycheck-define-checker'}.
@end format
@end deffn

@geindex flycheck-def-option-var; Emacs Lisp macro
@anchor{dev/extending el function flycheck-def-option-var}@anchor{1d9}
@deffn {Macro} flycheck@w{-}def@w{-}option@w{-}var symbol init-value checker docstring &rest  custom-args

@format
Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable, buffer-local
variable using @code{`defcustom'}, to provide an option for the given
syntax CHECKER.  INIT-VALUE is the initial value of the variable,
and DOCSTRING is its docstring.  CUSTOM-ARGS are forwarded to
@code{`defcustom'}.

Use this together with the @code{`option'}, @code{`option-list'} and
@code{`option-flag'} forms in the @code{`:command'} argument to
@ref{19,,`flycheck-define-checker'}.
@end format
@end deffn

@node Registering new syntax checkers,Error levels<2>,Defining new syntax checkers,Extending Flycheck
@anchor{dev/extending registering-new-syntax-checkers}@anchor{1da}@anchor{dev/extending id2}@anchor{1db}
@section Registering new syntax checkers


After a syntax checker was defined, it should be registered for automatic
selection, by adding it to @ref{5f,,flycheck-checkers}, e.g.

@example
(add-to-list 'flycheck-checkers 'my-new-syntax-checker)
@end example

@cartouche
@quotation Note 
@ref{21,,flycheck-checker} and @ref{22,,flycheck-select-checker} are
reserved for @strong{user customization}.  Do @strong{not} use them in Flycheck
extensions.

Specifically, please do @strong{not} provide a hook function which selects the
syntax checker explicitly by assigning to @ref{21,,flycheck-checker} or by
calling @ref{22,,flycheck-select-checker}, e.g.

@example
(defun enable-my-new-syntax-checker ()
  (setq flycheck-checker 'my-new-syntax-checker)
  (flycheck-buffer))

(add-hook 'my-major-mode-hook #'enable-my-new-syntax-checker)
@end example

This circumvents the entire automatic selection of Flycheck, and prevents the
user from effectively customizing Flycheck.
@end quotation
@end cartouche

@node Error levels<2>,Error parsers,Registering new syntax checkers,Extending Flycheck
@anchor{dev/extending id3}@anchor{1dc}@anchor{dev/extending error-levels}@anchor{1dd}
@section Error levels


Flycheck provides some built-in error levels:


@table @asis

@item @code{error}

Severe errors which cannot be ignored

@item @code{warning}

Potential errors which can be ignored

@item @code{info}

Informational annotations
@end table

You can define new error levels with @ref{25,,flycheck-define-error-level}.

@node Error parsers,Extending syntax checkers<2>,Error levels<2>,Extending Flycheck
@anchor{dev/extending error-parsers}@anchor{1de}@anchor{dev/extending id4}@anchor{1df}
@section Error parsers


Syntax checkers may use more sophisticated error parsing by given the
@code{:error-parser} argument to @ref{19,,flycheck-define-checker}.  See
@ref{1e0,,Builtin error parsers} for a list of builtin parsers.

You may also define your own error parsers.  An error parser is any function
that takes the following three arguments and returns a list of
@ref{1e1,,flycheck-error} objects (see @ref{78,,Error API} for more information):


@table @asis

@item @code{output}

The complete output of the syntax checker as string.

@item @code{checker}

A symbol denoting the executed syntax checker.

@item @code{buffer}

A buffer object referring to the buffer that was syntax-checked.
@end table

Flycheck provides some utility functions to implement your own error parsers.
See @ref{1e2,,Error parser API} for details.

@node Extending syntax checkers<2>,Examples,Error parsers,Extending Flycheck
@anchor{dev/extending id5}@anchor{1e3}@anchor{dev/extending extending-syntax-checkers}@anchor{1e4}
@section Extending syntax checkers


There are some means to extend defined syntax checkers:

@geindex flycheck-add-next-checker; Emacs Lisp function
@anchor{dev/extending el function flycheck-add-next-checker}@anchor{1e5}
@deffn {Function} flycheck@w{-}add@w{-}next@w{-}checker checker next &optional  append

@format
Add a NEXT checker after CHECKER.

CHECKER is a syntax checker symbol, to which to add NEXT checker.

NEXT is a cons cell @code{(LEVEL . NEXT-CHECKER)}.  NEXT-CHECKER is a
symbol denoting the syntax checker to run after CHECKER.  LEVEL
is an error level.  NEXT-CHECKER will only be used if there is no
current error whose level is more severe than LEVEL.  LEVEL may
also be t, in which case NEXT-CHECKER is used regardless of the
current errors.

NEXT can also be a syntax checker symbol only, which is
equivalent to @code{(t . NEXT)}.

NEXT-CHECKER is prepended before other next checkers, unless
APPEND is non-nil.
@end format
@end deffn

@geindex flycheck-add-mode; Emacs Lisp function
@anchor{dev/extending el function flycheck-add-mode}@anchor{168}
@deffn {Function} flycheck@w{-}add@w{-}mode checker mode

@format
Add a new major MODE to CHECKER.

CHECKER and MODE are symbols denoting a syntax checker and a
major mode respectively.

Add MODE to the @code{`:modes'} property of CHECKER, so that CHECKER
will be used in buffers with MODE.
@end format
@end deffn

@node Examples,,Extending syntax checkers<2>,Extending Flycheck
@anchor{dev/extending examples}@anchor{1e6}
@section Examples


@menu
* Basic syntax checkers:: 
* Syntax checkers with predicates:: 
* Configuration files for syntax checkers:: 
* Chaining syntax checkers:: 

@end menu

@node Basic syntax checkers,Syntax checkers with predicates,,Examples
@anchor{dev/extending id6}@anchor{1e7}@anchor{dev/extending basic-syntax-checkers}@anchor{1e8}
@subsection Basic syntax checkers


As explained in the previous chapter @ref{a,,Defining new syntax checkers}, a
syntax checker is declared with @ref{19,,flycheck-define-checker}.

We will use this function to define a syntax checker using the PHP CodeSniffer
utility for the PHP programming language:

@example
(flycheck-define-checker php-phpcs
  "A PHP syntax checker using PHP_CodeSniffer.

See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
  :command ("phpcs" "--report=checkstyle" source)
  :error-parser flycheck-parse-checkstyle
  :modes php-mode)

(add-to-list 'flycheck-checkers 'php-phpcs)
@end example

First we specify the @code{:command} to execute.  The first element of the command
list is the name of the executable, @code{phpcs} in our case.  This command is
checked for existence with @code{executable-find} before using this syntax checker.
If the command does not exist, the syntax checker is @emph{not} used.

The executable is following by the arguments, in this case some options and the
symbol @code{source}.  This symbol is replaced with the file to check.  This file is
a temporary file created in the system temporary directory and containing the
contents of the buffer to check.

Next we specify how to parse the output of the syntax checker.  PHP CodeSniffer
provides an option to output errors in an XML format similar to the Java tool
Checkstyle, so we use the built-in @emph{error parser}
@ref{1e9,,flycheck-parse-checkstyle} to parse the output.

Then we enable the syntax checker in PHP editing modes.

Ultimately, we make the new syntax checker available for automatic selection by
adding it to @ref{5f,,flycheck-checkers}.

If the syntax checker does not provide any sort of structured output format, we
have to parse the error messages from the textual output.  To do so, we can use
@emph{error patterns}, like in the Pylint syntax checker for the Python
programming language:

@example
(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

See URL `http://pypi.python.org/pypi/pylint'."
  :command ("epylint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line
            ": Warning (W" (zero-or-more not-newline) "): "
            (message) line-end)
   (error line-start (file-name) ":" line
          ": Error (E" (zero-or-more not-newline) "): "
          (message) line-end)
   (error line-start (file-name) ":" line ": [F] " (message) line-end))
  :modes python-mode)
@end example

Again, there is a @code{:command}, however we use the @code{source-inplace} symbol this
time.  This symbol causes the temporary file to be created in the same directory
as the original file, making information from the source code tree available to
the syntax checker.  In case of Pylint, these are the Python packages from the
source code tree.

Next we give the list of @code{:error-patterns} to parse errors.  These patterns
extract the error location and the error message from the output of @code{epylint}.
An error pattern is a list containing a regular expression with match groups to
extract the error information, and an error level.

Eventually we enable the syntax checker in @code{python-mode}.

@node Syntax checkers with predicates,Configuration files for syntax checkers,Basic syntax checkers,Examples
@anchor{dev/extending syntax-checkers-with-predicates}@anchor{1ea}
@subsection Syntax checkers with predicates


In the previous examples the syntax checkers were specific to certain major
modes.  However, this is not always the case.  For instance, GNU Emacs provides
a single mode only for shell scripting in various Shell languages.  A syntax
checker for a specific shell must check whether the edited shell script is
written for the right shell:

@example
(flycheck-define-checker zsh
  "A Zsh syntax checker using the Zsh shell.

See URL `http://www.zsh.org/'."
  :command ("zsh" "-n" "-d" "-f" source)
  :error-patterns
  ((error line-start (file-name) ":" line ": " (message) line-end))
  :modes sh-mode
  :predicate (lambda () (eq sh-shell 'zsh)))
@end example

This syntax checker for the Zsh shell is enabled in @code{sh-mode} as specified by
@code{:modes}, however it specifies an additional @code{:predicate} to determine whether
the right shell is in use.  Hence this syntax checker is only used if a Zsh
shell scripting is being edited in @code{sh-mode}, but not if a Bash or POSIX Shell
script is being edited.

A syntax checker may even go as far as not having @code{:modes} at all.  For
instance, there is no special JSON mode, but syntax checking JSON is still
desirable.  Hence a JSON syntax checker may use the @code{:predicate} to check the
file extension:

@example
(flycheck-define-checker json-jsonlint
  "A JSON syntax and style checker using jsonlint.

See URL `https://github.com/zaach/jsonlint'."
  :command ("jsonlint" "-c" "-q" source)
  :error-patterns
  ((error line-start
          (file-name)
          ": line " line
          ", col " column ", "
          (message) line-end))
  :predicate
  (lambda ()
    (or
     (eq major-mode 'json-mode)
     (and buffer-file-name
          (string= "json" (file-name-extension buffer-file-name))))))
@end example

This syntax checker is now used whenever a file ends with @code{.json}, regardless of
the major mode.

@node Configuration files for syntax checkers,Chaining syntax checkers,Syntax checkers with predicates,Examples
@anchor{dev/extending configuration-files-for-syntax-checkers}@anchor{1eb}
@subsection Configuration files for syntax checkers


Some syntax checkers can be configured using configuration files given
by an option.  Flycheck provides built-in support to handle such
configuration files:

@example
(flycheck-def-config-file-var flycheck-jshintrc javascript-jshint ".jshintrc")

(flycheck-define-checker javascript-jshint
  "A JavaScript syntax and style checker using jshint.

See URL `http://www.jshint.com'."
  :command ("jshint" "--checkstyle-reporter"
            (config-file "--config" flycheck-jshintrc) source)
  :error-parser flycheck-parse-checkstyle
  :modes (js-mode js2-mode js3-mode))
@end example

As you can see, we define a syntax checker for Javascript, using the @code{jshint}
utility.  This utility accepts a configuration file via the @code{--config} option.

To use a configuration file with jshint, we first declare the variable
@code{flycheck-jshintrc} that provides the name of the file, as explained in
@ref{6b,,Syntax checker configuration files}.

In the @code{:command} we use a @code{config-file} form to pass the configuration file to
the syntax checker.  If the configuration file is found, its path will be passed
to the syntax checker, using the option specified after the @code{config-file}
symbol.  Otherwise the whole element is simply omitted from the command line.

Some Syntax checkers can also be configured using options passed on the command
line.  Flycheck supports this case, too.  We will use this facility to extend
the PHP CodeSniffer syntax checker from the @ref{1e8,,Basic syntax checkers} section
with support for coding standards:

@example
(flycheck-def-option-var flycheck-phpcs-standard nil phpcs
  "The coding standard for PHP CodeSniffer."
  :type '(choice (const :tag "Default standard" nil)
                 (string :tag "Standard name" nil)))
(put 'flycheck-phpcs-standard 'safe-local-variable #'stringp)

(flycheck-declare-checker php-phpcs
  "A PHP syntax checker using PHP_CodeSniffer."
  :command '("phpcs" "--report=checkstyle"
             (option "--standard=" flycheck-phpcs-standard concat)
             source)
  :error-parser 'flycheck-parse-checkstyle
  :modes 'php-mode)
@end example

The syntax checker is pretty much the same as before, except that a new element
was added to @code{:command}.  This element passes the value of the new option
variable @ref{10d,,flycheck-phpcs-standard} to the syntax checker.  This variable
is declared with the special macro @ref{1d9,,flycheck-def-option-var} at the
beginning.

@node Chaining syntax checkers,,Configuration files for syntax checkers,Examples
@anchor{dev/extending chaining-syntax-checkers}@anchor{1ec}
@subsection Chaining syntax checkers


For many languages, more than a single syntax checker is applicable.  For
instance, Emacs Lisp can be checked for syntactic corrections with the byte code
compiler, and for adherence to the Emacs Lisp documentation style using
Checkdoc.  PHP, too, can be syntax checked with the PHP parser, and verified
against coding styles using PHP CodeSniffer.

To support such cases, syntax checkers can be @ref{57,,chained} using
the @code{:next-checkers}.  The standard PHP syntax checker uses this to run PHP
CodeSniffer if there are no syntax errors:

@example
(flycheck-define-checker php
  "A PHP syntax checker using the PHP command line interpreter.

See URL `http://php.net/manual/en/features.commandline.php'."
  :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
            "-d" "log_errors=0" source)
  :error-patterns
  ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
          (message) " in " (file-name) " on line " line line-end))
  :modes (php-mode php+-mode)
  :next-checkers ((warning . php-phpcs)))
@end example

Now PHP CodeSniffer will check the coding style, but only if PHP CodeSniffer is
a @ref{61,,registered syntax checker}, and if @code{php} only emitted errors with
@code{warning} level or less, that is, no errors.

@node Flycheck API,Contribution guidelines,Extending Flycheck,Top
@anchor{dev/api doc}@anchor{1ed}@anchor{dev/api flycheck-api}@anchor{1ee}
@chapter Flycheck API


This chapter provides a brief overview over the Flycheck API.

You may use this API to extend Flycheck, e.g. by implementing new error parsers
or more in-depth error analysis.  You will also find this API helpful if you
want to develop Flycheck itself.

@menu
* Status API:: 
* Error API:: 
* Error Analysis:: 
* Builtin error parsers:: 
* Error parser API:: 
* Error filters:: 
* Syntax checker API:: 
* Builtin option filters:: 
* Builtin syntax checker predicates:: 
* Utilities:: 

@end menu

@node Status API,Error API,,Flycheck API
@anchor{dev/api id1}@anchor{1ef}@anchor{dev/api status-api}@anchor{1f0}
@section Status API


@geindex flycheck-report-status; Emacs Lisp function
@anchor{dev/api el function flycheck-report-status}@anchor{5a}
@deffn {Function} flycheck@w{-}report@w{-}status status

@format
Report Flycheck STATUS.

STATUS is one of the following symbols:

@code{`not-checked'}
     The current buffer was not checked.

@code{`no-checker'}
     Automatic syntax checker selection did not find a suitable
     syntax checker.

@code{`running'}
     A syntax check is now running in the current buffer.

@code{`errored'}
     The current syntax check has errored.

@code{`finished'}
     The current syntax check was finished normally.

@code{`interrupted'}
     The current syntax check was interrupted.

@code{`suspicious'}
     The last syntax check had a suspicious result.

Set @ref{94,,`flycheck-last-status-change'} and call
@ref{59,,`flycheck-status-changed-functions'} with STATUS.  Afterwards
refresh the mode line.
@end format
@end deffn

@geindex flycheck-report-error; Emacs Lisp function
@anchor{dev/api el function flycheck-report-error}@anchor{1f1}
@deffn {Function} flycheck@w{-}report@w{-}error 

@format
Report a Flycheck error status.

Clears all Flycheck errors first, runs
@ref{5c,,`flycheck-syntax-check-failed-hook'} and reports the status with
@ref{5a,,`flycheck-report-status'}.
@end format
@end deffn

@geindex flycheck-last-status-change; Emacs Lisp variable
@anchor{dev/api el variable flycheck-last-status-change}@anchor{94}
@deffn {Variable} flycheck@w{-}last@w{-}status@w{-}change

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  
@end quotation
@end cartouche

@format
The last status change in the current buffer.
@end format
@end deffn

@geindex flycheck-mode-line-status-text; Emacs Lisp function
@anchor{dev/api el function flycheck-mode-line-status-text}@anchor{93}
@deffn {Function} flycheck@w{-}mode@w{-}line@w{-}status@w{-}text  &optional status

@format
Get a text describing STATUS for use in the mode line.

STATUS defaults to @ref{94,,`flycheck-last-status-change'} if omitted or
nil.
@end format
@end deffn

@node Error API,Error Analysis,Status API,Flycheck API
@anchor{dev/api error-api}@anchor{78}@anchor{dev/api id2}@anchor{1f2}
@section Error API


Flycheck errors are represented by the CL structure @ref{1e1,,flycheck-error}.
See @ref{Structures,,,cl} for more information about CL structures.

@geindex flycheck-error; Emacs Lisp CL struct
@anchor{dev/api el struct flycheck-error}@anchor{1e1}
@deffn {CL Struct} flycheck@w{-}error

A Flycheck error with the following slots.  Each of these slots may be @code{nil}.

@geindex flycheck-error-buffer; Emacs Lisp slot
@anchor{dev/api el function flycheck-error-buffer}@anchor{1f3}
@deffn {Slot} buffer

The buffer object referring to the buffer this error belongs to.

@cartouche
@quotation Note 
You do not need to set this attribute when creating errors in an error
parser.  Flycheck automatically keeps track of the buffer itself.
@end quotation
@end cartouche
@end deffn

@geindex flycheck-error-checker; Emacs Lisp slot
@anchor{dev/api el function flycheck-error-checker}@anchor{1f4}
@deffn {Slot} checker

The syntax checker that reported this error.
@end deffn

@geindex flycheck-error-filename; Emacs Lisp slot
@anchor{dev/api el function flycheck-error-filename}@anchor{1f5}
@deffn {Slot} filename

A string containing the filename the error refers to.
@end deffn

@geindex flycheck-error-line; Emacs Lisp slot
@anchor{dev/api el function flycheck-error-line}@anchor{1f6}
@deffn {Slot} line

An integer providing the line the error refers to.
@end deffn

@geindex flycheck-error-column; Emacs Lisp slot
@anchor{dev/api el function flycheck-error-column}@anchor{1f7}
@deffn {Slot} column

An integer providing the column the error refers to.

If this attribute is @code{nil}, Flycheck will assume that the error refers to
the whole line.
@end deffn

@geindex flycheck-error-message; Emacs Lisp slot
@anchor{dev/api el function flycheck-error-message}@anchor{1f8}
@deffn {Slot} message

The human-readable error message as string.
@end deffn

@geindex flycheck-error-level; Emacs Lisp slot
@anchor{dev/api el function flycheck-error-level}@anchor{1f9}
@deffn {Slot} level

The error level of the message, as symbol denoting an error level defined
with @ref{25,,flycheck-define-error-level}.
@end deffn

There are two constructors to create new @ref{1e1,,flycheck-error} objects:

@geindex flycheck-error-new-at; Emacs Lisp function
@anchor{dev/api el function flycheck-error-new-at}@anchor{1fa}
@deffn {Function} flycheck@w{-}error@w{-}new@w{-}at line column &optional  level message &key                checker filename buffer

Create a new Flycheck error at the given @var{line} and @var{column}.

@var{line} and @var{column} refer to the @ref{1f6,,line} and
@ref{1f7,,column} of the new error.  The optional @var{level} and
@var{message} arguments fill the @ref{1f9,,level} and cl-slot:@code{message}
slots respectively.

@var{checker}, @var{filename} and @var{buffer} are keyword arguments,
for @ref{1f4,,checker}, @ref{1f5,,filename} and @ref{1f3,,buffer}
respectively.  @var{buffer} defaults to the current buffer, the other two
default to @code{nil}.

@cartouche
@quotation Warning 
Due to a limitation of Common Lisp functions in Emacs Lisp, you must
specify @strong{all} optional arguments, that is, @strong{both} @var{level}
@strong{and} @var{message}, to pass any keyword arguments.
@end quotation
@end cartouche
@end deffn

@geindex flycheck-error-new; Emacs Lisp function
@anchor{dev/api el function flycheck-error-new}@anchor{1fb}
@deffn {Function} flycheck@w{-}error@w{-}new  &rest attributes

Create a new @ref{1e1,,flycheck-error} with the given @var{attributes}.

@var{attributes} is a property list, where each property specifies the
value for the corresponding slot of @ref{1e1,,flycheck-error}, for
instance:

@example
(flycheck-error-new :line 10 :column 5 :message "Foo" :level 'warning)
@end example
@end deffn

The following functions and macros work on errors:

@geindex flycheck-error-with-buffer; Emacs Lisp macro
@anchor{dev/api el function flycheck-error-with-buffer}@anchor{1fc}
@deffn {Macro} flycheck@w{-}error@w{-}with@w{-}buffer err &rest  forms

@format
Switch to the buffer of ERR and evaluate FORMS.

If the buffer of ERR is not live, FORMS are not evaluated.
@end format
@end deffn

@geindex flycheck-error-line-region; Emacs Lisp function
@anchor{dev/api el function flycheck-error-line-region}@anchor{1fd}
@deffn {Function} flycheck@w{-}error@w{-}line@w{-}region err

@format
Get the line region of ERR.

ERR is a Flycheck error whose region to get.

Return a cons cell @code{(BEG . END)} where BEG is the first
non-whitespace character on the line ERR refers to, and END the
end of the line.
@end format
@end deffn

@geindex flycheck-error-column-region; Emacs Lisp function
@anchor{dev/api el function flycheck-error-column-region}@anchor{1fe}
@deffn {Function} flycheck@w{-}error@w{-}column@w{-}region err

@format
Get the error column region of ERR.

ERR is a Flycheck error whose region to get.

Return a cons cell @code{(BEG . END)} where BEG is the character
before the error column, and END the actual error column, or nil
if ERR has no column.
@end format
@end deffn

@geindex flycheck-error-thing-region; Emacs Lisp function
@anchor{dev/api el function flycheck-error-thing-region}@anchor{1ff}
@deffn {Function} flycheck@w{-}error@w{-}thing@w{-}region thing err

@format
Get the region of THING at the column of ERR.

ERR is a Flycheck error whose region to get.  THING is a
understood by @code{`thing-at-point'}.

Return a cons cell @code{(BEG . END)} where BEG is the beginning of
the THING at the error column, and END the end of the symbol.  If
ERR has no error column, or if there is no THING at this column,
return nil.
@end format
@end deffn

@geindex flycheck-error-pos; Emacs Lisp function
@anchor{dev/api el function flycheck-error-pos}@anchor{200}
@deffn {Function} flycheck@w{-}error@w{-}pos err

@format
Get the buffer position of ERR.

ERR is a Flycheck error whose position to get.

The error position is the error column, or the first
non-whitespace character of the error line, if ERR has no error column.
@end format
@end deffn

@geindex flycheck-error-format; Emacs Lisp function
@anchor{dev/api el function flycheck-error-format}@anchor{201}
@deffn {Function} flycheck@w{-}error@w{-}format err

@format
Format ERR as human-readable string.

Return a string that represents the given ERR.  This string does
_not_ include the file name.
@end format
@end deffn

@geindex flycheck-error-<; Emacs Lisp function
@anchor{dev/api el function flycheck-error-<}@anchor{202}
@deffn {Function} flycheck@w{-}error@w{-}< err1 err2

@format
Determine whether ERR1 goes before ERR2 by location.

Compare by line numbers and then by column numbers.
@end format
@end deffn

@geindex flycheck-error-level-<; Emacs Lisp function
@anchor{dev/api el function flycheck-error-level-<}@anchor{203}
@deffn {Function} flycheck@w{-}error@w{-}level@w{-}< err1 err2

@format
Determine whether ERR1 goes before ERR2 by error level.

Like @ref{202,,`flycheck-error-<'}, but compares by error level severity
first.  Levels of the same severity are compared by name.
@end format
@end deffn
@end deffn

@node Error Analysis,Builtin error parsers,Error API,Flycheck API
@anchor{dev/api error-analysis}@anchor{204}
@section Error Analysis


The following functions and variables may be used to analyze the errors of a
syntax check.

@geindex flycheck-current-errors; Emacs Lisp variable
@anchor{dev/api el variable flycheck-current-errors}@anchor{5b}
@deffn {Variable} flycheck@w{-}current@w{-}errors

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  
@end quotation
@end cartouche

@format
A list of all errors and warnings in the current buffer.
@end format
@end deffn

@geindex flycheck-count-errors; Emacs Lisp function
@anchor{dev/api el function flycheck-count-errors}@anchor{95}
@deffn {Function} flycheck@w{-}count@w{-}errors errors

@format
Count the number of ERRORS, grouped by level..

Return an alist, where each ITEM is a cons cell whose @code{`car'} is an
error level, and whose @code{`cdr'} is the number of errors of that
level.
@end format
@end deffn

@geindex flycheck-has-errors-p; Emacs Lisp function
@anchor{dev/api el function flycheck-has-errors-p}@anchor{205}
@deffn {Function} flycheck@w{-}has@w{-}errors@w{-}p errors level

@format
Determine if there are any ERRORS with LEVEL.
@end format
@end deffn

@geindex flycheck-has-max-errors-p; Emacs Lisp function
@anchor{dev/api el function flycheck-has-max-errors-p}@anchor{206}
@deffn {Function} flycheck@w{-}has@w{-}max@w{-}errors@w{-}p errors level

@format
Check if there is no error in ERRORS more severe than LEVEL.
@end format
@end deffn

@node Builtin error parsers,Error parser API,Error Analysis,Flycheck API
@anchor{dev/api id3}@anchor{207}@anchor{dev/api builtin-error-parsers}@anchor{1e0}
@section Builtin error parsers


@geindex flycheck-parse-with-patterns; Emacs Lisp function
@anchor{dev/api el function flycheck-parse-with-patterns}@anchor{208}
@deffn {Function} flycheck@w{-}parse@w{-}with@w{-}patterns output checker _buffer

@format
Parse OUTPUT from CHECKER with error patterns.

Uses the error patterns of CHECKER to tokenize the output and
tries to parse each error token with all patterns, in the order
of declaration.  Hence an error is never matched twice by two
different patterns.  The pattern declared first always wins.

_BUFFER is ignored.

Return a list of parsed errors and warnings (as @code{`flycheck-error'}
objects).
@end format
@end deffn

@geindex flycheck-parse-checkstyle; Emacs Lisp function
@anchor{dev/api el function flycheck-parse-checkstyle}@anchor{1e9}
@deffn {Function} flycheck@w{-}parse@w{-}checkstyle output _checker _buffer

@format
Parse Checkstyle errors from OUTPUT.

Parse Checkstyle-like XML output.  Use this error parser for
checkers that have an option to output errors in this format.

_CHECKER and _BUFFER are ignored.

See URL `http://checkstyle.sourceforge.net/'@footnote{http://checkstyle.sourceforge.net/} for information
about Checkstyle.
@end format
@end deffn

@node Error parser API,Error filters,Builtin error parsers,Flycheck API
@anchor{dev/api error-parser-api}@anchor{1e2}@anchor{dev/api id4}@anchor{209}
@section Error parser API


These functions can be used to implement custom error parsers:

@geindex flycheck-parse-xml-string; Emacs Lisp function
@anchor{dev/api el function flycheck-parse-xml-string}@anchor{20a}
@deffn {Function} flycheck@w{-}parse@w{-}xml@w{-}string xml

@format
Parse an XML string.

Return the document tree parsed from XML in the form @code{(ROOT ATTRS
BODY...)}.  ROOT is a symbol identifying the name of the root
element.  ATTRS is an alist of the attributes of the root node.
BODY is zero or more body elements, either as strings (in case of
text nodes) or as XML nodes, in the same for as the root node.
@end format
@end deffn

@node Error filters,Syntax checker API,Error parser API,Flycheck API
@anchor{dev/api error-filters}@anchor{20b}@anchor{dev/api builtin-error-filters}@anchor{20c}
@section Error filters


@geindex flycheck-sanitize-errors; Emacs Lisp function
@anchor{dev/api el function flycheck-sanitize-errors}@anchor{20d}
@deffn {Function} flycheck@w{-}sanitize@w{-}errors errors

@format
Sanitize ERRORS.

Sanitize ERRORS by trimming leading and trailing whitespace in
all error messages, and by replacing 0 columns and empty error
messages with nil.

Returns sanitized ERRORS.
@end format
@end deffn

@geindex flycheck-collapse-error-message-whitespace; Emacs Lisp function
@anchor{dev/api el function flycheck-collapse-error-message-whitespace}@anchor{20e}
@deffn {Function} flycheck@w{-}collapse@w{-}error@w{-}message@w{-}whitespace errors

@format
Collapse whitespace in all messages of ERRORS.

Return ERRORS.
@end format
@end deffn

@geindex flycheck-fold-include-errors; Emacs Lisp function
@anchor{dev/api el function flycheck-fold-include-errors}@anchor{20f}
@deffn {Function} flycheck@w{-}fold@w{-}include@w{-}errors 
@end deffn

@node Syntax checker API,Builtin option filters,Error filters,Flycheck API
@anchor{dev/api syntax-checker-api}@anchor{210}@anchor{dev/api id5}@anchor{211}
@section Syntax checker API


@geindex flycheck-registered-checker-p; Emacs Lisp function
@anchor{dev/api el function flycheck-registered-checker-p}@anchor{65}
@deffn {Function} flycheck@w{-}registered@w{-}checker@w{-}p checker

@format
Determine whether CHECKER is registered.

A checker is registered if it is contained in
@ref{5f,,`flycheck-checkers'}.
@end format
@end deffn

@geindex flycheck-substitute-argument; Emacs Lisp function
@anchor{dev/api el function flycheck-substitute-argument}@anchor{1d6}
@deffn {Function} flycheck@w{-}substitute@w{-}argument arg checker

@format
Substitute ARG for CHECKER.

Return a list of real arguments for the executable of CHECKER,
substituted for the symbolic argument ARG.  Single arguments,
e.g. if ARG is a literal strings, are wrapped in a list.

ARG may be one of the following forms:

STRING
     Return ARG unchanged.

@code{`source'}, @code{`source-inplace'}
     Create a temporary file to check and return its path.  With
     @code{`source-inplace'} create the temporary file in the same
     directory as the original file.  The value of
     @ref{5d,,`flycheck-temp-prefix'} is used as prefix of the file name.

     With @code{`source'}, try to retain the non-directory component of
     the buffer's file name in the temporary file.

     @code{`source'} is the preferred way to pass the input file to a
     syntax checker.  @code{`source-inplace'} should only be used if the
     syntax checker needs other files from the source directory,
     such as include files in C.

@code{`source-original'}
     Return the path of the actual file to check, or an empty
     string if the buffer has no file name.

     Note that the contents of the file may not be up to date
     with the contents of the buffer to check.  Do not use this
     as primary input to a checker, unless absolutely necessary.

     When using this symbol as primary input to the syntax
     checker, add @ref{212,,`flycheck-buffer-saved-p'} to the @code{`:predicate'}.

@code{`temporary-directory'}
     Create a unique temporary directory and return its path.

@code{`temporary-file-name'}
     Return a unique temporary filename.  The file is *not*
     created.

     To ignore the output of syntax checkers, try @code{`null-device'}
     first.

@code{`null-device'}
     Return the value of @code{`null-device'}, i.e the system null
     device.

     Use this option to ignore the output of a syntax checker.
     If the syntax checker cannot handle the null device, or
     won't write to an existing file, try @code{`temporary-file-name'}
     instead.

@code{(config-file OPTION VARIABLE [PREPEND-FN])}
     Search the configuration file bound to VARIABLE with
     @ref{213,,`flycheck-locate-config-file'} and return a list of arguments
     that pass this configuration file to the syntax checker, or
     nil if the configuration file was not found.

     PREPEND-FN is called with the OPTION and the located
     configuration file, and should return OPTION prepended
     before the file, either a string or as list.  If omitted,
     PREPEND-FN defaults to @code{`list'}.

@code{(option OPTION VARIABLE [PREPEND-FN [FILTER]])}
     Retrieve the value of VARIABLE and return a list of
     arguments that pass this value as value for OPTION to the
     syntax checker.

     PREPEND-FN is called with the OPTION and the value of
     VARIABLE, and should return OPTION prepended before the
     file, either a string or as list.  If omitted, PREPEND-FN
     defaults to @code{`list'}.

     FILTER is an optional function to be applied to the value of
     VARIABLE before prepending.  This function must return nil
     or a string.  In the former case, return nil.  In the latter
     case, return a list of arguments as described above.

@code{(option-list OPTION VARIABLE [PREPEND-FN [FILTER]])}
     Retrieve the value of VARIABLE, which must be a list,
     and prepend OPTION before each item in this list, using
     PREPEND-FN.

     PREPEND-FN is called with the OPTION and each item of the
     list as second argument, and should return OPTION prepended
     before the item, either as string or as list.  If omitted,
     PREPEND-FN defaults to @code{`list'}.

     FILTER is an optional function to be applied to each item in
     the list before prepending OPTION.  It shall return the
     option value for each item as string, or nil, if the item is
     to be ignored.

@code{(option-flag OPTION VARIABLE)}
     Retrieve the value of VARIABLE and return OPTION, if the
     value is non-nil.  Otherwise return nil.

@code{(eval FORM)}
     Return the result of evaluating FORM in the buffer to be
     checked.  FORM must either return a string or a list of
     strings, or nil to indicate that nothing should be
     substituted for CELL.  For all other return types, signal an
     error

     _No_ further substitutions are performed, neither in FORM
     before it is evaluated, nor in the result of evaluating
     FORM.

In all other cases, signal an error.

Note that substitution is *not* recursive.  No symbols or cells
are substituted within the body of cells!
@end format
@end deffn

@geindex flycheck-locate-config-file; Emacs Lisp function
@anchor{dev/api el function flycheck-locate-config-file}@anchor{213}
@deffn {Function} flycheck@w{-}locate@w{-}config@w{-}file filename checker

@format
Locate the configuration file FILENAME for CHECKER.

Locate the configuration file using
@ref{6d,,`flycheck-locate-config-file-functions'}.

Return the absolute path of the configuration file, or nil if no
configuration file was found.
@end format
@end deffn

@geindex flycheck-define-error-level; Emacs Lisp function
@anchor{dev/api el function flycheck-define-error-level}@anchor{25}
@deffn {Function} flycheck@w{-}define@w{-}error@w{-}level level &rest  properties

@format
Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

@code{:severity SEVERITY}
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0.

     The severity is used by @ref{203,,`flycheck-error-level-<'} to
     determine the ordering of errors according to their levels.

@code{:overlay-category CATEGORY}
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node @ref{Overlay Properties,,,elisp} for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the @code{`face'} property, for error highlighting.  Other useful
     properties for error level categories are @code{`priority'} to
     influence the stacking of multiple error level overlays, and
     @code{`help-echo'} to define a default error messages for errors
     without messages.

@code{:fringe-bitmap BITMAP}
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level.  See Info node @ref{Fringe Bitmaps,,,elisp} for more information about fringe bitmaps,
     including a list of built-in fringe bitmaps.

@code{:fringe-face FACE}
     A face symbol denoting the face to use for fringe indicators
     for this level.

@code{:error-list-face FACE}
     A face symbol denoting the face to use for messages of this
     level in the error list.  See @ref{47,,`flycheck-list-errors'}.
@end format
@end deffn

@node Builtin option filters,Builtin syntax checker predicates,Syntax checker API,Flycheck API
@anchor{dev/api id6}@anchor{214}@anchor{dev/api builtin-option-filters}@anchor{215}
@section Builtin option filters


@geindex flycheck-option-int; Emacs Lisp function
@anchor{dev/api el function flycheck-option-int}@anchor{216}
@deffn {Function} flycheck@w{-}option@w{-}int value

@format
Convert an integral option VALUE to a string.

If VALUE is nil, return nil.  Otherwise return VALUE converted to
a string.
@end format
@end deffn

@geindex flycheck-option-comma-separated-list; Emacs Lisp function
@anchor{dev/api el function flycheck-option-comma-separated-list}@anchor{217}
@deffn {Function} flycheck@w{-}option@w{-}comma@w{-}separated@w{-}list value &optional  separator filter

@format
Convert VALUE into a list separated by SEPARATOR.

SEPARATOR is a string to separate items in VALUE, defaulting to
",".  FILTER is an optional function, which takes a single
argument and returns either a string or nil.

If VALUE is a list, apply FILTER to each item in VALUE, remove
all nil items, and return a single string of all remaining items
separated by SEPARATOR.

Otherwise, apply FILTER to VALUE and return the result.
SEPARATOR is ignored in this case.
@end format
@end deffn

@node Builtin syntax checker predicates,Utilities,Builtin option filters,Flycheck API
@anchor{dev/api builtin-syntax-checker-predicates}@anchor{218}
@section Builtin syntax checker predicates


@geindex flycheck-buffer-saved-p; Emacs Lisp function
@anchor{dev/api el function flycheck-buffer-saved-p}@anchor{212}
@deffn {Function} flycheck@w{-}buffer@w{-}saved@w{-}p  &optional buffer

@format
Determine whether BUFFER is saved to a file.

BUFFER is the buffer to check.  If omitted or nil, use the
current buffer as BUFFER.

Return non-nil if the BUFFER is backed by a file, and not
modified, or nil otherwise.
@end format
@end deffn

@node Utilities,,Builtin syntax checker predicates,Flycheck API
@anchor{dev/api utilities}@anchor{219}
@section Utilities


@geindex flycheck-rx-to-string; Emacs Lisp function
@anchor{dev/api el function flycheck-rx-to-string}@anchor{1d7}
@deffn {Function} flycheck@w{-}rx@w{-}to@w{-}string form &optional  no-group

@format
Like @code{`rx-to-string'} for FORM, but with special keywords:

@code{`line'}
     matches the line number.

@code{`column'}
     matches the column number.

@code{(file-name SEXP ...)}
     matches the file name.  SEXP constitutes the body of the message.  If no
     SEXP is given, use a default body  of @code{(minimal-match
     (one-or-more not-newline))}.

@code{(message SEXP ...)}
     matches the message. SEXP constitutes the body of the message.  If no SEXP
     is given, use a default body of @code{(one-or-more not-newline)}.

NO-GROUP is passed to @code{`rx-to-string'}.
@end format
@end deffn

@geindex flycheck-string-list-p; Emacs Lisp function
@anchor{dev/api el function flycheck-string-list-p}@anchor{9b}
@deffn {Function} flycheck@w{-}string@w{-}list@w{-}p obj

@format
Determine if OBJ is a list of strings.
@end format
@end deffn

@geindex flycheck-symbol-list-p; Emacs Lisp function
@anchor{dev/api el function flycheck-symbol-list-p}@anchor{62}
@deffn {Function} flycheck@w{-}symbol@w{-}list@w{-}p obj

@format
Determine if OBJ is a list of symbols.
@end format
@end deffn

@node Contribution guidelines,Testing Flycheck,Flycheck API,Top
@anchor{contrib/guidelines doc}@anchor{21a}@anchor{contrib/guidelines contribution-guidelines}@anchor{21b}
@chapter Contribution guidelines


If you discovered bugs and issues, have ideas for improvements or new features,
or want to contribute a new syntax checker, please report to the issue tracker@footnote{https://github.com/flycheck/flycheck/issues} the repository and send a pull request, but respect the following
guidelines.

@menu
* Reporting issues:: 
* Contributing code:: 

@end menu

@node Reporting issues,Contributing code,,Contribution guidelines
@anchor{contrib/guidelines id1}@anchor{21c}@anchor{contrib/guidelines reporting-issues}@anchor{91}
@section Reporting issues



@itemize -

@item 
Check that the issue has not already been reported.

@item 
Check that the issue has not already been fixed in the latest code.

@item 
Be clear and precise (do not prose, but name functions and commands exactly).

@item 
Include the version of Flycheck as shown by @code{M-x flycheck-version}.

@item 
Open an issue with a clear title and description in grammatically correct,
complete sentences.
@end itemize

@node Contributing code,,Reporting issues,Contribution guidelines
@anchor{contrib/guidelines id2}@anchor{21d}@anchor{contrib/guidelines contributing-code}@anchor{21e}
@section Contributing code


Contributions of code, either as pull requests or as patches, are @emph{very}
welcome, but please respect the following guidelines.

@menu
* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 

@end menu

@node General,Code style,,Contributing code
@anchor{contrib/guidelines general}@anchor{21f}
@subsection General



@itemize -

@item 
Write good and @emph{complete} code.

@item 
Provide use cases and rationale for new features.
@end itemize

@node Code style,Commit messages,General,Contributing code
@anchor{contrib/guidelines code-style}@anchor{220}
@subsection Code style



@itemize -

@item 
Generally, use the same coding style and spacing.

@item 
Do not use tabs for indentation.

@item 
Add docstrings for every declaration.

@item 
Make sure your code compiles without warnings with @code{make compile}, and has no
checkdoc issues with @code{M-x checkdoc-buffer} or @code{C-c ? d}.  If you are using
Flycheck, just make sure that your code has no Flycheck warnings.
@end itemize

@node Commit messages,Contributing syntax checkers,Code style,Contributing code
@anchor{contrib/guidelines commit-messages}@anchor{221}
@subsection Commit messages


Write commit messages according to Tim Pope's guidelines@footnote{http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html}. In short:


@itemize -

@item 
Start with a capitalized, short (50 characters or less) summary, followed by a
blank line.

@item 
If necessary, add one or more paragraphs with details, wrapped at 72
characters.

@item 
Use present tense and write in the imperative: “Fix bug”, not “fixed bug” or
“fixes bug”.

@item 
Separate paragraphs by blank lines.

@item 
Do @emph{not} use special markup (e.g. Markdown).  Commit messages are plain text.
You may use @code{*emphasis*} or @code{_underline_} though, following conventions
established on mailing lists.
@end itemize

This is a model commit message:

@example
Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
or "Fixes bug."  This convention matches up with commit messages generated
by commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent
@end example

Git Commit Mode@footnote{https://github.com/magit/git-modes/} and Magit@footnote{https://github.com/magit/magit/} provide a major mode for Git commit messages,
which helps you to comply to these guidelines.

@node Contributing syntax checkers,Pull requests,Commit messages,Contributing code
@anchor{contrib/guidelines contributing-syntax-checkers}@anchor{1d4}@anchor{contrib/guidelines id3}@anchor{222}
@subsection Contributing syntax checkers


For syntax checkers, some special guidelines apply in addition to the above:


@itemize -

@item 
Provide a link to the website of the syntax checker tool in the comments of
your pull request.

@item 
Add a proper docstring to your syntax checker, including this URL.

@item 
Add unit tests for your syntax checker, or provide example code that triggers
errors for each error pattern of the syntax checker.

@item 
Extend the Ansible playbooks in @code{playbooks/} to install the required tools in
the CI environment and the local testing VM, or explain how to install the
tool on an Ubuntu 12.04 system.
@end itemize

@cartouche
@quotation Note 
Unit tests that can run on Travis CI are @strong{mandatory} for all syntax
checkers in Flycheck.
@end quotation
@end cartouche

@node Pull requests,,Contributing syntax checkers,Contributing code
@anchor{contrib/guidelines id4}@anchor{223}@anchor{contrib/guidelines pull-requests}@anchor{224}
@subsection Pull requests



@itemize -

@item 
Use a @strong{topic branch} to easily amend a pull request later, if necessary.

@item 
Do @strong{not} open new pull requests, when asked to improve your patch.  Instead,
amend your commits with @code{git rebase -i}, and then update the pull request with
@code{git push --force}

@item 
Open a pull request@footnote{https://help.github.com/articles/using-pull-requests} that relates to but one subject with a clear title and
description in grammatically correct, complete sentences.
@end itemize

@cartouche
@quotation Note 
Pull requests @strong{must} pass all tests on Travis CI before being merged.
@end quotation
@end cartouche

@node Testing Flycheck,Writing documentation,Contribution guidelines,Top
@anchor{contrib/testing testing-flycheck}@anchor{225}@anchor{contrib/testing doc}@anchor{226}@anchor{contrib/testing pull-request}@anchor{227}
@chapter Testing Flycheck


Flycheck comes with a large unit test suite, which tests all syntax checkers and
large parts of Flychecks internal API and interactive commands.

This document explains how to use this test suite.

@menu
* Test suite layout:: 
* Test running:: 
* Virtual test environment:: 
* Travis CI:: 

@end menu

@node Test suite layout,Test running,,Testing Flycheck
@anchor{contrib/testing test-suite-layout}@anchor{228}
@section Test suite layout


All test code is contained in the @code{test/} sub-directory, which has the following
contents:


@itemize -

@item 
@code{flycheck-test.el}: The actual unit test suite, that is, the test cases and
the utility functions.

@item 
@code{resources/}: Resource files used by the test suite, including example code
in various programming languages to test syntax checkers.

@item 
@code{run-tests.el}: A simple test runner for non-interactive use, which reads
ERT selectors from the command line and runs all matching tests.
@end itemize

@node Test running,Virtual test environment,Test suite layout,Testing Flycheck
@anchor{contrib/testing test-running}@anchor{229}@anchor{contrib/testing id1}@anchor{22a}
@section Test running


First install Emacs Lisp dependencies using Cask@footnote{http://cask.readthedocs.org}:

@example
$ make deps
@end example

Then install the syntax checkers that you'd like to test:

@example
$ brew install go
$ pip install --user pylint
$ npm install --global coffee coffee-lint jshint
$ cabal install hlint shellcheck
@end example

@cartouche
@quotation Note 
If you'd like to keep your environment clean, use the
@ref{22b,,Virtual test environment} instead.
@end quotation
@end cartouche

Run the entire test suite:

@example
$ make test
@end example

@cartouche
@quotation Note 
Tests which can't be run because of missing tools are gracefully skipped.
@end quotation
@end cartouche

You may also run a specific subset of test cases by passing an ERT selector
expression.  The following example runs all tests for C and C++, except those
whose name matches @code{gcc}:

@example
$ make ERTSELECTOR='(and (or (tag language-c) (tag language-c++)) (not "gcc"))' test
@end example

See @ref{Test Selectors,,,ert} for the syntax of test selectors.

You can also use a different Emacs to run the tests with:

@example
$ make EMACS=emacs-snapshot test
@end example

@cartouche
@quotation Note 
Keep in mind that you must quote the expression for your shell @emph{and} for
Emacs Lisp.
@end quotation
@end cartouche

@node Virtual test environment,Travis CI,Test running,Testing Flycheck
@anchor{contrib/testing id2}@anchor{22c}@anchor{contrib/testing virtual-test-environment}@anchor{22b}
@section Virtual test environment


To run all tests successfully, you need a large amount of external tools.  To
keep your environment clean, and test against a reference environment, Flycheck
provides a virtual machine with a complete test environment, based on VirtualBox
and Vagrant.

The virtual machine contains


@itemize -

@item 
The latest stable Emacs release

@item 
A nightly build of Emacs trunk

@item 
@code{make} and Cask@footnote{http://cask.readthedocs.org}

@item 
All syntax checkers supported by Flycheck
@end itemize

To use this VM, first install the following tools on your system:


@itemize -

@item 
VirtualBox@footnote{https://www.virtualbox.org/}

@item 
Vagrant@footnote{https://www.vagrantup.com/}

@item 
Ansible@footnote{http://www.ansible.com/home}
@end itemize

On Linux, these packages are typically available from the package manager of
your distribution.  On OS X, use the binaries provided for Vagrant and
VirtualBox, and install Ansible from Homebrew@footnote{http://brew.sh/} with @code{brew install ansible}.

To start the VM run the following command in the root directory of Flycheck:

@example
$ vagrant up
@end example

@cartouche
@quotation Warning 
On the first time, this command will setup and provision the VM, and
@strong{download and install over 1GB} of images and packages along the way.
Depending on your network connection and disk speed, this can take an hour or
more.
@end quotation
@end cartouche

After the VM is started, you can connect to it:

@example
$ vagrant ssh
@end example

This will give you a bash prompt within the VM, on which you can run the tests
as explained in @ref{229,,Test running}.

To switch between Emacs versions, pass @code{EMACS} to @code{make test}:

@example
$ make EMACS=emacs24 test
$ make EMACS=emacs-snapshot test
@end example

The latter is the default.

When finished, you can shutdown the VM with:

@example
$ vagrant halt
@end example

Occasionally you should provision the test environment again, to update to the
latest Emacs nightly build, and to follow updates of syntax checker tools.  To
do so, use the @code{--provision} flag when starting the VM:

@example
$ vagrant up --provision
@end example

You can also provision a running machine with:

@example
$ vagrant provision
@end example

The VM is provisioned from Ansible playbooks in the @code{playbooks/} sub-directory
of the top-level source directory.

@node Travis CI,,Virtual test environment,Testing Flycheck
@anchor{contrib/testing homebrew}@anchor{22d}@anchor{contrib/testing travis-ci}@anchor{22e}
@section Travis CI


The entire test suite continuously runs on @ref{22e,,Travis CI} after every push, with
the latest Emacs release and a nightly Emacs snapshot.

Travis CI is configured from @code{.travis.yml} in the top-level source directory,
and uses mostly the same playbooks for provisioning.

@cartouche
@quotation Note 
Travis CI is the @strong{reference environment} for Flycheck's test suite.  All
tests @strong{must pass} on Travis CI.

In case Travis CI diverges from the @ref{22b,,VM},
Travis CI is authoritative.
@end quotation
@end cartouche

@node Writing documentation,Maintenance tasks,Testing Flycheck,Top
@anchor{contrib/docs writing-documentation}@anchor{22f}@anchor{contrib/docs doc}@anchor{230}
@chapter Writing documentation


This document explains how to edit and building the documentation of Flycheck.

@menu
* Build environment setup:: 
* Building HTML and Texinfo:: 
* Verifying references:: 

@end menu

@node Build environment setup,Building HTML and Texinfo,,Writing documentation
@anchor{contrib/docs doc-build-env}@anchor{231}@anchor{contrib/docs build-environment-setup}@anchor{232}
@section Build environment setup


Flycheck's documentation is written using Sphinx@footnote{http://sphinx-doc.org} and sphinxcontrib-emacs@footnote{http://sphinxcontrib-emacs.readthedocs.org/en/latest/}.  To
build the documentation locally, you need to install these tools first.  This
section guides you through the process of installing them.

First make sure, that you have Python 2.7 and virtualenv@footnote{http://virtualenv.readthedocs.org/en/latest/} available.  To install
virtualenv, use:

@example
$ pip install --user virtualenv
@end example

@cartouche
@quotation Note 
You probably need to install pip@footnote{https://pip.pypa.io/} first. It is available in the package
repositories of most Linux distributions, as @code{python-pip} or similar. If
@code{pip} is not available for your Linux distribution, or if you are using OS
X, please follow the instructions to install pip@footnote{https://pip.pypa.io/en/latest/installing.html}.
@end quotation
@end cartouche

Then add @code{~/Library/Python/2.7/bin} (on OS X) or @code{~/.local/bin} (on other
Unix variants) to @code{$PATH}.

Now create a virtual environment and install the requirements of the
documentation:

@example
$ mkdir -p ~/.virtualenvs
$ virtualenv -p python2.7 ~/.virtualenvs/cask
$ pip install -r doc/requirements.txt
@end example

Now you are set up to build the documentation.

@node Building HTML and Texinfo,Verifying references,Build environment setup,Writing documentation
@anchor{contrib/docs building-docs}@anchor{233}@anchor{contrib/docs building-html-and-texinfo}@anchor{234}
@section Building HTML and Texinfo


First, switch to the virtual environment you created in the
@ref{231,,Build environment setup}, and make sure that the requirements are up to date:

@example
$ source ~/.virtualenvs/cask/bin/activate
$ pip install -r doc/requirements.txt
@end example

Now build the documentation:

@example
$ make html
$ make texinfo
@end example

The HTML documentation is build to @code{build/doc/html/}, where you can preview
it.  The Texinfo build goes to @code{doc/flycheck.texi}.

@cartouche
@quotation Warning 
Unlike the HTML output, the Texinfo output is @emph{committed} to the repository,
since it is needed by MELPA@footnote{http://melpa.org/} to build an Info manual for inclusion in the
Flycheck packages.
@end quotation
@end cartouche

@node Verifying references,,Building HTML and Texinfo,Writing documentation
@anchor{contrib/docs verifying-references}@anchor{235}
@section Verifying references


Sphinx emits warnings for internal references and cross-references to Emacs Lisp
symbols that could not be resolved.  Your documentation should build without any
such warnings.

You can additionally verify all external references with:

@example
$ source ~/.virtualenvs/cask/bin/activate
$ make linkcheck
@end example

@node Maintenance tasks,GNU General Public License,Writing documentation,Top
@anchor{contrib/maintenance maintenance-tasks}@anchor{236}@anchor{contrib/maintenance doc}@anchor{237}
@chapter Maintenance tasks


This document explains various maintenance tasks for Flycheck, that contributors
have to perform under specific circumstances.

@menu
* Rebuilding the Texinfo:: 
* Rasterized logo files:: 

@end menu

@node Rebuilding the Texinfo,Rasterized logo files,,Maintenance tasks
@anchor{contrib/maintenance rebuilding-the-texinfo}@anchor{238}
@section Rebuilding the Texinfo


Flycheck contains a Texinfo version of the documentation at
@code{doc/flycheck.texi}, to allow MELPA@footnote{http://melpa.org/} to build the Info manual for Flycheck.

@cartouche
@quotation Warning 
Do @strong{not} edit this file.  It is generated automatically from Flycheck's
documentation.
@end quotation
@end cartouche

When making changes to the documentation, you need to rebuild the Texinfo
version with, by following the @ref{233,,instructions to build the documentation}.

@node Rasterized logo files,,Rebuilding the Texinfo,Maintenance tasks
@anchor{contrib/maintenance rasterized-logo-files}@anchor{239}@anchor{contrib/maintenance melpa}@anchor{23a}
@section Rasterized logo files


The source of the Flycheck logo is @code{flycheck.svg}.  The documentation contains
rasterized versions of this logo at


@itemize -

@item 
@code{doc/images/logo.png} (the logo shown in the documentation and the README)

@item 
@code{doc/images/favicon.ico} (the logo for use as favicon of the documentation)
@end itemize

@cartouche
@quotation Warning 
Do @strong{not} change these files directly.  They are generated automatically
from the SVG source.
@end quotation
@end cartouche

When changing the Flycheck logo, you need to rebuild these files with:

@example
make images
@end example

You need @strong{convert} from ImageMagick@footnote{http://www.imagemagick.org/} and Inkscape@footnote{https://www.inkscape.org/}.  Make sure that
@code{inkscape} is in @code{$PATH}, because ImageMagick's own SVG renderer cannot
properly render the logo.

@node GNU General Public License,GNU Free Documentation License,Maintenance tasks,Top
@anchor{gpl gnu-general-public-license}@anchor{23b}@anchor{gpl doc}@anchor{23c}@anchor{gpl inkscape}@anchor{23d}
@chapter GNU General Public License


@example
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<http://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<http://www.gnu.org/philosophy/why-not-lgpl.html>.
@end example

@node GNU Free Documentation License,Index,GNU General Public License,Top
@anchor{fdl doc}@anchor{23e}@anchor{fdl gnu-free-documentation-license}@anchor{23f}
@chapter GNU Free Documentation License


@example

                GNU Free Documentation License
                 Version 1.3, 3 November 2008


 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of
the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
"Massive Multiauthor Collaboration" (or "MMC") contained in the site
means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 
license published by Creative Commons Corporation, a not-for-profit 
corporation with a principal place of business in San Francisco, 
California, as well as future copyleft versions of that license 
published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in 
part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this 
License, and if all works that were first published under this License 
somewhere other than this MMC, and subsequently incorporated in whole or 
in part into the MMC, (1) had no cover texts or invariant sections, and 
(2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
@end example

@node Index,,GNU Free Documentation License,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
