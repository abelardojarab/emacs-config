;;; custom.el ---                                    -*- lexical-binding: t; -*-

;; Copyright (C) 2017-2020  Abelardo Jara-Berrocal

;; Author: Abelardo Jara-Berrocal <abelardojarab@gmail.com>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of]ea}}]]}_; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:




(provide 'custom)
;;; custom.el ends here


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-PDF-mode t t nil "Customized with use-package auctex")
 '(TeX-auto-save t t nil "Customized with use-package auctex")
 '(TeX-master nil t nil "Customized with use-package auctex")
 '(TeX-parse-self t t nil "Customized with use-package auctex")
 '(TeX-save-query nil t nil "Customized with use-package auctex")
 '(TeX-source-correlate-start-server t t nil "Customized with use-package auctex")
 '(after-find-file-from-revert-buffer t t nil "Customized with use-package files")
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   ["#272822" "#F92672" "#A6E22E" "#E6DB74" "#66D9EF" "#FD5FF0" "#A1EFE4" "#F8F8F2"])
 '(appt-display-diary nil t nil "Customized with use-package appt")
 '(appt-display-format (quote window) t nil "Customized with use-package appt")
 '(appt-display-interval 15 t nil "Customized with use-package appt")
 '(appt-display-mode-line t t nil "Customized with use-package appt")
 '(appt-message-warning-time 30 t nil "Customized with use-package appt")
 '(auto-compile-display-buffer nil nil nil "Customized with use-package auto-compile")
 '(auto-compile-mode-line-counter t nil nil "Customized with use-package auto-compile")
 '(auto-compile-source-recreate-deletes-dest t nil nil "Customized with use-package auto-compile")
 '(auto-compile-toggle-deletes-nonlib-dest t nil nil "Customized with use-package auto-compile")
 '(auto-compile-update-autoloads t nil nil "Customized with use-package auto-compile")
 '(auto-indent-blank-lines-on-move nil t)
 '(auto-indent-disabled-modes-list (quote (vhdl-mode)) t)
 '(auto-indent-indent-style (quote conservative) t)
 '(auto-indent-next-pair-timer-geo-mean (quote ((default 0.0005 0))) t)
 '(auto-indent-on-visit-file nil t)
 '(auto-insert-query nil nil nil "Customized with use-package autoinsert")
 '(auto-revert-check-vc-info t)
 '(auto-revert-interval 2)
 '(auto-revert-verbose nil nil nil "Customized with use-package autorevert")
 '(auto-save-default nil nil nil "Customized with use-package no-littering")
 '(auto-save-interval 500 nil nil "Customized with use-package no-littering")
 '(avy-background t t nil "Customized with use-package avy")
 '(backup-by-copying t nil nil "Customized with use-package no-littering")
 '(backup-by-copying-when-mismatch t nil nil "Customized with use-package no-littering")
 '(basic-c-compile-all-files nil t nil "Customized with use-package basic-c-compile")
 '(basic-c-compile-compiler-flags "-Wall -Werror -std=c++11" t nil "Customized with use-package basic-c-compile")
 '(basic-c-compile-make-clean "find . -type f -executable -delete" t nil "Customized with use-package basic-c-compile")
 '(basic-c-compile-outfile-extension nil t nil "Customized with use-package basic-c-compile")
 '(basic-c-compiler "g++" t nil "Customized with use-package basic-c-compile")
 '(beacon-color "#ec4780")
 '(bidi-display-reordering nil t nil "Customized with use-package emacs")
 '(blink-cursor-mode nil)
 '(bm-buffer-persistence t nil nil "Customized with use-package bm")
 '(bm-cycle-all-buffers t nil nil "Customized with use-package bm")
 '(bm-highlight-style (quote bm-highlight-line-and-fringe) nil nil "Customized with use-package bm")
 '(bm-restore-repository-on-load t t nil "Customized with use-package bm")
 '(bmkp-last-as-first-bookmark-file "~/workspace/emacs-config/.emacs.d/bookmarks")
 '(bookmark-save-flag 1 nil nil "Customized with use-package bookmark")
 '(byte-compile-warnings nil nil nil "Customized with use-package emacs")
 '(c-basic-offset 4)
 '(calendar-mark-diary-entries-flag t nil nil "Customized with use-package appt")
 '(centaur-tabs-modified-marker "M")
 '(centaur-tabs-set-bar (quote over))
 '(centaur-tabs-set-icons t)
 '(centaur-tabs-set-modified-marker t)
 '(charmap-text-scale-adjust 2 t nil "Customized with use-package charmap")
 '(clang-format-style "file" t nil "Customized with use-package clang-format")
 '(column-enforce-column 120 t nil "Customized with use-package column-enforce-mode")
 '(column-number-indicator-zero-based nil)
 '(column-number-mode t)
 '(company-begin-commands
   (quote
    (self-insert-command org-self-insert-command c-electric-lt-gt c-electric-colon completion-separator-self-insert-command outshine-self-insert-command)) nil nil "Customized with use-package company")
 '(company-bibtex-bibliography (quote ("~/workspace/Documents/Bibliography/biblio.bib")) nil nil "Customized with use-package company-bibtex")
 '(company-box-backends-colors nil t)
 '(company-box-doc-delay 0.3)
 '(company-box-max-candidates 50)
 '(company-box-show-single-candidate t)
 '(company-dabbrev-code-everywhere t)
 '(company-dabbrev-downcase nil nil nil "Customized with use-package company")
 '(company-dabbrev-ignore-case t nil nil "Customized with use-package company")
 '(company-echo-delay 0 t nil "Customized with use-package company")
 '(company-frontends
   (quote
    (company-pseudo-tooltip-unless-just-one-frontend company-preview-frontend company-echo-metadata-frontend)) nil nil "Customized with use-package company")
 '(company-gtags-insert-arguments t nil nil "Customized with use-package company")
 '(company-idle-delay 0 nil nil "Customized with use-package company")
 '(company-lighter-base "" nil nil "Customized with use-package company")
 '(company-lsp-async t nil nil "Customized with use-package company-lsp")
 '(company-lsp-cache-candidates (quote auto))
 '(company-minimum-prefix-length 2 nil nil "Customized with use-package company")
 '(company-quickhelp-color-background "#4F4F4F")
 '(company-quickhelp-color-foreground "#DCDCCC")
 '(company-quickhelp-delay 0.2 nil nil "Customized with use-package company-quickhelp")
 '(company-quickhelp-use-propertized-text t nil nil "Customized with use-package company-quickhelp")
 '(company-selection-wrap-around t nil nil "Customized with use-package company")
 '(company-semantic-insert-arguments nil nil nil "Customized with use-package company")
 '(company-show-numbers t nil nil "Customized with use-package company")
 '(company-tooltip-align-annotations t nil nil "Customized with use-package company")
 '(company-tooltip-limit 10 nil nil "Customized with use-package company")
 '(company-transformers (quote (company-sort-by-backend-importance)) nil nil "Customized with use-package company")
 '(compilation-message-face (quote default))
 '(cond-env-home-directory "/opt/anaconda3" t)
 '(conda-anaconda-home "/opt/anaconda3" t)
 '(copyright-year-ranges t t nil "Customized with use-package copyright")
 '(counsel-etags-update-interval 180 nil nil "Customized with use-package counsel-etags")
 '(counsel-mode t)
 '(create-lockfiles nil nil nil "Customized with use-package no-littering")
 '(cua-enable-cua-keys nil)
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(custom-enabled-themes (quote (zenburn)))
 '(custom-safe-themes
   (quote
    ("f3455b91943e9664af7998cc2c458cfc17e674b6443891f519266e5b3c51799d" "13a8eaddb003fd0d561096e11e1a91b029d3c9d64554f8e897b2513dbf14b277" "1068ae7acf99967cc322831589497fee6fb430490147ca12ca7dd3e38d9b552a" "cdb4ffdecc682978da78700a461cdc77456c3a6df1c1803ae2dd55c59fa703e3" "a2cde79e4cc8dc9a03e7d9a42fabf8928720d420034b66aecc5b665bbf05d4e9" "732b807b0543855541743429c9979ebfb363e27ec91e82f463c91e68c772f6e3" "435c36b81d947ef799a4603a3de41b66c4fcc510285eea75242b489763874818" "170bb47b35baa3d2439f0fd26b49f4278e9a8decf611aa33a0dad1397620ddc3" "c82d24bfba431e8104219bfd8e90d47f1ad6b80a504a7900cbee002a8f04392f" "0dd2666921bd4c651c7f8a724b3416e95228a13fca1aa27dc0022f4e023bf197" "54f2d1fcc9bcadedd50398697618f7c34aceb9966a6cbaa99829eb64c0c1f3ca" "bee55ba5e878d0584db9b2fb33f75c348a3008fcfe8e05ab8cae897ca604fd95" "bd7b7c5df1174796deefce5debc2d976b264585d51852c962362be83932873d9" "7c58646ae5de2a5563bd4061d3ff9ee06a8f85d22b08f89f59f3a77a4797ece0" "3f44e2d33b9deb2da947523e2169031d3707eec0426e78c7b8a646ef773a2077" "242527ce24b140d304381952aa7a081179a9848d734446d913ca8ef0af3cef21" "c3d4af771cbe0501d5a865656802788a9a0ff9cf10a7df704ec8b8ef69017c68" "190a9882bef28d7e944aa610aa68fe1ee34ecea6127239178c7ac848754992df" "baec3b9226614da30a3e5135592a65910527df93a257bba423c542695281bc55" "6dd2b995238b4943431af56c5c9c0c825258c2de87b6c936ee88d6bb1e577cb9" "e11569fd7e31321a33358ee4b232c2d3cf05caccd90f896e1df6cab228191109" "38e66a2a20fa9a27af5ffc4f4dd54f69e3fef6b51be7b351e137b24958bfebd7" "3d5720f488f2ed54dd4e40e9252da2912110948366a16aef503f3e9e7dfe4915" "599f1561d84229e02807c952919cd9b0fbaa97ace123851df84806b067666332" "ffca7ac44bfe9d585363f6bbf29f19529de216f85dce7a831dfc28883959ec05" "878497d07b1cb63d19c088031a189ba4edda845c7e0849ab68a4232ab4d6c0b7" "241627b2368997a03e05939e07dbb26672c6b00fd274906fe2a614d6024e7224" "2022c5a92bbc261e045ec053aa466705999863f14b84c012a43f55a95bf9feb8" "a24c5b3c12d147da6cef80938dca1223b7c7f70f2f382b26308eba014dc4833a" "5e52ce58f51827619d27131be3e3936593c9c7f9f9f9d6b33227be6331bf9881" "1f3113447a652b8436a9938bbac71ecaf022cc73ecd0d76182eb9713aa781f17" "8ed752276957903a270c797c4ab52931199806ccd9f0c3bb77f6f4b9e71b9272" "a4c9e536d86666d4494ef7f43c84807162d9bd29b0dfd39bdf2c3d845dcc7b2e" "2a739405edf418b8581dcd176aaf695d319f99e3488224a3c495cb0f9fd814e3" "06b2849748590f7f991bf0aaaea96611bb3a6982cad8b1e3fc707055b96d64ca" "3eb93cd9a0da0f3e86b5d932ac0e3b5f0f50de7a0b805d4eb1f67782e9eb67a4" "fbcdb6b7890d0ec1708fa21ab08eb0cc16a8b7611bb6517b722eba3891dfc9dd" "e87a2bd5abc8448f8676365692e908b709b93f2d3869c42a4371223aab7d9cf8" "cd8176f5688f9a0086d5bc2cacca3c7c2b56808bceafc9df2eb2c2f45f97cea6" "6c803f5992d797ab94a94004b459cc3af3f3cfbe59652f1fece297335d437c81" "a7b211f45891a56000b8f823ad9edb564d873a689c21d9fba114d7a703f9b322" "793d74f2269fd3c2df12900e725fbffca5aabe55ab3c9a5c9d5259e05f0c4de8" "0953e81e91886e57512ef653bf32890e829540484dc5e471c162adb797b9a86d" "95dd1eeafe55e8f94d9234ec5b4214d34bdeee930dd8f71044a0722a3878bcb2" "445b8fed4feed166c021f1102ee9e5233158b71eb5402182fc0a4c6b17d67ba8" "2ab5e12f7513825ba869ca3de0f6185a9deb82c6b1a222eb25b0e38a60c7a606" "a75137dcd452a69cd404b4d44f0e50986196bcd9cf92bae49f8aa01038228221" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" "96ec5305ec9f275f61c25341363081df286d616a27a69904a35c9309cfa0fe1b" "6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" "fb4bf07618eab33c89d72ddc238d3c30918a501cf7f086f2edf8f4edba9bd59f" default)))
 '(debug-on-error nil)
 '(debug-on-quit nil nil nil "Customized with use-package emacs")
 '(delete-by-moving-to-trash t nil nil "Customized with use-package files")
 '(delete-old-versions t nil nil "Customized with use-package no-littering")
 '(diff-hl-flydiff-mode t)
 '(dimmer-fraction 0.25 t nil "Customized with use-package dimmer")
 '(dired-async-mode t)
 '(dired-auto-revert-buffer t)
 '(dired-dwim-target t)
 '(dired-ls-F-marks-symlinks t)
 '(dired-omit-verbose nil)
 '(dired-recursive-copies (quote top))
 '(dired-recursive-deletes (quote top))
 '(diredp-hide-details-initially-flag nil)
 '(direx:closed-icon "+ " t)
 '(direx:leaf-icon "| " t)
 '(direx:open-icon "> " t)
 '(display-time-24hr-format t nil nil "Customized with use-package time")
 '(display-time-default-load-average nil nil nil "Customized with use-package time")
 '(display-time-mode t)
 '(display-time-use-mail-icon t nil nil "Customized with use-package time")
 '(doom-modeline-buffer-file-name-style (quote truncate-with-project))
 '(doom-modeline-icon t)
 '(doom-modeline-major-mode-icon t)
 '(doom-modeline-minor-modes nil)
 '(dumb-jump-aggressive nil t nil "Customized with use-package dumb-jump")
 '(dumb-jump-selector (quote ivy) t nil "Customized with use-package dumb-jump")
 '(ecb-auto-save-before-etags-methods-rebuild nil t nil "Customized with use-package ecb")
 '(ecb-compile-window-height nil t nil "Customized with use-package ecb")
 '(ecb-compile-window-temporally-enlarge nil t nil "Customized with use-package ecb")
 '(ecb-compile-window-width (quote edit-window) t nil "Customized with use-package ecb")
 '(ecb-eshell-fit-window-to-command-output nil t nil "Customized with use-package ecb")
 '(ecb-fix-window-size (quote width) t nil "Customized with use-package ecb")
 '(ecb-highlight-tag-with-point-delay 180 t nil "Customized with use-package ecb")
 '(ecb-history-make-buckets (quote mode) t nil "Customized with use-package ecb")
 '(ecb-kill-buffer-clears-history (quote auto) t nil "Customized with use-package ecb")
 '(ecb-layout-name "left11" t nil "Customized with use-package ecb")
 '(ecb-options-version "2.50")
 '(ecb-show-sources-in-directories-buffer (quote always) t nil "Customized with use-package ecb")
 '(ecb-source-path
   (quote
    (("~/workspace/Documents" "Documents")
     ("~/workspace" "Local")
     ("~/workspace_remote" "Shared")
     ("/" "/"))))
 '(ecb-tip-of-the-day nil t nil "Customized with use-package ecb")
 '(ecb-tree-truncate-lines
   (quote
    (ecb-directories-buffer-name ecb-sources-buffer-name ecb-methods-buffer-name ecb-history-buffer-name)))
 '(ecb-truncate-lines t t nil "Customized with use-package ecb")
 '(ecb-windows-width 35 t nil "Customized with use-package ecb")
 '(ede-locate-setup-options (quote (ede-locate-global ede-locate-locate)))
 '(ede-project-directories (quote ("~/workspace")))
 '(ediff-diff-options "-w" nil nil "Customized with use-package ediff")
 '(ediff-split-window-function (quote split-window-horizontally) nil nil "Customized with use-package ediff")
 '(ediff-window-setup-function (quote ediff-setup-windows-plain) nil nil "Customized with use-package ediff")
 '(eir-always-split-script-window t t)
 '(eir-delete-other-windows t t)
 '(eir-jump-after-eval nil t)
 '(eir-repl-placement (quote right) t)
 '(eldoc-echo-area-use-multiline-p t nil nil "Customized with use-package eldoc")
 '(eldoc-idle-delay 0.8 nil nil "Customized with use-package eldoc")
 '(eldoc-overlay-mode nil t)
 '(elm-format-on-save t t nil "Customized with use-package elm-mode")
 '(elpy-rpc-python-command "python3")
 '(enable-recursive-minibuffers t nil nil "Customized with use-package emacs")
 '(ensime-sem-high-faces
   (quote
    ((var :foreground "#000000" :underline
          (:style wave :color "yellow"))
     (val :foreground "#000000")
     (varField :foreground "#600e7a" :slant italic)
     (valField :foreground "#600e7a" :slant italic)
     (functionCall :foreground "#000000" :slant italic)
     (implicitConversion :underline
                         (:color "#c0c0c0"))
     (implicitParams :underline
                     (:color "#c0c0c0"))
     (operator :foreground "#000080")
     (param :foreground "#000000")
     (class :foreground "#20999d")
     (trait :foreground "#20999d" :slant italic)
     (object :foreground "#5974ab" :slant italic)
     (package :foreground "#000000")
     (deprecated :strike-through "#000000"))))
 '(epa-file-cache-passphrase-for-symmetric-encryption t t nil "Customized with use-package epg-config")
 '(ergoemacs-ctl-c-or-ctl-x-delay 0.2)
 '(ergoemacs-handle-ctl-c-or-ctl-x (quote both))
 '(ergoemacs-ini-mode t)
 '(ergoemacs-keyboard-layout "us")
 '(ergoemacs-mode t)
 '(ergoemacs-smart-paste nil)
 '(ergoemacs-theme "standard")
 '(ergoemacs-theme-options nil)
 '(ergoemacs-use-menus t)
 '(eshell-buffer-shorthand t t)
 '(eshell-cmpl-cycle-completions nil t)
 '(eshell-cmpl-ignore-case t t)
 '(eshell-glob-case-insensitive t)
 '(eshell-history-size 1024 t)
 '(eshell-last-dir-ring-size 512)
 '(eshell-prompt-function (quote epe-theme-lambda) t)
 '(eshell-scroll-to-bottom-on-input (quote this))
 '(etags-table-search-up-depth 2 t nil "Customized with use-package etags-table")
 '(evil-emacs-state-cursor (quote ("#E57373" hbar)))
 '(evil-insert-state-cursor (quote ("#E57373" bar)))
 '(evil-normal-state-cursor (quote ("#FFEE58" box)))
 '(evil-visual-state-cursor (quote ("#C5E1A5" box)))
 '(fci-handle-truncate-lines t t nil "Customized with use-package fill-column-indicator")
 '(fci-rule-color "#49483E")
 '(fci-rule-width 1 t nil "Customized with use-package fill-column-indicator")
 '(fill-column 120 nil nil "Customized with use-package auto-fill")
 '(flycheck-disabled-checkers (quote (html-tidy emacs-lisp-checkdoc)) t nil "Customized with use-package flycheck")
 '(flycheck-highlighting-mode (quote lines) t nil "Customized with use-package flycheck")
 '(flycheck-shellcheck-follow-sources nil t nil "Customized with use-package flycheck")
 '(flycheck-tip-avoid-show-func nil nil nil "Customized with use-package flycheck-tip")
 '(flyspell-delay 1 t nil "Customized with use-package flyspell")
 '(flyspell-issue-message-flag nil t nil "Customized with use-package flyspell")
 '(flyspell-issue-welcome-flag nil t nil "Customized with use-package flyspell")
 '(font-lock-maximum-decoration nil nil nil "Customized with use-package font-lock")
 '(font-lock-multiline t t nil "Customized with use-package font-lock")
 '(font-lock-support-mode (quote jit-lock-mode) nil nil "Customized with use-package font-lock")
 '(format-args t t nil "Customized with use-package semantic")
 '(frame-inhibit-implied-resize t nil nil "Customized with use-package frame")
 '(frame-resize-pixelwise t nil nil "Customized with use-package frame")
 '(gdb-many-windows t t)
 '(gdb-max-frames 120 t)
 '(gdb-show-main t t)
 '(git-commit-fill-column 120 t)
 '(git-commit-summary-max-length 80 t)
 '(git-messenger:show-detail t t nil "Customized with use-package git-messenger")
 '(global-auto-revert-non-file-buffers t nil nil "Customized with use-package autorevert")
 '(gnutls-min-prime-bits 4096 nil nil "Customized with use-package starttls")
 '(gnutls-verify-error t)
 '(gud-key-prefix "" t)
 '(heartbeat-cursor-mode t)
 '(helm-M-x-requires-pattern nil t nil "Customized with use-package helm-config")
 '(helm-always-two-windows t nil nil "Customized with use-package helm-config")
 '(helm-bookmark-show-location t t nil "Customized with use-package helm-config")
 '(helm-buffer-max-length 48 nil nil "Customized with use-package helm-config")
 '(helm-candidate-number-limit 50 nil nil "Customized with use-package helm-config")
 '(helm-dabbrev-related-buffer nil t)
 '(helm-descbinds-mode t)
 '(helm-display-buffer-height 60 nil nil "Customized with use-package helm-config")
 '(helm-display-buffer-reuse-frame t nil nil "Customized with use-package helm-config")
 '(helm-display-buffer-width 180 nil nil "Customized with use-package helm-config")
 '(helm-display-function (quote helm-default-display-buffer) nil nil "Customized with use-package helm-config")
 '(helm-echo-input-in-header-line t nil nil "Customized with use-package helm-config")
 '(helm-ff-auto-update-initial-value nil nil nil "Customized with use-package helm-config")
 '(helm-ff-file-name-history-use-recentf t nil nil "Customized with use-package helm-config")
 '(helm-ff-search-library-in-sexp t nil nil "Customized with use-package helm-config")
 '(helm-ff-skip-boring-files t nil nil "Customized with use-package helm-config")
 '(helm-grep-truncate-lines t nil nil "Customized with use-package helm-config")
 '(helm-idle-delay 0.0 t nil "Customized with use-package helm-config")
 '(helm-input-idle-delay 0.01 nil nil "Customized with use-package helm-config")
 '(helm-mode-handle-completion-in-region nil t nil "Customized with use-package helm-config")
 '(helm-move-to-line-cycle-in-source nil nil nil "Customized with use-package helm-config")
 '(helm-org-headings-fontify t t nil "Customized with use-package helm-config")
 '(helm-quick-update t t nil "Customized with use-package helm-config")
 '(helm-scroll-amount 8 nil nil "Customized with use-package helm-config")
 '(helm-split-window-default-side (quote right) nil nil "Customized with use-package helm-config")
 '(helm-split-window-in-side-p t nil nil "Customized with use-package helm-config")
 '(helm-split-window-inside-p t)
 '(helm-truncate-lines nil nil nil "Customized with use-package helm-config")
 '(helm-turn-on-show-completion nil t)
 '(helm-use-frame-when-more-than-two-windows nil nil nil "Customized with use-package helm-config")
 '(helm-use-undecorated-frame-option t nil nil "Customized with use-package helm-config")
 '(helm-window-prefer-horizontal-split t nil nil "Customized with use-package helm-config")
 '(helm-yas-display-key-on-candidate t nil nil "Customized with use-package helm-config")
 '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
 '(highlight-indent-guides-auto-character-face-perc 7 t)
 '(highlight-indent-guides-auto-enabled nil)
 '(highlight-indent-guides-delay 0 t)
 '(highlight-indent-guides-method (quote character) t)
 '(highlight-indent-guides-responsive (quote top) t)
 '(highlight-nonselected-windows nil nil nil "Customized with use-package frame")
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   (quote
    (("#49483E" . 0)
     ("#679A01" . 20)
     ("#4BBEAE" . 30)
     ("#1DB4D0" . 50)
     ("#9A8F21" . 60)
     ("#A75B00" . 70)
     ("#F309DF" . 85)
     ("#49483E" . 100))))
 '(history-delete-duplicates t)
 '(hl-bg-colors
   (quote
    ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
 '(hl-fg-colors
   (quote
    ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
 '(hl-paren-background-colors (quote ("#e8fce8" "#c1e7f8" "#f8e8e8")))
 '(hl-paren-colors (quote ("#40883f" "#0287c8" "#b85c57")))
 '(hl-sexp-background-color "#1c1f26")
 '(horizontal-scroll-bar-mode nil)
 '(httpd-port 8079 t nil "Customized with use-package skewer-mode")
 '(hydra-hint-display-type nil)
 '(hydra-lv nil t)
 '(ibuffer-inline-columns t t nil "Customized with use-package ibuffer")
 '(imagemagick-enabled-types t)
 '(imenu-list-auto-resize t)
 '(imenu-list-focus-after-activation t)
 '(imenu-list-position (quote right))
 '(imenu-list-size 0.3)
 '(indent-hint-background-overlay t t nil "Customized with use-package indent-hint")
 '(indent-hint-bg nil t nil "Customized with use-package indent-hint")
 '(inhibit-compacting-font-caches t t nil "Customized with use-package faces")
 '(inhibit-startup-message t)
 '(inhibit-startup-screen t)
 '(initial-scratch-message
   ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with 【▤】【o】,
;; then enter the text in that file's own buffer.")
 '(ispell-choices-win-default-height 5 t nil "Customized with use-package ispell")
 '(ispell-highlight-face (quote flyspell-incorrect) t nil "Customized with use-package ispell")
 '(ispell-silently-savep t t nil "Customized with use-package ispell")
 '(ivy-count-format "[%d/%d]")
 '(ivy-display-style (quote fancy))
 '(ivy-do-completion-in-region nil)
 '(ivy-fixed-height-minibuffer t)
 '(ivy-format-function (quote ivy-format-function-arrow) t)
 '(ivy-height 20)
 '(ivy-initial-inputs-alist nil)
 '(ivy-magic-slash-non-match-action nil)
 '(ivy-mode t)
 '(ivy-rich-switch-buffer-align-virtual-buffer nil t nil "Customized with use-package ivy-rich")
 '(ivy-use-virtual-buffers t)
 '(ivy-virtual-abbreviate (quote full))
 '(ivy-wrap t)
 '(jedi:complete-on-dot t t nil "Customized with use-package jedi")
 '(jedi:get-in-function-call-delay 0.2 t nil "Customized with use-package jedi")
 '(jedi:setup-keys nil t nil "Customized with use-package jedi")
 '(jedi:tooltip-method t t nil "Customized with use-package jedi")
 '(jiralib-url "http://jaraberrocal.readmyblog.org:8080" t nil "Customized with use-package org-jira")
 '(jit-lock-chunk-size 8000 nil nil "Customized with use-package font-lock")
 '(jit-lock-contextually nil)
 '(jit-lock-defer-contextually nil)
 '(jit-lock-defer-time 0.1 nil nil "Customized with use-package font-lock")
 '(jit-lock-stealth-load 10 nil nil "Customized with use-package font-lock")
 '(jit-lock-stealth-nice 0.01 nil nil "Customized with use-package font-lock")
 '(jit-lock-stealth-time 0.02 nil nil "Customized with use-package font-lock")
 '(jit-lock-stealth-verbose nil nil nil "Customized with use-package font-lock")
 '(js2-allow-rhino-new-expr-initializer nil t nil "Customized with use-package js2-mode")
 '(js2-auto-indent-p t t nil "Customized with use-package js2-mode")
 '(js2-basic-offset 4 t nil "Customized with use-package js2-mode")
 '(js2-concat-multiline-strings (quote eol) t nil "Customized with use-package js2-mode")
 '(js2-enter-indents-newline nil t nil "Customized with use-package js2-mode")
 '(js2-idle-timer-delay 0.1 t nil "Customized with use-package js2-mode")
 '(js2-include-gears-externs nil t nil "Customized with use-package js2-mode")
 '(js2-include-rhino-externs nil t nil "Customized with use-package js2-mode")
 '(js2-indent-on-enter-key nil t nil "Customized with use-package js2-mode")
 '(js2-mirror-mode nil t nil "Customized with use-package js2-mode")
 '(js2-rebind-eol-bol-keys nil t nil "Customized with use-package js2-mode")
 '(js2-show-parse-errors nil t nil "Customized with use-package js2-mode")
 '(js2-strict-inconsistent-return-warning nil t nil "Customized with use-package js2-mode")
 '(js2-strict-missing-semi-warning nil t nil "Customized with use-package js2-mode")
 '(js2-strict-trailing-comma-warning t t nil "Customized with use-package js2-mode")
 '(kept-new-versions 6 nil nil "Customized with use-package no-littering")
 '(kept-old-versions 2 nil nil "Customized with use-package no-littering")
 '(langtool-disabled-rules
   (quote
    ("WHITESPACE_RULE" "EN_UNPAIRED_BRACKETS" "COMMA_PARENTHESIS_WHITESPACE" "EN_QUOTES")))
 '(langtool-mother-tongue "en")
 '(large-file-warning-threshold nil nil nil "Customized with use-package emacs")
 '(line-move-visual t nil nil "Customized with use-package emacs")
 '(line-spacing 2)
 '(load-file-rep-suffixes (quote ("")) t nil "Customized with use-package emacs")
 '(load-prefer-newer nil nil nil "Customized with use-package emacs")
 '(ls-lisp-dirs-first t t)
 '(lsp-auto-guess-root nil)
 '(lsp-file-watch-threshold 1048576)
 '(lsp-prefer-flymake nil)
 '(lsp-ui-doc-enable nil t nil "Customized with use-package lsp-ui")
 '(lsp-ui-doc-header t t)
 '(lsp-ui-doc-include-signature t t)
 '(lsp-ui-doc-position (quote top) t)
 '(lsp-ui-flycheck-enable t t nil "Customized with use-package lsp-ui")
 '(lsp-ui-imenu-enable t t nil "Customized with use-package lsp-ui")
 '(lsp-ui-sideline-enable nil t nil "Customized with use-package lsp-ui")
 '(lsp-ui-sideline-ignore-duplicate t t nil "Customized with use-package lsp-ui")
 '(lsp-ui-sideline-show-symbol nil t nil "Customized with use-package lsp-ui")
 '(magic-latex-enable-block-align nil t nil "Customized with use-package magic-latex-buffer")
 '(magic-latex-enable-block-highlight t t nil "Customized with use-package magic-latex-buffer")
 '(magic-latex-enable-inline-image nil t nil "Customized with use-package magic-latex-buffer")
 '(magic-latex-enable-minibuffer-echo t t nil "Customized with use-package magic-latex-buffer")
 '(magic-latex-enable-pretty-symbols t t nil "Customized with use-package magic-latex-buffer")
 '(magic-latex-enable-suscript t t nil "Customized with use-package magic-latex-buffer")
 '(magit-auto-revert-mode nil t)
 '(magit-backup-mode nil t)
 '(magit-commit-arguments nil)
 '(magit-completing-read-function (quote ivy-completing-read) t)
 '(magit-default-tracking-name-function (quote magit-default-tracking-name-branch-only) t)
 '(magit-diff-refine-hunk t t)
 '(magit-diff-use-overlays nil)
 '(magit-keep-region-overlay t t)
 '(magit-last-seen-setup-instructions "1.4.0" t nil "Customized with use-package magit")
 '(magit-process-popup-time 10 t)
 '(magit-refresh-file-buffer-hook nil t)
 '(magit-refs-show-commit-count (quote all) t)
 '(magit-revert-buffers (quote silent) t)
 '(magit-rewrite-inclusive (quote ask) t)
 '(magit-save-some-buffers t t)
 '(magit-set-upstream-on-push (quote askifnotset) t)
 '(magit-status-buffer-switch-function (quote switch-to-buffer) t)
 '(magit-turn-on-auto-revert-mode nil t)
 '(make-backup-files nil nil nil "Customized with use-package no-littering")
 '(markdown-asymmetric-header t nil nil "Customized with use-package markdown-mode")
 '(markdown-enable-wiki-links t nil nil "Customized with use-package markdown-mode")
 '(markdown-footnote-location (quote immediately) nil nil "Customized with use-package markdown-mode")
 '(markdown-header-scaling t nil nil "Customized with use-package markdown-mode")
 '(markdown-indent-on-enter (quote indent-and-new-item) nil nil "Customized with use-package markdown-mode")
 '(markdown-list-indent-width 2 nil nil "Customized with use-package markdown-mode")
 '(markdown-wiki-link-alias-first nil nil nil "Customized with use-package markdown-mode")
 '(markdown-wiki-link-fontify-missing t nil nil "Customized with use-package markdown-mode")
 '(max-mini-window-height 30 nil nil "Customized with use-package frame")
 '(message-truncate-lines nil t nil "Customized with use-package emacs")
 '(mf--source-file-extension "cpp" t nil "Customized with use-package member-functions")
 '(mime-edit-split-message nil t nil "Customized with use-package mime-w3m")
 '(minibuffer-eldef-shorten-default t t)
 '(moo-select-method (quote ivy) t nil "Customized with use-package function-args")
 '(neo-auto-indent-point t t nil "Customized with use-package neotree")
 '(neo-banner-message nil t nil "Customized with use-package neotree")
 '(neo-create-file-auto-open t t nil "Customized with use-package neotree")
 '(neo-dont-be-alone t t nil "Customized with use-package neotree")
 '(neo-mode-line-type (quote none) t nil "Customized with use-package neotree")
 '(neo-show-hidden-files t t nil "Customized with use-package neotree")
 '(neo-show-updir-line t t nil "Customized with use-package neotree")
 '(neo-smart-open t t nil "Customized with use-package neotree")
 '(neo-vc-integration nil t nil "Customized with use-package neotree")
 '(neo-window-fixed-size nil t nil "Customized with use-package neotree")
 '(neo-window-width 32 t nil "Customized with use-package neotree")
 '(next-line-add-newlines nil nil nil "Customized with use-package emacs")
 '(no-redraw-on-reenter t nil nil "Customized with use-package emacs")
 '(nrepl-message-colors
   (quote
    ("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3")))
 '(nxml-auto-insert-xml-declaration-flag t t nil "Customized with use-package nxml-mode")
 '(nxml-slash-auto-complete-flag t t nil "Customized with use-package nxml-mode")
 '(nyan-cat-face-number 4 t)
 '(org-CUA-compatible t)
 '(org-agenda-compact-blocks t t nil "Customized with use-package org-agenda")
 '(org-agenda-default-appointment-duration 60 t nil "Customized with use-package org-agenda")
 '(org-agenda-dim-blocked-tasks t t nil "Customized with use-package org-agenda")
 '(org-agenda-inhibit-startup t nil nil "Customized with use-package org-agenda")
 '(org-agenda-show-all-dates t t nil "Customized with use-package org-agenda")
 '(org-agenda-show-log t t nil "Customized with use-package org-agenda")
 '(org-agenda-skip-deadline-if-done t t nil "Customized with use-package org-agenda")
 '(org-agenda-skip-deadline-prewarning-if-scheduled t t nil "Customized with use-package org-agenda")
 '(org-agenda-skip-scheduled-if-done t t nil "Customized with use-package org-agenda")
 '(org-agenda-span 14 t nil "Customized with use-package org-agenda")
 '(org-agenda-start-on-weekday nil t nil "Customized with use-package org-agenda")
 '(org-agenda-sticky t t nil "Customized with use-package org-agenda")
 '(org-agenda-window-setup (quote current-window) t nil "Customized with use-package org-agenda")
 '(org-catch-invisible-edits (quote smart) nil nil "Customized with use-package org")
 '(org-completion-use-ido t t nil "Customized with use-package org")
 '(org-confirm-babel-evaluate nil nil nil "Customized with use-package ob")
 '(org-cycle-include-plain-lists (quote integrate) nil nil "Customized with use-package org")
 '(org-cycle-separator-lines 1 nil nil "Customized with use-package org")
 '(org-deadline-warning-days 7 nil nil "Customized with use-package org-agenda")
 '(org-emphasis-alist
   (quote
    (("*" bold)
     ("/" italic)
     ("_" underline)
     ("=" org-verbatim verbatim)
     ("~" org-code verbatim)
     ("+"
      (:strike-through t)))))
 '(org-enforce-todo-dependencies t nil nil "Customized with use-package org-agenda")
 '(org-export-allow-bind-keywords t nil nil "Customized with use-package ox")
 '(org-export-async-debug t t nil "Customized with use-package ox")
 '(org-export-babel-evaluate t nil nil "Customized with use-package ob")
 '(org-export-coding-system (quote utf-8) nil nil "Customized with use-package ox")
 '(org-export-headline-levels 4 nil nil "Customized with use-package ox")
 '(org-export-time-stamp-file nil nil nil "Customized with use-package ox")
 '(org-export-use-babel t nil nil "Customized with use-package ob")
 '(org-export-with-smart-quotes t nil nil "Customized with use-package ox")
 '(org-export-with-sub-superscripts (quote {}) nil nil "Customized with use-package ox")
 '(org-fancy-priorities-list
   (quote
    ((65 . "❗")
     (66 . "⬆")
     (67 . "⬇")
     (68 . "☕")
     (49 . "⚡")
     (50 . "⮬")
     (51 . "⮮")
     (52 . "☕")
     (73 . "❗"))) t nil "Customized with use-package org-fancy-priorities")
 '(org-hide-emphasis-markers t nil nil "Customized with use-package org")
 '(org-hide-leading-stars nil nil nil "Customized with use-package org")
 '(org-highlight-latex-and-related (quote (latex)) nil nil "Customized with use-package org")
 '(org-indent-mode nil t nil "Customized with use-package org")
 '(org-latex-default-figure-position "!htb" nil nil "Customized with use-package ox-latex")
 '(org-latex-listings t nil nil "Customized with use-package ox-latex")
 '(org-latex-table-caption-above nil t nil "Customized with use-package ox-latex")
 '(org-list-allow-alphabetical t nil nil "Customized with use-package org")
 '(org-log-done (quote time) nil nil "Customized with use-package org-agenda")
 '(org-pretty-entities t nil nil "Customized with use-package org")
 '(org-ref-default-citation-link "autocite" t)
 '(org-ref-insert-cite-key "C-c [" t)
 '(org-replace-disputed-keys t)
 '(org-special-ctrl-a/e t)
 '(org-src-fontify-natively t nil nil "Customized with use-package ob")
 '(org-src-preserve-indentation t nil nil "Customized with use-package ob")
 '(org-src-tab-acts-natively t nil nil "Customized with use-package ob")
 '(org-src-window-setup (quote current-window) nil nil "Customized with use-package ob")
 '(org-startup-folded (quote showall) nil nil "Customized with use-package org")
 '(org-startup-indented t nil nil "Customized with use-package org")
 '(org-startup-truncated t nil nil "Customized with use-package org")
 '(org-startup-with-inline-images nil nil nil "Customized with use-package org")
 '(org-support-shift-select (quote always) nil nil "Customized with use-package org")
 '(org-tags-column 120 nil nil "Customized with use-package org")
 '(org-use-speed-commands t nil nil "Customized with use-package org")
 '(org-use-sub-superscripts nil nil nil "Customized with use-package org")
 '(origami-show-fold-header t nil nil "Customized with use-package origami")
 '(outshine-org-style-global-cycling-at-bob-p t t nil "Customized with use-package outshine")
 '(outshine-use-speed-commands t t nil "Customized with use-package outshine")
 '(package-selected-packages (quote (package-build shut-up epl git commander f dash s)))
 '(paradox-automatically-star t t)
 '(paradox-execute-asynchronously t t)
 '(paradox-github-token t t)
 '(paradox-lines-per-entry 1 t)
 '(password-store-password-length 30 t nil "Customized with use-package ivy-pass")
 '(pdf-view-midnight-colors (quote ("#DCDCCC" . "#383838")))
 '(persp-auto-resume-time 0.1 t)
 '(persp-auto-save-num-of-backups 1 t)
 '(persp-auto-save-opt 0 t)
 '(persp-autokill-buffer-on-remove (quote kill-weak) t)
 '(pos-tip-background-color "#A6E22E")
 '(pos-tip-border-width 1 t)
 '(pos-tip-foreground-color "#272822")
 '(pos-tip-internal-border-width 6 t)
 '(powerline-default-separator (quote slant) nil nil "Customized with use-package spaceline")
 '(projectile-mode t nil (projectile))
 '(projectile-mode-line-prefix "")
 '(projectile-sort-order (quote recentf))
 '(projectile-use-git-grep t)
 '(purpose-preferred-prompt (quote helm) t)
 '(py-shell-name "python3" t nil "Customized with use-package python-mode")
 '(py-shell-switch-buffers-on-execute-p t t nil "Customized with use-package python-mode")
 '(py-smart-indentation t t nil "Customized with use-package python-mode")
 '(py-split-windows-on-execute-function (quote split-window-horizontally) t nil "Customized with use-package python-mode")
 '(py-switch-buffers-on-execute-p t t nil "Customized with use-package python-mode")
 '(python-environment-directory "~/.emacs.cache/python-environments")
 '(python-shell-interpreter "/opt/anaconda3/bin/python3")
 '(python-shell-interpreter-args "-m IPython --simple-prompt -i")
 '(read-file-name-completion-ignore-case t nil nil "Customized with use-package files")
 '(read-quoted-char-radix 10 nil nil "Customized with use-package mule")
 '(recenter-positions (quote (middle top bottom)) nil nil "Customized with use-package emacs")
 '(recentf-menu-before "Close")
 '(reftex-cite-cleanup-optional-args t t nil "Customized with use-package reftex-cite")
 '(reftex-cite-prompt-optional-args nil t nil "Customized with use-package reftex-cite")
 '(reftex-enable-partial-scans t t nil "Customized with use-package reftex-cite")
 '(reftex-plug-into-AUCTeX t t nil "Customized with use-package reftex-cite")
 '(reftex-save-parse-info t t nil "Customized with use-package reftex-cite")
 '(reftex-use-multiple-selection-buffers t t nil "Customized with use-package reftex-cite")
 '(register-preview-delay 2)
 '(register-separator "

")
 '(report-emacs-bug-no-explanations t nil nil "Customized with use-package emacsbug")
 '(require-final-newline t nil nil "Customized with use-package emacs")
 '(resize-mini-windows (quote grow-only) nil nil "Customized with use-package frame")
 '(ring-bell-function (quote ignore) nil nil "Customized with use-package emacs")
 '(rtags-autostart-diagnostics t nil nil "Customized with use-package rtags")
 '(rtags-completions-enabled t nil nil "Customized with use-package company-rtags")
 '(rtags-display-result-backend (quote helm) nil nil "Customized with use-package rtags")
 '(rtags-display-summary-as-tooltip t nil nil "Customized with use-package rtags")
 '(rtags-periodic-reparse-timeout 10 nil nil "Customized with use-package rtags")
 '(rtags-timeout 2 nil nil "Customized with use-package rtags")
 '(rtags-tooltips-enabled t nil nil "Customized with use-package rtags")
 '(rtags-use-helm t t nil "Customized with use-package rtags")
 '(safe-local-variable-values
   (quote
    ((cmake-tab-width . 4)
     (eval flycheck-cask-setup)
     (hl-sexp-mode)
     (rainbow-mode . t)
     (encoding . utf-8-unix)
     (eval c-set-offset
           (quote innamespace)
           0)
     (eval when
           (fboundp
            (quote aggressive-indent-mode))
           (aggressive-indent-mode -1))
     (eval when
           (fboundp
            (quote rainbow-mode))
           (rainbow-mode 1)))))
 '(same-window-regexps (quote (".")) nil nil "Customized with use-package frame")
 '(save-abbrevs (quote silently) nil nil "Customized with use-package abbrev")
 '(save-interprogram-paste-before-kill t nil nil "Customized with use-package emacs")
 '(save-place t nil (saveplace) "Customized with use-package saveplace")
 '(savehist-additional-variables (quote (search ring regexp-search-ring)) nil nil "Customized with use-package savehist")
 '(savehist-autosave-interval 120 nil nil "Customized with use-package savehist")
 '(scroll-error-top-bottom t)
 '(semantic-idle-scheduler-idle-time 10 nil nil "Customized with use-package semantic")
 '(semantic-idle-scheduler-max-buffer-size 1 nil nil "Customized with use-package semantic")
 '(semantic-idle-scheduler-work-idle-time 60 nil nil "Customized with use-package semantic")
 '(semantic-idle-work-parse-neighboring-files-flag nil nil nil "Customized with use-package semantic")
 '(semantic-idle-work-update-headers-flag nil nil nil "Customized with use-package semantic")
 '(semanticdb-search-system-databases t t nil "Customized with use-package semantic")
 '(set-mark-command-repeat-pop t)
 '(setq
   (quote
    ((OpenPGP
      (program . "/usr/bin/gpg2")
      (curve . "ed25519;nistp256;nistp384;nistp521;brainpoolP256r1;brainpoolP384r1;brainpoolP512r1")
      (compress 0 1 2 3)
      (digestname . "SHA1;RIPEMD160;SHA256;SHA384;SHA512;SHA224")
      (digest 2 3 8 9 10 11)
      (ciphername . "IDEA;3DES;CAST5;BLOWFISH;AES;AES192;AES256;TWOFISH;CAMELLIA128;CAMELLIA192;CAMELLIA256")
      (cipher 1 2 3 4 7 8 9 10 11 12 13)
      (pubkeyname . "RSA;ELG;DSA;ECDH;ECDSA;EDDSA")
      (pubkey 1 16 17 18 19 22)
      (version . "2.1.11")))) t nil "Customized with use-package epg-config")
 '(shackle-default-alignment (quote right))
 '(shackle-default-ratio 0.4)
 '(shackle-default-size 0.4)
 '(shackle-lighter "" t)
 '(shackle-mode t)
 '(shackle-select-reused-windows nil)
 '(shift-select-mode t)
 '(show-paren-delay 0)
 '(show-paren-highlight-openparen t)
 '(show-paren-mode t)
 '(show-paren-style (quote paren))
 '(show-paren-when-point-in-periphery t)
 '(show-paren-when-point-inside-paren nil)
 '(smart-jump-selector (quote ivy) t)
 '(smart-tab-using-hippie-expand t)
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(smex-prompt-string "M-x ")
 '(sml/active-background-color "#98ece8")
 '(sml/active-foreground-color "#424242")
 '(sml/inactive-background-color "#4fa8a8")
 '(sml/inactive-foreground-color "#424242")
 '(smooth-scrolling-mode t)
 '(sp-escape-quotes-after-insert nil)
 '(sp-max-pair-length 2 t)
 '(spaceline-display-default-perspective t t nil "Customized with use-package spaceline")
 '(spaceline-flycheck-bullet "• %s" t nil "Customized with use-package spaceline")
 '(spaceline-highlight-face-func (quote spaceline-highlight-face-modified) t nil "Customized with use-package spaceline")
 '(spaceline-separator-dir-left (quote (left . left)) t nil "Customized with use-package spaceline")
 '(spaceline-separator-dir-right (quote (right . right)) t nil "Customized with use-package spaceline")
 '(stack-trace-on-error t t)
 '(starttls-extra-arguments nil nil nil "Customized with use-package starttls")
 '(starttls-gnutls-program "gnutls-cli" nil nil "Customized with use-package starttls")
 '(starttls-use-gnutls t nil nil "Customized with use-package starttls")
 '(svn-status-hide-unknown t t)
 '(svn-status-hide-unmodified t t)
 '(svn-status-svn-file-coding-system (quote utf-8) t)
 '(switch-to-buffer-in-dedicated-window (quote prompt) nil nil "Customized with use-package frame")
 '(tabbar-auto-scroll-flag t nil nil "Customized with use-package tabbar")
 '(tabbar-background-color "#353535")
 '(tabbar-cycle-scope (quote tabs) nil nil "Customized with use-package tabbar")
 '(tabbar-mode t nil (tabbar))
 '(tabbar-use-images t nil nil "Customized with use-package tabbar")
 '(table-time-before-update 0.1 nil nil "Customized with use-package tabbar")
 '(tags-add-tables t nil nil "Customized with use-package etags")
 '(tags-always-build-completion-table t t nil "Customized with use-package etags")
 '(tags-revert-without-query t nil nil "Customized with use-package etags")
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(time-stamp-active t nil nil "Customized with use-package time-stamp")
 '(time-stamp-format "%04y-%02m-%02d %02H:%02M:%02S (%u)" nil nil "Customized with use-package time-stamp")
 '(time-stamp-line-limit 20 t nil "Customized with use-package time-stamp")
 '(tls-checktrust t)
 '(tool-bar-mode nil)
 '(tooltip-delay 1 nil nil "Customized with use-package tooltip")
 '(track-eol t)
 '(transient-mark-mode t)
 '(treemacs-change-root-without-asking t t)
 '(treemacs-collapse-dirs 3 t)
 '(treemacs-deferred-git-apply-delay 0.5 t)
 '(treemacs-display-in-side-window t t)
 '(treemacs-eldoc-display t t)
 '(treemacs-file-event-delay 5000 t)
 '(treemacs-file-follow-delay 0.2 t)
 '(treemacs-follow-after-init t t)
 '(treemacs-git-command-pipe "" t)
 '(treemacs-goto-tag-strategy (quote refetch-index) t)
 '(treemacs-indentation 2 t)
 '(treemacs-indentation-string " " t)
 '(treemacs-is-never-other-window nil t)
 '(treemacs-max-git-entries 5000 t)
 '(treemacs-missing-project-action (quote ask) t)
 '(treemacs-never-persist nil t)
 '(treemacs-no-delete-other-windows t t)
 '(treemacs-no-png-images nil t)
 '(treemacs-persist-file "~/.emacs.cache/treemacs-persist" t)
 '(treemacs-position (quote left) t)
 '(treemacs-project-follow-cleanup nil t)
 '(treemacs-recenter-after-file-follow nil t)
 '(treemacs-recenter-after-project-expand (quote on-distance) t)
 '(treemacs-recenter-after-project-jump (quote always) t)
 '(treemacs-recenter-after-tag-follow nil t)
 '(treemacs-recenter-distance 0.1 t)
 '(treemacs-show-cursor nil t)
 '(treemacs-show-hidden-files t t)
 '(treemacs-silent-filewatch nil t)
 '(treemacs-silent-refresh nil t)
 '(treemacs-sorting (quote alphabetic-asc) t)
 '(treemacs-space-between-root-nodes t t)
 '(treemacs-tag-follow-cleanup t t)
 '(treemacs-tag-follow-delay 1.5 t)
 '(treemacs-width 26 t)
 '(undo-no-redo t t)
 '(undo-tree-auto-save t t)
 '(undo-tree-auto-save-history t)
 '(undo-tree-enable-undo-in-region t)
 '(undo-tree-visualizer-diff t)
 '(undo-tree-visualizer-timestamps t)
 '(use-package-compute-statistics t)
 '(use-package-enable-imenu-support t)
 '(use-package-expand-minimally t)
 '(use-package-verbose t)
 '(vc-annotate-background nil)
 '(vc-annotate-background-mode nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#F92672")
     (40 . "#CF4F1F")
     (60 . "#C26C0F")
     (80 . "#E6DB74")
     (100 . "#AB8C00")
     (120 . "#A18F00")
     (140 . "#989200")
     (160 . "#8E9500")
     (180 . "#A6E22E")
     (200 . "#729A1E")
     (220 . "#609C3C")
     (240 . "#4E9D5B")
     (260 . "#3C9F79")
     (280 . "#A1EFE4")
     (300 . "#299BA6")
     (320 . "#2896B5")
     (340 . "#2790C3")
     (360 . "#66D9EF"))))
 '(vc-annotate-very-old-color nil)
 '(vc-follow-symlinks t nil nil "Customized with use-package vc")
 '(version-control t nil nil "Customized with use-package no-littering")
 '(visible-bell t nil nil "Customized with use-package emacs")
 '(visual-fill-column-center-text t t nil "Customized with use-package visual-fill-column")
 '(visual-fill-column-fringes-outside-margins nil t nil "Customized with use-package visual-fill-column")
 '(visual-line-fringe-indicators (quote (nil right-curly-arrow)) nil nil "Customized with use-package simple")
 '(vr/engine (quote pcre2el) t nil "Customized with use-package visual-regexp-steroids")
 '(w32-get-true-file-attributes nil t nil "Customized with use-package files")
 '(w32-pipe-read-delay 0 t nil "Customized with use-package files")
 '(w3m-command-arguments (quote ("-cookie" "-F")) t)
 '(w3m-default-display-inline-images t t)
 '(w3m-home-page "http://www.google.com" t)
 '(w3m-show-graphic-icons-in-header-line t t)
 '(w3m-show-graphic-icons-in-mode-line t t)
 '(w3m-use-cookies t t)
 '(weechat-color-list
   (unspecified "#272822" "#49483E" "#F70057" "#F92672" "#86C30D" "#A6E22E" "#BEB244" "#E6DB74" "#40CAE4" "#66D9EF" "#FB35EA" "#FD5FF0" "#74DBCD" "#A1EFE4" "#F8F8F2" "#F8F8F0"))
 '(which-func-maxout 1024 nil nil "Customized with use-package which-func")
 '(which-func-modes
   (quote
    (latex-mode markdown-mode org-mode emacs-lisp-mode python-mode c-mode c++-mode)) nil nil "Customized with use-package which-func")
 '(which-func-unknown "⊥" t nil "Customized with use-package which-func")
 '(which-function-mode nil)
 '(which-key-add-column-padding 1 nil nil "Customized with use-package which-key")
 '(which-key-idle-delay 2.0 nil nil "Customized with use-package which-key")
 '(which-key-max-display-columns nil nil nil "Customized with use-package which-key")
 '(which-key-min-display-lines 5 nil nil "Customized with use-package which-key")
 '(which-key-mode t)
 '(which-key-popup-type (quote minibuffer) nil nil "Customized with use-package which-key")
 '(which-key-side-window-location (quote right) nil nil "Customized with use-package which-key")
 '(which-key-side-window-max-width 0.33 nil nil "Customized with use-package which-key")
 '(which-key-sort-order (quote which-key-prefix-then-key-order) nil nil "Customized with use-package which-key")
 '(which-key-sort-uppercase-first nil nil nil "Customized with use-package which-key")
 '(which-key-special-keys nil nil nil "Customized with use-package which-key")
 '(window-combination-resize t nil nil "Customized with use-package frame")
 '(window-divider-default-places (quote right-only) nil nil "Customized with use-package frame")
 '(window-divider-default-right-width 1 nil nil "Customized with use-package frame")
 '(winner-boring-buffers
   (quote
    ("*Completions*" "*Compile-Log*" "*inferior-lisp*" "*Fuzzy Completions*" "*Apropos*" "*Help*" "*cvs*" "*Buffer List*" "*Ibuffer*" "*esh command on file*")) nil nil "Customized with use-package winner")
 '(with-editor-file-name-history-exclude (quote ("1")) t nil "Customized with use-package magit")
 '(x-underline-at-descent-line t)
 '(xref-show-xrefs-function (quote helm-xref-show-xrefs) t nil "Customized with use-package helm-xref")
 '(xterm-color-names
   ["#eee8d5" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#073642"])
 '(xterm-color-names-bright
   ["#fdf6e3" "#cb4b16" "#93a1a1" "#839496" "#657b83" "#6c71c4" "#586e75" "#002b36"])
 '(yafolding-ellipsis-content " ⮷ " t nil "Customized with use-package yafolding"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0))))
 '(ecb-default-general-face ((t (:background "#263238" :inherit fixed-pitch))))
 '(ecb-default-highlight-face ((t (:background "forest green"))))
 '(fa-face-hint ((t (:background "#3f3f3f" :foreground "#ffffff"))))
 '(fa-face-hint-bold ((t (:background "#3f3f3f" :weight bold))))
 '(fa-face-semi ((t (:background "#3f3f3f" :foreground "#ffffff" :weight bold))))
 '(fa-face-type ((t (:inherit (quote font-lock-type-face) :background "#3f3f3f"))))
 '(fa-face-type-bold ((t (:inherit (quote font-lock-type-face) :background "#999999" :bold t))))
 '(fringe ((t (:background "#282c34"))))
 '(jedi:highlight-function-argument ((((class color) (min-colors 257)) (:inherit bold)) (((class color) (min-colors 89)) (:inherit bold))))
 '(origami-fold-fringe-face ((t (:inherit magit-diff-context-highlight))))
 '(origami-fold-replacement-face ((t (:inherit magit-diff-context-highlight))))
 '(tabbar-button ((t (:inherit tabbar-default :foreground "#282c34"))))
 '(tabbar-button-highlight ((t (:inherit tabbar-default))))
 '(tabbar-default ((t (:inherit fixed-pitch :background "#47493e" :foreground "#F8F8F2"))))
 '(tabbar-highlight ((t (:underline t))))
 '(tabbar-selected ((t (:inherit tabbar-default :background "#282c34"))))
 '(tabbar-separator ((t (:inherit tabbar-default :background "#47493e"))))
 '(tabbar-unselected ((t (:inherit tabbar-default)))))
